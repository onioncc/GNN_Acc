// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=659,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2778,HLS_SYN_LUT=3500,HLS_VERSION=2020_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_pp0_stage0 = 19'd256;
parameter    ap_ST_fsm_state12 = 19'd512;
parameter    ap_ST_fsm_state13 = 19'd1024;
parameter    ap_ST_fsm_state14 = 19'd2048;
parameter    ap_ST_fsm_state15 = 19'd4096;
parameter    ap_ST_fsm_pp1_stage0 = 19'd8192;
parameter    ap_ST_fsm_state19 = 19'd16384;
parameter    ap_ST_fsm_state20 = 19'd32768;
parameter    ap_ST_fsm_state21 = 19'd65536;
parameter    ap_ST_fsm_state22 = 19'd131072;
parameter    ap_ST_fsm_state23 = 19'd262144;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] weights;
wire   [63:0] data_in;
wire   [63:0] data_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln74_reg_607;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln85_reg_657;
reg   [0:0] icmp_ln85_reg_657_pp1_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state23;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [0:0] gmem_ARID;
reg   [31:0] gmem_ARLEN;
reg   [2:0] gmem_ARSIZE;
reg   [1:0] gmem_ARBURST;
reg   [1:0] gmem_ARLOCK;
reg   [3:0] gmem_ARCACHE;
reg   [2:0] gmem_ARPROT;
reg   [3:0] gmem_ARQOS;
reg   [3:0] gmem_ARREGION;
reg   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [5:0] indvar_flatten_reg_312;
reg   [2:0] i_reg_323;
reg   [3:0] j_reg_334;
reg   [6:0] indvar_flatten7_reg_357;
reg   [2:0] i_1_reg_368;
reg   [4:0] j_1_reg_379;
reg   [63:0] data_out_read_reg_586;
reg   [63:0] weights_read_reg_591;
reg   [63:0] gmem_addr_reg_596;
wire   [5:0] add_ln74_fu_427_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln74_fu_433_p2;
wire   [3:0] select_ln74_fu_445_p3;
reg   [3:0] select_ln74_reg_611;
reg   [3:0] select_ln74_reg_611_pp0_iter1_reg;
wire   [2:0] select_ln74_1_fu_459_p3;
reg   [2:0] select_ln74_1_reg_616;
wire   [1:0] trunc_ln74_fu_467_p1;
reg   [1:0] trunc_ln74_reg_621;
reg   [1:0] trunc_ln74_reg_621_pp0_iter1_reg;
wire   [3:0] add_ln75_fu_471_p2;
reg   [31:0] gmem_addr_read_reg_630;
wire   [4:0] d_out_1_fu_484_p2;
reg   [4:0] d_out_1_reg_638;
wire    ap_CS_fsm_state13;
reg   [63:0] gmem_addr_1_reg_646;
wire   [0:0] icmp_ln80_fu_490_p2;
wire   [6:0] add_ln85_fu_515_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
reg    ap_block_state18_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln85_fu_521_p2;
wire   [2:0] select_ln85_1_fu_547_p3;
reg   [2:0] select_ln85_1_reg_661;
wire   [1:0] trunc_ln85_fu_555_p1;
reg   [1:0] trunc_ln85_reg_666;
wire   [4:0] add_ln86_fu_567_p2;
wire   [31:0] tmp_fu_573_p6;
reg   [31:0] tmp_reg_696;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter1;
reg   [3:0] data_in_local_0_address0;
reg    data_in_local_0_ce0;
reg    data_in_local_0_we0;
wire   [31:0] data_in_local_0_q0;
reg   [3:0] data_in_local_1_address0;
reg    data_in_local_1_ce0;
reg    data_in_local_1_we0;
wire   [31:0] data_in_local_1_q0;
reg   [3:0] data_in_local_2_address0;
reg    data_in_local_2_ce0;
reg    data_in_local_2_we0;
wire   [31:0] data_in_local_2_q0;
reg   [3:0] data_in_local_3_address0;
reg    data_in_local_3_ce0;
reg    data_in_local_3_we0;
wire   [31:0] data_in_local_3_q0;
reg   [4:0] data_out_local_0_address0;
reg    data_out_local_0_ce0;
reg    data_out_local_0_we0;
wire   [31:0] data_out_local_0_q0;
reg   [4:0] data_out_local_1_address0;
reg    data_out_local_1_ce0;
reg    data_out_local_1_we0;
wire   [31:0] data_out_local_1_q0;
reg   [4:0] data_out_local_2_address0;
reg    data_out_local_2_ce0;
reg    data_out_local_2_we0;
wire   [31:0] data_out_local_2_q0;
reg   [4:0] data_out_local_3_address0;
reg    data_out_local_3_ce0;
reg    data_out_local_3_we0;
wire   [31:0] data_out_local_3_q0;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_AWVALID;
wire   [63:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWADDR;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWID;
wire   [31:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWLEN;
wire   [2:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWSIZE;
wire   [1:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWBURST;
wire   [1:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWLOCK;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWCACHE;
wire   [2:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWPROT;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWQOS;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWREGION;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_AWUSER;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_WVALID;
wire   [31:0] grp_PE_dataflow_fu_390_m_axi_gmem_WDATA;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_WSTRB;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_WLAST;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_WID;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_WUSER;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID;
wire   [63:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARID;
wire   [31:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN;
wire   [2:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE;
wire   [1:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST;
wire   [1:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE;
wire   [2:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS;
wire   [3:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION;
wire   [0:0] grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_RREADY;
wire    grp_PE_dataflow_fu_390_m_axi_gmem_BREADY;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_0_address0;
wire    grp_PE_dataflow_fu_390_data_in_local_0_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_0_d0;
wire    grp_PE_dataflow_fu_390_data_in_local_0_we0;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_0_address1;
wire    grp_PE_dataflow_fu_390_data_in_local_0_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_0_d1;
wire    grp_PE_dataflow_fu_390_data_in_local_0_we1;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_1_address0;
wire    grp_PE_dataflow_fu_390_data_in_local_1_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_1_d0;
wire    grp_PE_dataflow_fu_390_data_in_local_1_we0;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_1_address1;
wire    grp_PE_dataflow_fu_390_data_in_local_1_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_1_d1;
wire    grp_PE_dataflow_fu_390_data_in_local_1_we1;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_2_address0;
wire    grp_PE_dataflow_fu_390_data_in_local_2_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_2_d0;
wire    grp_PE_dataflow_fu_390_data_in_local_2_we0;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_2_address1;
wire    grp_PE_dataflow_fu_390_data_in_local_2_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_2_d1;
wire    grp_PE_dataflow_fu_390_data_in_local_2_we1;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_3_address0;
wire    grp_PE_dataflow_fu_390_data_in_local_3_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_3_d0;
wire    grp_PE_dataflow_fu_390_data_in_local_3_we0;
wire   [3:0] grp_PE_dataflow_fu_390_data_in_local_3_address1;
wire    grp_PE_dataflow_fu_390_data_in_local_3_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_in_local_3_d1;
wire    grp_PE_dataflow_fu_390_data_in_local_3_we1;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_0_address0;
wire    grp_PE_dataflow_fu_390_data_out_local_0_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_0_d0;
wire    grp_PE_dataflow_fu_390_data_out_local_0_we0;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_0_address1;
wire    grp_PE_dataflow_fu_390_data_out_local_0_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_0_d1;
wire    grp_PE_dataflow_fu_390_data_out_local_0_we1;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_1_address0;
wire    grp_PE_dataflow_fu_390_data_out_local_1_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_1_d0;
wire    grp_PE_dataflow_fu_390_data_out_local_1_we0;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_1_address1;
wire    grp_PE_dataflow_fu_390_data_out_local_1_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_1_d1;
wire    grp_PE_dataflow_fu_390_data_out_local_1_we1;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_2_address0;
wire    grp_PE_dataflow_fu_390_data_out_local_2_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_2_d0;
wire    grp_PE_dataflow_fu_390_data_out_local_2_we0;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_2_address1;
wire    grp_PE_dataflow_fu_390_data_out_local_2_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_2_d1;
wire    grp_PE_dataflow_fu_390_data_out_local_2_we1;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_3_address0;
wire    grp_PE_dataflow_fu_390_data_out_local_3_ce0;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_3_d0;
wire    grp_PE_dataflow_fu_390_data_out_local_3_we0;
wire   [4:0] grp_PE_dataflow_fu_390_data_out_local_3_address1;
wire    grp_PE_dataflow_fu_390_data_out_local_3_ce1;
wire   [31:0] grp_PE_dataflow_fu_390_data_out_local_3_d1;
wire    grp_PE_dataflow_fu_390_data_out_local_3_we1;
wire    grp_PE_dataflow_fu_390_ap_start;
wire    grp_PE_dataflow_fu_390_ap_done;
wire    grp_PE_dataflow_fu_390_ap_ready;
wire    grp_PE_dataflow_fu_390_ap_idle;
reg    grp_PE_dataflow_fu_390_ap_continue;
reg   [2:0] ap_phi_mux_i_phi_fu_327_p4;
reg   [4:0] d_out_reg_345;
wire    ap_CS_fsm_state14;
wire    ap_sync_grp_PE_dataflow_fu_390_ap_ready;
wire    ap_sync_grp_PE_dataflow_fu_390_ap_done;
reg    ap_block_state14_on_subcall_done;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_phi_mux_i_1_phi_fu_372_p4;
reg    grp_PE_dataflow_fu_390_ap_start_reg;
reg    ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready;
reg    ap_sync_reg_grp_PE_dataflow_fu_390_ap_done;
wire   [63:0] j_cast_fu_477_p1;
wire   [63:0] j_1_cast_fu_559_p1;
wire  signed [63:0] sext_ln74_fu_417_p1;
wire  signed [63:0] sext_ln85_fu_505_p1;
wire    ap_block_pp1_stage0_01001;
wire   [61:0] trunc_ln_fu_407_p4;
wire   [0:0] icmp_ln75_fu_439_p2;
wire   [2:0] add_ln74_1_fu_453_p2;
wire   [61:0] trunc_ln1_fu_496_p4;
wire   [0:0] icmp_ln86_fu_527_p2;
wire   [2:0] add_ln85_1_fu_541_p2;
wire   [4:0] select_ln85_fu_533_p3;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_PE_dataflow_fu_390_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready = 1'b0;
#0 ap_sync_reg_grp_PE_dataflow_fu_390_ap_done = 1'b0;
end

top_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .weights(weights),
    .data_in(data_in),
    .data_out(data_out)
);

top_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(gmem_ARID),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(gmem_ARSIZE),
    .I_ARLOCK(gmem_ARLOCK),
    .I_ARCACHE(gmem_ARCACHE),
    .I_ARQOS(gmem_ARQOS),
    .I_ARPROT(gmem_ARPROT),
    .I_ARUSER(gmem_ARUSER),
    .I_ARBURST(gmem_ARBURST),
    .I_ARREGION(gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_646),
    .I_AWID(1'd0),
    .I_AWLEN(32'd80),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_reg_696),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

top_data_in_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
data_in_local_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_in_local_0_address0),
    .ce0(data_in_local_0_ce0),
    .we0(data_in_local_0_we0),
    .d0(gmem_addr_read_reg_630),
    .q0(data_in_local_0_q0)
);

top_data_in_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
data_in_local_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_in_local_1_address0),
    .ce0(data_in_local_1_ce0),
    .we0(data_in_local_1_we0),
    .d0(gmem_addr_read_reg_630),
    .q0(data_in_local_1_q0)
);

top_data_in_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
data_in_local_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_in_local_2_address0),
    .ce0(data_in_local_2_ce0),
    .we0(data_in_local_2_we0),
    .d0(gmem_addr_read_reg_630),
    .q0(data_in_local_2_q0)
);

top_data_in_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
data_in_local_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_in_local_3_address0),
    .ce0(data_in_local_3_ce0),
    .we0(data_in_local_3_we0),
    .d0(gmem_addr_read_reg_630),
    .q0(data_in_local_3_q0)
);

top_data_out_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
data_out_local_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_out_local_0_address0),
    .ce0(data_out_local_0_ce0),
    .we0(data_out_local_0_we0),
    .d0(grp_PE_dataflow_fu_390_data_out_local_0_d0),
    .q0(data_out_local_0_q0)
);

top_data_out_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
data_out_local_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_out_local_1_address0),
    .ce0(data_out_local_1_ce0),
    .we0(data_out_local_1_we0),
    .d0(grp_PE_dataflow_fu_390_data_out_local_1_d0),
    .q0(data_out_local_1_q0)
);

top_data_out_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
data_out_local_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_out_local_2_address0),
    .ce0(data_out_local_2_ce0),
    .we0(data_out_local_2_we0),
    .d0(grp_PE_dataflow_fu_390_data_out_local_2_d0),
    .q0(data_out_local_2_q0)
);

top_data_out_local_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
data_out_local_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_out_local_3_address0),
    .ce0(data_out_local_3_ce0),
    .we0(data_out_local_3_we0),
    .d0(grp_PE_dataflow_fu_390_data_out_local_3_d0),
    .q0(data_out_local_3_q0)
);

top_PE_dataflow grp_PE_dataflow_fu_390(
    .m_axi_gmem_AWVALID(grp_PE_dataflow_fu_390_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_PE_dataflow_fu_390_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_PE_dataflow_fu_390_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_PE_dataflow_fu_390_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_PE_dataflow_fu_390_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_PE_dataflow_fu_390_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_PE_dataflow_fu_390_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_PE_dataflow_fu_390_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_PE_dataflow_fu_390_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_PE_dataflow_fu_390_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_PE_dataflow_fu_390_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_PE_dataflow_fu_390_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_PE_dataflow_fu_390_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_PE_dataflow_fu_390_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_PE_dataflow_fu_390_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_PE_dataflow_fu_390_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_PE_dataflow_fu_390_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_PE_dataflow_fu_390_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_PE_dataflow_fu_390_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_PE_dataflow_fu_390_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(gmem_RLAST),
    .m_axi_gmem_RID(gmem_RID),
    .m_axi_gmem_RUSER(gmem_RUSER),
    .m_axi_gmem_RRESP(gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_PE_dataflow_fu_390_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .weights(weights_read_reg_591),
    .data_in_local_0_address0(grp_PE_dataflow_fu_390_data_in_local_0_address0),
    .data_in_local_0_ce0(grp_PE_dataflow_fu_390_data_in_local_0_ce0),
    .data_in_local_0_d0(grp_PE_dataflow_fu_390_data_in_local_0_d0),
    .data_in_local_0_q0(data_in_local_0_q0),
    .data_in_local_0_we0(grp_PE_dataflow_fu_390_data_in_local_0_we0),
    .data_in_local_0_address1(grp_PE_dataflow_fu_390_data_in_local_0_address1),
    .data_in_local_0_ce1(grp_PE_dataflow_fu_390_data_in_local_0_ce1),
    .data_in_local_0_d1(grp_PE_dataflow_fu_390_data_in_local_0_d1),
    .data_in_local_0_q1(32'd0),
    .data_in_local_0_we1(grp_PE_dataflow_fu_390_data_in_local_0_we1),
    .data_in_local_1_address0(grp_PE_dataflow_fu_390_data_in_local_1_address0),
    .data_in_local_1_ce0(grp_PE_dataflow_fu_390_data_in_local_1_ce0),
    .data_in_local_1_d0(grp_PE_dataflow_fu_390_data_in_local_1_d0),
    .data_in_local_1_q0(data_in_local_1_q0),
    .data_in_local_1_we0(grp_PE_dataflow_fu_390_data_in_local_1_we0),
    .data_in_local_1_address1(grp_PE_dataflow_fu_390_data_in_local_1_address1),
    .data_in_local_1_ce1(grp_PE_dataflow_fu_390_data_in_local_1_ce1),
    .data_in_local_1_d1(grp_PE_dataflow_fu_390_data_in_local_1_d1),
    .data_in_local_1_q1(32'd0),
    .data_in_local_1_we1(grp_PE_dataflow_fu_390_data_in_local_1_we1),
    .data_in_local_2_address0(grp_PE_dataflow_fu_390_data_in_local_2_address0),
    .data_in_local_2_ce0(grp_PE_dataflow_fu_390_data_in_local_2_ce0),
    .data_in_local_2_d0(grp_PE_dataflow_fu_390_data_in_local_2_d0),
    .data_in_local_2_q0(data_in_local_2_q0),
    .data_in_local_2_we0(grp_PE_dataflow_fu_390_data_in_local_2_we0),
    .data_in_local_2_address1(grp_PE_dataflow_fu_390_data_in_local_2_address1),
    .data_in_local_2_ce1(grp_PE_dataflow_fu_390_data_in_local_2_ce1),
    .data_in_local_2_d1(grp_PE_dataflow_fu_390_data_in_local_2_d1),
    .data_in_local_2_q1(32'd0),
    .data_in_local_2_we1(grp_PE_dataflow_fu_390_data_in_local_2_we1),
    .data_in_local_3_address0(grp_PE_dataflow_fu_390_data_in_local_3_address0),
    .data_in_local_3_ce0(grp_PE_dataflow_fu_390_data_in_local_3_ce0),
    .data_in_local_3_d0(grp_PE_dataflow_fu_390_data_in_local_3_d0),
    .data_in_local_3_q0(data_in_local_3_q0),
    .data_in_local_3_we0(grp_PE_dataflow_fu_390_data_in_local_3_we0),
    .data_in_local_3_address1(grp_PE_dataflow_fu_390_data_in_local_3_address1),
    .data_in_local_3_ce1(grp_PE_dataflow_fu_390_data_in_local_3_ce1),
    .data_in_local_3_d1(grp_PE_dataflow_fu_390_data_in_local_3_d1),
    .data_in_local_3_q1(32'd0),
    .data_in_local_3_we1(grp_PE_dataflow_fu_390_data_in_local_3_we1),
    .data_out_local_0_address0(grp_PE_dataflow_fu_390_data_out_local_0_address0),
    .data_out_local_0_ce0(grp_PE_dataflow_fu_390_data_out_local_0_ce0),
    .data_out_local_0_d0(grp_PE_dataflow_fu_390_data_out_local_0_d0),
    .data_out_local_0_q0(32'd0),
    .data_out_local_0_we0(grp_PE_dataflow_fu_390_data_out_local_0_we0),
    .data_out_local_0_address1(grp_PE_dataflow_fu_390_data_out_local_0_address1),
    .data_out_local_0_ce1(grp_PE_dataflow_fu_390_data_out_local_0_ce1),
    .data_out_local_0_d1(grp_PE_dataflow_fu_390_data_out_local_0_d1),
    .data_out_local_0_q1(32'd0),
    .data_out_local_0_we1(grp_PE_dataflow_fu_390_data_out_local_0_we1),
    .data_out_local_1_address0(grp_PE_dataflow_fu_390_data_out_local_1_address0),
    .data_out_local_1_ce0(grp_PE_dataflow_fu_390_data_out_local_1_ce0),
    .data_out_local_1_d0(grp_PE_dataflow_fu_390_data_out_local_1_d0),
    .data_out_local_1_q0(32'd0),
    .data_out_local_1_we0(grp_PE_dataflow_fu_390_data_out_local_1_we0),
    .data_out_local_1_address1(grp_PE_dataflow_fu_390_data_out_local_1_address1),
    .data_out_local_1_ce1(grp_PE_dataflow_fu_390_data_out_local_1_ce1),
    .data_out_local_1_d1(grp_PE_dataflow_fu_390_data_out_local_1_d1),
    .data_out_local_1_q1(32'd0),
    .data_out_local_1_we1(grp_PE_dataflow_fu_390_data_out_local_1_we1),
    .data_out_local_2_address0(grp_PE_dataflow_fu_390_data_out_local_2_address0),
    .data_out_local_2_ce0(grp_PE_dataflow_fu_390_data_out_local_2_ce0),
    .data_out_local_2_d0(grp_PE_dataflow_fu_390_data_out_local_2_d0),
    .data_out_local_2_q0(32'd0),
    .data_out_local_2_we0(grp_PE_dataflow_fu_390_data_out_local_2_we0),
    .data_out_local_2_address1(grp_PE_dataflow_fu_390_data_out_local_2_address1),
    .data_out_local_2_ce1(grp_PE_dataflow_fu_390_data_out_local_2_ce1),
    .data_out_local_2_d1(grp_PE_dataflow_fu_390_data_out_local_2_d1),
    .data_out_local_2_q1(32'd0),
    .data_out_local_2_we1(grp_PE_dataflow_fu_390_data_out_local_2_we1),
    .data_out_local_3_address0(grp_PE_dataflow_fu_390_data_out_local_3_address0),
    .data_out_local_3_ce0(grp_PE_dataflow_fu_390_data_out_local_3_ce0),
    .data_out_local_3_d0(grp_PE_dataflow_fu_390_data_out_local_3_d0),
    .data_out_local_3_q0(32'd0),
    .data_out_local_3_we0(grp_PE_dataflow_fu_390_data_out_local_3_we0),
    .data_out_local_3_address1(grp_PE_dataflow_fu_390_data_out_local_3_address1),
    .data_out_local_3_ce1(grp_PE_dataflow_fu_390_data_out_local_3_ce1),
    .data_out_local_3_d1(grp_PE_dataflow_fu_390_data_out_local_3_d1),
    .data_out_local_3_q1(32'd0),
    .data_out_local_3_we1(grp_PE_dataflow_fu_390_data_out_local_3_we1),
    .d_out(d_out_reg_345),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .weights_ap_vld(1'b1),
    .d_out_ap_vld(1'b1),
    .ap_start(grp_PE_dataflow_fu_390_ap_start),
    .ap_done(grp_PE_dataflow_fu_390_ap_done),
    .ap_ready(grp_PE_dataflow_fu_390_ap_ready),
    .ap_idle(grp_PE_dataflow_fu_390_ap_idle),
    .ap_continue(grp_PE_dataflow_fu_390_ap_continue)
);

top_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U52(
    .din0(data_out_local_0_q0),
    .din1(data_out_local_1_q0),
    .din2(data_out_local_2_q0),
    .din3(data_out_local_3_q0),
    .din4(trunc_ln85_reg_666),
    .dout(tmp_fu_573_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
            ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= 1'b0;
        end else if ((grp_PE_dataflow_fu_390_ap_done == 1'b1)) begin
            ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
            ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= 1'b0;
        end else if ((grp_PE_dataflow_fu_390_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_PE_dataflow_fu_390_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_PE_dataflow_fu_390_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
            grp_PE_dataflow_fu_390_ap_start_reg <= 1'b1;
        end else if ((grp_PE_dataflow_fu_390_ap_ready == 1'b1)) begin
            grp_PE_dataflow_fu_390_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        d_out_reg_345 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
        d_out_reg_345 <= d_out_1_reg_638;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_657 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_368 <= select_ln85_1_reg_661;
    end else if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
        i_1_reg_368 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln74_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_323 <= select_ln74_1_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_323 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_521_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten7_reg_357 <= add_ln85_fu_515_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
        indvar_flatten7_reg_357 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_433_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_312 <= add_ln74_fu_427_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_312 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_521_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_1_reg_379 <= add_ln86_fu_567_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
        j_1_reg_379 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_433_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_334 <= add_ln75_fu_471_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        d_out_1_reg_638 <= d_out_1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_out_read_reg_586 <= data_out;
        gmem_addr_reg_596 <= sext_ln74_fu_417_p1;
        weights_read_reg_591 <= weights;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_490_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_addr_1_reg_646 <= sext_ln85_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln74_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_630 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln74_reg_607 <= icmp_ln74_fu_433_p2;
        select_ln74_reg_611_pp0_iter1_reg <= select_ln74_reg_611;
        trunc_ln74_reg_621_pp0_iter1_reg <= trunc_ln74_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln85_reg_657 <= icmp_ln85_fu_521_p2;
        icmp_ln85_reg_657_pp1_iter1_reg <= icmp_ln85_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_433_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln74_1_reg_616 <= select_ln74_1_fu_459_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln74_reg_611 <= select_ln74_fu_445_p3;
        trunc_ln74_reg_621 <= trunc_ln74_fu_467_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_521_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln85_1_reg_661 <= select_ln85_1_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_657 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_reg_696 <= tmp_fu_573_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln85_reg_666 <= trunc_ln85_fu_555_p1;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_433_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln85_fu_521_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_657 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_372_p4 = select_ln85_1_reg_661;
    end else begin
        ap_phi_mux_i_1_phi_fu_372_p4 = i_1_reg_368;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln74_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_327_p4 = select_ln74_1_reg_616;
    end else begin
        ap_phi_mux_i_phi_fu_327_p4 = i_reg_323;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_in_local_0_address0 = j_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_0_address0 = grp_PE_dataflow_fu_390_data_in_local_0_address0;
    end else begin
        data_in_local_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_0_ce0 = grp_PE_dataflow_fu_390_data_in_local_0_ce0;
    end else begin
        data_in_local_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln74_reg_621_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_0_we0 = 1'b1;
    end else begin
        data_in_local_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_in_local_1_address0 = j_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_1_address0 = grp_PE_dataflow_fu_390_data_in_local_1_address0;
    end else begin
        data_in_local_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_1_ce0 = grp_PE_dataflow_fu_390_data_in_local_1_ce0;
    end else begin
        data_in_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln74_reg_621_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_1_we0 = 1'b1;
    end else begin
        data_in_local_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_in_local_2_address0 = j_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_2_address0 = grp_PE_dataflow_fu_390_data_in_local_2_address0;
    end else begin
        data_in_local_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_2_ce0 = grp_PE_dataflow_fu_390_data_in_local_2_ce0;
    end else begin
        data_in_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln74_reg_621_pp0_iter1_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_2_we0 = 1'b1;
    end else begin
        data_in_local_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_in_local_3_address0 = j_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_3_address0 = grp_PE_dataflow_fu_390_data_in_local_3_address0;
    end else begin
        data_in_local_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_in_local_3_ce0 = grp_PE_dataflow_fu_390_data_in_local_3_ce0;
    end else begin
        data_in_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln74_reg_621_pp0_iter1_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_in_local_3_we0 = 1'b1;
    end else begin
        data_in_local_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        data_out_local_0_address0 = j_1_cast_fu_559_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_0_address0 = grp_PE_dataflow_fu_390_data_out_local_0_address0;
    end else begin
        data_out_local_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        data_out_local_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_0_ce0 = grp_PE_dataflow_fu_390_data_out_local_0_ce0;
    end else begin
        data_out_local_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_0_we0 = grp_PE_dataflow_fu_390_data_out_local_0_we0;
    end else begin
        data_out_local_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        data_out_local_1_address0 = j_1_cast_fu_559_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_1_address0 = grp_PE_dataflow_fu_390_data_out_local_1_address0;
    end else begin
        data_out_local_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        data_out_local_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_1_ce0 = grp_PE_dataflow_fu_390_data_out_local_1_ce0;
    end else begin
        data_out_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_1_we0 = grp_PE_dataflow_fu_390_data_out_local_1_we0;
    end else begin
        data_out_local_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        data_out_local_2_address0 = j_1_cast_fu_559_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_2_address0 = grp_PE_dataflow_fu_390_data_out_local_2_address0;
    end else begin
        data_out_local_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        data_out_local_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_2_ce0 = grp_PE_dataflow_fu_390_data_out_local_2_ce0;
    end else begin
        data_out_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_2_we0 = grp_PE_dataflow_fu_390_data_out_local_2_we0;
    end else begin
        data_out_local_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        data_out_local_3_address0 = j_1_cast_fu_559_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_3_address0 = grp_PE_dataflow_fu_390_data_out_local_3_address0;
    end else begin
        data_out_local_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        data_out_local_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_3_ce0 = grp_PE_dataflow_fu_390_data_out_local_3_ce0;
    end else begin
        data_out_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_out_local_3_we0 = grp_PE_dataflow_fu_390_data_out_local_3_we0;
    end else begin
        data_out_local_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = gmem_addr_reg_596;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARADDR = grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARBURST = grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST;
    end else begin
        gmem_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARCACHE = grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE;
    end else begin
        gmem_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARID = grp_PE_dataflow_fu_390_m_axi_gmem_ARID;
    end else begin
        gmem_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = 32'd40;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARLEN = grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARLOCK = grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK;
    end else begin
        gmem_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARPROT = grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT;
    end else begin
        gmem_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARQOS = grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS;
    end else begin
        gmem_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARREGION = grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION;
    end else begin
        gmem_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARSIZE = grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE;
    end else begin
        gmem_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARUSER = grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER;
    end else begin
        gmem_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARVALID = grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln74_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | ((icmp_ln80_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_RREADY = grp_PE_dataflow_fu_390_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_657_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln74_reg_607 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_657_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
        grp_PE_dataflow_fu_390_ap_continue = 1'b1;
    end else begin
        grp_PE_dataflow_fu_390_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln74_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln74_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln80_fu_490_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_block_state14_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln85_fu_521_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln85_fu_521_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln74_1_fu_453_p2 = (ap_phi_mux_i_phi_fu_327_p4 + 3'd1);

assign add_ln74_fu_427_p2 = (indvar_flatten_reg_312 + 6'd1);

assign add_ln75_fu_471_p2 = (select_ln74_fu_445_p3 + 4'd1);

assign add_ln85_1_fu_541_p2 = (ap_phi_mux_i_1_phi_fu_372_p4 + 3'd1);

assign add_ln85_fu_515_p2 = (indvar_flatten7_reg_357 + 7'd1);

assign add_ln86_fu_567_p2 = (select_ln85_fu_533_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln74_reg_607 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln74_reg_607 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln74_reg_607 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_on_subcall_done = ((ap_sync_grp_PE_dataflow_fu_390_ap_ready & ap_sync_grp_PE_dataflow_fu_390_ap_done) == 1'b0);
end

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((gmem_WREADY == 1'b0) & (icmp_ln85_reg_657_pp1_iter1_reg == 1'd0));
end

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_PE_dataflow_fu_390_ap_done = (grp_PE_dataflow_fu_390_ap_done | ap_sync_reg_grp_PE_dataflow_fu_390_ap_done);

assign ap_sync_grp_PE_dataflow_fu_390_ap_ready = (grp_PE_dataflow_fu_390_ap_ready | ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready);

assign d_out_1_fu_484_p2 = (d_out_reg_345 + 5'd1);

assign grp_PE_dataflow_fu_390_ap_start = grp_PE_dataflow_fu_390_ap_start_reg;

assign icmp_ln74_fu_433_p2 = ((indvar_flatten_reg_312 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_439_p2 = ((j_reg_334 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_490_p2 = ((d_out_reg_345 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_521_p2 = ((indvar_flatten7_reg_357 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_527_p2 = ((j_1_reg_379 == 5'd20) ? 1'b1 : 1'b0);

assign j_1_cast_fu_559_p1 = select_ln85_fu_533_p3;

assign j_cast_fu_477_p1 = select_ln74_reg_611_pp0_iter1_reg;

assign select_ln74_1_fu_459_p3 = ((icmp_ln75_fu_439_p2[0:0] == 1'b1) ? add_ln74_1_fu_453_p2 : ap_phi_mux_i_phi_fu_327_p4);

assign select_ln74_fu_445_p3 = ((icmp_ln75_fu_439_p2[0:0] == 1'b1) ? 4'd0 : j_reg_334);

assign select_ln85_1_fu_547_p3 = ((icmp_ln86_fu_527_p2[0:0] == 1'b1) ? add_ln85_1_fu_541_p2 : ap_phi_mux_i_1_phi_fu_372_p4);

assign select_ln85_fu_533_p3 = ((icmp_ln86_fu_527_p2[0:0] == 1'b1) ? 5'd0 : j_1_reg_379);

assign sext_ln74_fu_417_p1 = $signed(trunc_ln_fu_407_p4);

assign sext_ln85_fu_505_p1 = $signed(trunc_ln1_fu_496_p4);

assign trunc_ln1_fu_496_p4 = {{data_out_read_reg_586[63:2]}};

assign trunc_ln74_fu_467_p1 = select_ln74_1_fu_459_p3[1:0];

assign trunc_ln85_fu_555_p1 = select_ln85_1_fu_547_p3[1:0];

assign trunc_ln_fu_407_p4 = {{data_in[63:2]}};

endmodule //top
