// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_PE12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weights_in_V1_dout,
        weights_in_V1_empty_n,
        weights_in_V1_read,
        weights_out_V5_din,
        weights_out_V5_full_n,
        weights_out_V5_write,
        data_in8_address0,
        data_in8_ce0,
        data_in8_q0,
        data_out_local11_address0,
        data_out_local11_ce0,
        data_out_local11_we0,
        data_out_local11_d0,
        d_out_dout,
        d_out_empty_n,
        d_out_read,
        d_out_out_din,
        d_out_out_full_n,
        d_out_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] weights_in_V1_dout;
input   weights_in_V1_empty_n;
output   weights_in_V1_read;
output  [31:0] weights_out_V5_din;
input   weights_out_V5_full_n;
output   weights_out_V5_write;
output  [3:0] data_in8_address0;
output   data_in8_ce0;
input  [31:0] data_in8_q0;
output  [4:0] data_out_local11_address0;
output   data_out_local11_ce0;
output   data_out_local11_we0;
output  [31:0] data_out_local11_d0;
input  [4:0] d_out_dout;
input   d_out_empty_n;
output   d_out_read;
output  [4:0] d_out_out_din;
input   d_out_out_full_n;
output   d_out_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_in_V1_read;
reg weights_out_V5_write;
reg data_in8_ce0;
reg data_out_local11_ce0;
reg data_out_local11_we0;
reg d_out_read;
reg d_out_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_in_V1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln18_reg_177;
reg    weights_out_V5_blk_n;
reg    d_out_blk_n;
reg    d_out_out_blk_n;
reg   [3:0] i_reg_109;
reg   [31:0] add2_i_reg_120;
reg   [4:0] data_out_local11_addr_reg_167;
wire   [3:0] add_ln18_fu_138_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln18_fu_144_p2;
wire   [31:0] add_ln21_fu_161_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln17_fu_133_p1;
wire   [63:0] zext_ln18_fu_150_p1;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
wire   [31:0] mul_ln21_fu_155_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(data_in8_q0),
    .din1(weights_in_V1_dout),
    .dout(mul_ln21_fu_155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add2_i_reg_120 <= add_ln21_fu_161_p2;
    end else if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add2_i_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_fu_144_p2 == 1'd0))) begin
        i_reg_109 <= add_ln18_fu_138_p2;
    end else if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_109 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_out_local11_addr_reg_167 <= zext_ln17_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_177 <= icmp_ln18_fu_144_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_out_blk_n = d_out_empty_n;
    end else begin
        d_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_out_out_blk_n = d_out_out_full_n;
    end else begin
        d_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_out_out_write = 1'b1;
    end else begin
        d_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_out_read = 1'b1;
    end else begin
        d_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in8_ce0 = 1'b1;
    end else begin
        data_in8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_out_local11_ce0 = 1'b1;
    end else begin
        data_out_local11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_out_local11_we0 = 1'b1;
    end else begin
        data_out_local11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_in_V1_blk_n = weights_in_V1_empty_n;
    end else begin
        weights_in_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_in_V1_read = 1'b1;
    end else begin
        weights_in_V1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_out_V5_blk_n = weights_out_V5_full_n;
    end else begin
        weights_out_V5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_177 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_out_V5_write = 1'b1;
    end else begin
        weights_out_V5_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_144_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_144_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_138_p2 = (i_reg_109 + 4'd1);

assign add_ln21_fu_161_p2 = (mul_ln21_fu_155_p2 + add2_i_reg_120);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln18_reg_177 == 1'd0) & (weights_out_V5_full_n == 1'b0)) | ((icmp_ln18_reg_177 == 1'd0) & (weights_in_V1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln18_reg_177 == 1'd0) & (weights_out_V5_full_n == 1'b0)) | ((icmp_ln18_reg_177 == 1'd0) & (weights_in_V1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln18_reg_177 == 1'd0) & (weights_out_V5_full_n == 1'b0)) | ((icmp_ln18_reg_177 == 1'd0) & (weights_in_V1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (d_out_out_full_n == 1'b0) | (d_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln18_reg_177 == 1'd0) & (weights_out_V5_full_n == 1'b0)) | ((icmp_ln18_reg_177 == 1'd0) & (weights_in_V1_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_out_out_din = d_out_dout;

assign data_in8_address0 = zext_ln18_fu_150_p1;

assign data_out_local11_address0 = data_out_local11_addr_reg_167;

assign data_out_local11_d0 = add2_i_reg_120;

assign icmp_ln18_fu_144_p2 = ((i_reg_109 == 4'd10) ? 1'b1 : 1'b0);

assign weights_out_V5_din = weights_in_V1_dout;

assign zext_ln17_fu_133_p1 = d_out_dout;

assign zext_ln18_fu_150_p1 = i_reg_109;

endmodule //top_PE12
