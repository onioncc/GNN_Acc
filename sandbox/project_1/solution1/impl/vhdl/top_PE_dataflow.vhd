-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_PE_dataflow is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_local_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_0_ce0 : OUT STD_LOGIC;
    data_in_local_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_0_we0 : OUT STD_LOGIC;
    data_in_local_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_0_ce1 : OUT STD_LOGIC;
    data_in_local_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_0_we1 : OUT STD_LOGIC;
    data_in_local_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_1_ce0 : OUT STD_LOGIC;
    data_in_local_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_1_we0 : OUT STD_LOGIC;
    data_in_local_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_1_ce1 : OUT STD_LOGIC;
    data_in_local_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_1_we1 : OUT STD_LOGIC;
    data_in_local_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_2_ce0 : OUT STD_LOGIC;
    data_in_local_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_2_we0 : OUT STD_LOGIC;
    data_in_local_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_2_ce1 : OUT STD_LOGIC;
    data_in_local_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_2_we1 : OUT STD_LOGIC;
    data_in_local_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_3_ce0 : OUT STD_LOGIC;
    data_in_local_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_3_we0 : OUT STD_LOGIC;
    data_in_local_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_in_local_3_ce1 : OUT STD_LOGIC;
    data_in_local_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_local_3_we1 : OUT STD_LOGIC;
    data_out_local_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_0_ce0 : OUT STD_LOGIC;
    data_out_local_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_0_we0 : OUT STD_LOGIC;
    data_out_local_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_0_ce1 : OUT STD_LOGIC;
    data_out_local_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_0_we1 : OUT STD_LOGIC;
    data_out_local_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_1_ce0 : OUT STD_LOGIC;
    data_out_local_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_1_we0 : OUT STD_LOGIC;
    data_out_local_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_1_ce1 : OUT STD_LOGIC;
    data_out_local_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_1_we1 : OUT STD_LOGIC;
    data_out_local_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_2_ce0 : OUT STD_LOGIC;
    data_out_local_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_2_we0 : OUT STD_LOGIC;
    data_out_local_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_2_ce1 : OUT STD_LOGIC;
    data_out_local_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_2_we1 : OUT STD_LOGIC;
    data_out_local_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_3_ce0 : OUT STD_LOGIC;
    data_out_local_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_3_we0 : OUT STD_LOGIC;
    data_out_local_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_local_3_ce1 : OUT STD_LOGIC;
    data_out_local_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_local_3_we1 : OUT STD_LOGIC;
    d_out : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    weights_ap_vld : IN STD_LOGIC;
    d_out_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of top_PE_dataflow is 
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal load_weight_U0_ap_start : STD_LOGIC;
    signal load_weight_U0_ap_done : STD_LOGIC;
    signal load_weight_U0_ap_continue : STD_LOGIC;
    signal load_weight_U0_ap_idle : STD_LOGIC;
    signal load_weight_U0_ap_ready : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_weight_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_weight_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_weight_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_weight_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_weight_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_weight_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load_weight_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_weight_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_weight_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_weight_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_weight_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_weight_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_weight_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_weight_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_weight_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal load_weight_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal load_weight_U0_weight_buf_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_weight_U0_weight_buf_write : STD_LOGIC;
    signal load_weight_U0_d_out_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal load_weight_U0_d_out_out_write : STD_LOGIC;
    signal PE_110_U0_ap_start : STD_LOGIC;
    signal PE_110_U0_ap_done : STD_LOGIC;
    signal PE_110_U0_ap_continue : STD_LOGIC;
    signal PE_110_U0_ap_idle : STD_LOGIC;
    signal PE_110_U0_ap_ready : STD_LOGIC;
    signal PE_110_U0_weights_in_read : STD_LOGIC;
    signal PE_110_U0_weights_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_110_U0_weights_out_V_write : STD_LOGIC;
    signal PE_110_U0_data_in_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal PE_110_U0_data_in_0_ce0 : STD_LOGIC;
    signal PE_110_U0_data_out_local_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal PE_110_U0_data_out_local_0_ce0 : STD_LOGIC;
    signal PE_110_U0_data_out_local_0_we0 : STD_LOGIC;
    signal PE_110_U0_data_out_local_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal PE_110_U0_d_out_read : STD_LOGIC;
    signal PE_110_U0_d_out_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal PE_110_U0_d_out_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal PE11_U0_ap_start : STD_LOGIC;
    signal PE11_U0_ap_done : STD_LOGIC;
    signal PE11_U0_ap_continue : STD_LOGIC;
    signal PE11_U0_ap_idle : STD_LOGIC;
    signal PE11_U0_ap_ready : STD_LOGIC;
    signal PE11_U0_weights_in_V_read : STD_LOGIC;
    signal PE11_U0_weights_out_V4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE11_U0_weights_out_V4_write : STD_LOGIC;
    signal PE11_U0_data_in7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal PE11_U0_data_in7_ce0 : STD_LOGIC;
    signal PE11_U0_data_out_local10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal PE11_U0_data_out_local10_ce0 : STD_LOGIC;
    signal PE11_U0_data_out_local10_we0 : STD_LOGIC;
    signal PE11_U0_data_out_local10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal PE11_U0_d_out_read : STD_LOGIC;
    signal PE11_U0_d_out_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal PE11_U0_d_out_out_write : STD_LOGIC;
    signal PE12_U0_ap_start : STD_LOGIC;
    signal PE12_U0_ap_done : STD_LOGIC;
    signal PE12_U0_ap_continue : STD_LOGIC;
    signal PE12_U0_ap_idle : STD_LOGIC;
    signal PE12_U0_ap_ready : STD_LOGIC;
    signal PE12_U0_weights_in_V1_read : STD_LOGIC;
    signal PE12_U0_weights_out_V5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal PE12_U0_weights_out_V5_write : STD_LOGIC;
    signal PE12_U0_data_in8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal PE12_U0_data_in8_ce0 : STD_LOGIC;
    signal PE12_U0_data_out_local11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal PE12_U0_data_out_local11_ce0 : STD_LOGIC;
    signal PE12_U0_data_out_local11_we0 : STD_LOGIC;
    signal PE12_U0_data_out_local11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal PE12_U0_d_out_read : STD_LOGIC;
    signal PE12_U0_d_out_out_din : STD_LOGIC_VECTOR (4 downto 0);
    signal PE12_U0_d_out_out_write : STD_LOGIC;
    signal PE13_U0_ap_start : STD_LOGIC;
    signal PE13_U0_ap_done : STD_LOGIC;
    signal PE13_U0_ap_continue : STD_LOGIC;
    signal PE13_U0_ap_idle : STD_LOGIC;
    signal PE13_U0_ap_ready : STD_LOGIC;
    signal PE13_U0_weights_in_V2_read : STD_LOGIC;
    signal PE13_U0_data_in9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal PE13_U0_data_in9_ce0 : STD_LOGIC;
    signal PE13_U0_data_out_local12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal PE13_U0_data_out_local12_ce0 : STD_LOGIC;
    signal PE13_U0_data_out_local12_we0 : STD_LOGIC;
    signal PE13_U0_data_out_local12_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal PE13_U0_d_out_read : STD_LOGIC;
    signal weight_buf_full_n : STD_LOGIC;
    signal weight_buf_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buf_empty_n : STD_LOGIC;
    signal d_out_c_full_n : STD_LOGIC;
    signal d_out_c_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal d_out_c_empty_n : STD_LOGIC;
    signal weights_stream_0_V_full_n : STD_LOGIC;
    signal weights_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_0_V_empty_n : STD_LOGIC;
    signal d_out_c13_full_n : STD_LOGIC;
    signal d_out_c13_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal d_out_c13_empty_n : STD_LOGIC;
    signal weights_stream_1_V_full_n : STD_LOGIC;
    signal weights_stream_1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_1_V_empty_n : STD_LOGIC;
    signal d_out_c14_full_n : STD_LOGIC;
    signal d_out_c14_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal d_out_c14_empty_n : STD_LOGIC;
    signal weights_stream_2_V_full_n : STD_LOGIC;
    signal weights_stream_2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_2_V_empty_n : STD_LOGIC;
    signal d_out_c15_full_n : STD_LOGIC;
    signal d_out_c15_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal d_out_c15_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_load_weight_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_weight_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_PE_110_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_PE_110_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_PE11_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_PE11_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_PE12_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_PE12_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_PE13_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_PE13_U0_ap_ready : STD_LOGIC;
    signal load_weight_U0_start_full_n : STD_LOGIC;
    signal load_weight_U0_start_write : STD_LOGIC;
    signal PE_110_U0_start_full_n : STD_LOGIC;
    signal PE_110_U0_start_write : STD_LOGIC;
    signal PE11_U0_start_full_n : STD_LOGIC;
    signal PE11_U0_start_write : STD_LOGIC;
    signal PE12_U0_start_full_n : STD_LOGIC;
    signal PE12_U0_start_write : STD_LOGIC;
    signal PE13_U0_start_full_n : STD_LOGIC;
    signal PE13_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_load_weight IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight_buf_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_buf_full_n : IN STD_LOGIC;
        weight_buf_write : OUT STD_LOGIC;
        weights : IN STD_LOGIC_VECTOR (63 downto 0);
        d_out : IN STD_LOGIC_VECTOR (4 downto 0);
        d_out_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        d_out_out_full_n : IN STD_LOGIC;
        d_out_out_write : OUT STD_LOGIC );
    end component;


    component top_PE_110 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_in_empty_n : IN STD_LOGIC;
        weights_in_read : OUT STD_LOGIC;
        weights_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_out_V_full_n : IN STD_LOGIC;
        weights_out_V_write : OUT STD_LOGIC;
        data_in_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_0_ce0 : OUT STD_LOGIC;
        data_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_0_ce0 : OUT STD_LOGIC;
        data_out_local_0_we0 : OUT STD_LOGIC;
        data_out_local_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_out_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        d_out_empty_n : IN STD_LOGIC;
        d_out_read : OUT STD_LOGIC;
        d_out_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        d_out_out_full_n : IN STD_LOGIC;
        d_out_out_write : OUT STD_LOGIC );
    end component;


    component top_PE11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_in_V_empty_n : IN STD_LOGIC;
        weights_in_V_read : OUT STD_LOGIC;
        weights_out_V4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_out_V4_full_n : IN STD_LOGIC;
        weights_out_V4_write : OUT STD_LOGIC;
        data_in7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in7_ce0 : OUT STD_LOGIC;
        data_in7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local10_ce0 : OUT STD_LOGIC;
        data_out_local10_we0 : OUT STD_LOGIC;
        data_out_local10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_out_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        d_out_empty_n : IN STD_LOGIC;
        d_out_read : OUT STD_LOGIC;
        d_out_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        d_out_out_full_n : IN STD_LOGIC;
        d_out_out_write : OUT STD_LOGIC );
    end component;


    component top_PE12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights_in_V1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_in_V1_empty_n : IN STD_LOGIC;
        weights_in_V1_read : OUT STD_LOGIC;
        weights_out_V5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_out_V5_full_n : IN STD_LOGIC;
        weights_out_V5_write : OUT STD_LOGIC;
        data_in8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in8_ce0 : OUT STD_LOGIC;
        data_in8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local11_ce0 : OUT STD_LOGIC;
        data_out_local11_we0 : OUT STD_LOGIC;
        data_out_local11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_out_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        d_out_empty_n : IN STD_LOGIC;
        d_out_read : OUT STD_LOGIC;
        d_out_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        d_out_out_full_n : IN STD_LOGIC;
        d_out_out_write : OUT STD_LOGIC );
    end component;


    component top_PE13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights_in_V2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_in_V2_empty_n : IN STD_LOGIC;
        weights_in_V2_read : OUT STD_LOGIC;
        data_in9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in9_ce0 : OUT STD_LOGIC;
        data_in9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local12_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local12_ce0 : OUT STD_LOGIC;
        data_out_local12_we0 : OUT STD_LOGIC;
        data_out_local12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_out_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        d_out_empty_n : IN STD_LOGIC;
        d_out_read : OUT STD_LOGIC );
    end component;


    component top_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_fifo_w5_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    load_weight_U0 : component top_load_weight
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_weight_U0_ap_start,
        ap_done => load_weight_U0_ap_done,
        ap_continue => load_weight_U0_ap_continue,
        ap_idle => load_weight_U0_ap_idle,
        ap_ready => load_weight_U0_ap_ready,
        m_axi_gmem_AWVALID => load_weight_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => load_weight_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => load_weight_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => load_weight_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => load_weight_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => load_weight_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => load_weight_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => load_weight_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => load_weight_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => load_weight_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => load_weight_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => load_weight_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => load_weight_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => load_weight_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => load_weight_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => load_weight_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => load_weight_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => load_weight_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => load_weight_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => load_weight_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => load_weight_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => load_weight_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => load_weight_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => load_weight_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => load_weight_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => load_weight_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => load_weight_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => load_weight_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => load_weight_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => load_weight_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => load_weight_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => load_weight_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        weight_buf_din => load_weight_U0_weight_buf_din,
        weight_buf_full_n => weight_buf_full_n,
        weight_buf_write => load_weight_U0_weight_buf_write,
        weights => weights,
        d_out => d_out,
        d_out_out_din => load_weight_U0_d_out_out_din,
        d_out_out_full_n => d_out_c_full_n,
        d_out_out_write => load_weight_U0_d_out_out_write);

    PE_110_U0 : component top_PE_110
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => PE_110_U0_ap_start,
        ap_done => PE_110_U0_ap_done,
        ap_continue => PE_110_U0_ap_continue,
        ap_idle => PE_110_U0_ap_idle,
        ap_ready => PE_110_U0_ap_ready,
        weights_in_dout => weight_buf_dout,
        weights_in_empty_n => weight_buf_empty_n,
        weights_in_read => PE_110_U0_weights_in_read,
        weights_out_V_din => PE_110_U0_weights_out_V_din,
        weights_out_V_full_n => weights_stream_0_V_full_n,
        weights_out_V_write => PE_110_U0_weights_out_V_write,
        data_in_0_address0 => PE_110_U0_data_in_0_address0,
        data_in_0_ce0 => PE_110_U0_data_in_0_ce0,
        data_in_0_q0 => data_in_local_0_q0,
        data_out_local_0_address0 => PE_110_U0_data_out_local_0_address0,
        data_out_local_0_ce0 => PE_110_U0_data_out_local_0_ce0,
        data_out_local_0_we0 => PE_110_U0_data_out_local_0_we0,
        data_out_local_0_d0 => PE_110_U0_data_out_local_0_d0,
        d_out_dout => d_out_c_dout,
        d_out_empty_n => d_out_c_empty_n,
        d_out_read => PE_110_U0_d_out_read,
        d_out_out_din => PE_110_U0_d_out_out_din,
        d_out_out_full_n => d_out_c13_full_n,
        d_out_out_write => PE_110_U0_d_out_out_write);

    PE11_U0 : component top_PE11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => PE11_U0_ap_start,
        ap_done => PE11_U0_ap_done,
        ap_continue => PE11_U0_ap_continue,
        ap_idle => PE11_U0_ap_idle,
        ap_ready => PE11_U0_ap_ready,
        weights_in_V_dout => weights_stream_0_V_dout,
        weights_in_V_empty_n => weights_stream_0_V_empty_n,
        weights_in_V_read => PE11_U0_weights_in_V_read,
        weights_out_V4_din => PE11_U0_weights_out_V4_din,
        weights_out_V4_full_n => weights_stream_1_V_full_n,
        weights_out_V4_write => PE11_U0_weights_out_V4_write,
        data_in7_address0 => PE11_U0_data_in7_address0,
        data_in7_ce0 => PE11_U0_data_in7_ce0,
        data_in7_q0 => data_in_local_1_q0,
        data_out_local10_address0 => PE11_U0_data_out_local10_address0,
        data_out_local10_ce0 => PE11_U0_data_out_local10_ce0,
        data_out_local10_we0 => PE11_U0_data_out_local10_we0,
        data_out_local10_d0 => PE11_U0_data_out_local10_d0,
        d_out_dout => d_out_c13_dout,
        d_out_empty_n => d_out_c13_empty_n,
        d_out_read => PE11_U0_d_out_read,
        d_out_out_din => PE11_U0_d_out_out_din,
        d_out_out_full_n => d_out_c14_full_n,
        d_out_out_write => PE11_U0_d_out_out_write);

    PE12_U0 : component top_PE12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => PE12_U0_ap_start,
        ap_done => PE12_U0_ap_done,
        ap_continue => PE12_U0_ap_continue,
        ap_idle => PE12_U0_ap_idle,
        ap_ready => PE12_U0_ap_ready,
        weights_in_V1_dout => weights_stream_1_V_dout,
        weights_in_V1_empty_n => weights_stream_1_V_empty_n,
        weights_in_V1_read => PE12_U0_weights_in_V1_read,
        weights_out_V5_din => PE12_U0_weights_out_V5_din,
        weights_out_V5_full_n => weights_stream_2_V_full_n,
        weights_out_V5_write => PE12_U0_weights_out_V5_write,
        data_in8_address0 => PE12_U0_data_in8_address0,
        data_in8_ce0 => PE12_U0_data_in8_ce0,
        data_in8_q0 => data_in_local_2_q0,
        data_out_local11_address0 => PE12_U0_data_out_local11_address0,
        data_out_local11_ce0 => PE12_U0_data_out_local11_ce0,
        data_out_local11_we0 => PE12_U0_data_out_local11_we0,
        data_out_local11_d0 => PE12_U0_data_out_local11_d0,
        d_out_dout => d_out_c14_dout,
        d_out_empty_n => d_out_c14_empty_n,
        d_out_read => PE12_U0_d_out_read,
        d_out_out_din => PE12_U0_d_out_out_din,
        d_out_out_full_n => d_out_c15_full_n,
        d_out_out_write => PE12_U0_d_out_out_write);

    PE13_U0 : component top_PE13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => PE13_U0_ap_start,
        ap_done => PE13_U0_ap_done,
        ap_continue => PE13_U0_ap_continue,
        ap_idle => PE13_U0_ap_idle,
        ap_ready => PE13_U0_ap_ready,
        weights_in_V2_dout => weights_stream_2_V_dout,
        weights_in_V2_empty_n => weights_stream_2_V_empty_n,
        weights_in_V2_read => PE13_U0_weights_in_V2_read,
        data_in9_address0 => PE13_U0_data_in9_address0,
        data_in9_ce0 => PE13_U0_data_in9_ce0,
        data_in9_q0 => data_in_local_3_q0,
        data_out_local12_address0 => PE13_U0_data_out_local12_address0,
        data_out_local12_ce0 => PE13_U0_data_out_local12_ce0,
        data_out_local12_we0 => PE13_U0_data_out_local12_we0,
        data_out_local12_d0 => PE13_U0_data_out_local12_d0,
        d_out_dout => d_out_c15_dout,
        d_out_empty_n => d_out_c15_empty_n,
        d_out_read => PE13_U0_d_out_read);

    weight_buf_U : component top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_weight_U0_weight_buf_din,
        if_full_n => weight_buf_full_n,
        if_write => load_weight_U0_weight_buf_write,
        if_dout => weight_buf_dout,
        if_empty_n => weight_buf_empty_n,
        if_read => PE_110_U0_weights_in_read);

    d_out_c_U : component top_fifo_w5_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_weight_U0_d_out_out_din,
        if_full_n => d_out_c_full_n,
        if_write => load_weight_U0_d_out_out_write,
        if_dout => d_out_c_dout,
        if_empty_n => d_out_c_empty_n,
        if_read => PE_110_U0_d_out_read);

    weights_stream_0_V_U : component top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_110_U0_weights_out_V_din,
        if_full_n => weights_stream_0_V_full_n,
        if_write => PE_110_U0_weights_out_V_write,
        if_dout => weights_stream_0_V_dout,
        if_empty_n => weights_stream_0_V_empty_n,
        if_read => PE11_U0_weights_in_V_read);

    d_out_c13_U : component top_fifo_w5_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE_110_U0_d_out_out_din,
        if_full_n => d_out_c13_full_n,
        if_write => PE_110_U0_d_out_out_write,
        if_dout => d_out_c13_dout,
        if_empty_n => d_out_c13_empty_n,
        if_read => PE11_U0_d_out_read);

    weights_stream_1_V_U : component top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE11_U0_weights_out_V4_din,
        if_full_n => weights_stream_1_V_full_n,
        if_write => PE11_U0_weights_out_V4_write,
        if_dout => weights_stream_1_V_dout,
        if_empty_n => weights_stream_1_V_empty_n,
        if_read => PE12_U0_weights_in_V1_read);

    d_out_c14_U : component top_fifo_w5_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE11_U0_d_out_out_din,
        if_full_n => d_out_c14_full_n,
        if_write => PE11_U0_d_out_out_write,
        if_dout => d_out_c14_dout,
        if_empty_n => d_out_c14_empty_n,
        if_read => PE12_U0_d_out_read);

    weights_stream_2_V_U : component top_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE12_U0_weights_out_V5_din,
        if_full_n => weights_stream_2_V_full_n,
        if_write => PE12_U0_weights_out_V5_write,
        if_dout => weights_stream_2_V_dout,
        if_empty_n => weights_stream_2_V_empty_n,
        if_read => PE13_U0_weights_in_V2_read);

    d_out_c15_U : component top_fifo_w5_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PE12_U0_d_out_out_din,
        if_full_n => d_out_c15_full_n,
        if_write => PE12_U0_d_out_out_write,
        if_dout => d_out_c15_dout,
        if_empty_n => d_out_c15_empty_n,
        if_read => PE13_U0_d_out_read);





    ap_sync_reg_PE11_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_PE11_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_PE11_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_PE11_U0_ap_ready <= ap_sync_PE11_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_PE12_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_PE12_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_PE12_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_PE12_U0_ap_ready <= ap_sync_PE12_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_PE13_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_PE13_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_PE13_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_PE13_U0_ap_ready <= ap_sync_PE13_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_PE_110_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_PE_110_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_PE_110_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_PE_110_U0_ap_ready <= ap_sync_PE_110_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_weight_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_load_weight_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_weight_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_weight_U0_ap_ready <= ap_sync_load_weight_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    PE11_U0_ap_continue <= ap_sync_continue;
    PE11_U0_ap_start <= ((ap_sync_reg_PE11_U0_ap_ready xor ap_const_logic_1) and ap_start);
    PE11_U0_start_full_n <= ap_const_logic_1;
    PE11_U0_start_write <= ap_const_logic_0;
    PE12_U0_ap_continue <= ap_sync_continue;
    PE12_U0_ap_start <= ((ap_sync_reg_PE12_U0_ap_ready xor ap_const_logic_1) and ap_start);
    PE12_U0_start_full_n <= ap_const_logic_1;
    PE12_U0_start_write <= ap_const_logic_0;
    PE13_U0_ap_continue <= ap_sync_continue;
    PE13_U0_ap_start <= ((ap_sync_reg_PE13_U0_ap_ready xor ap_const_logic_1) and ap_start);
    PE13_U0_start_full_n <= ap_const_logic_1;
    PE13_U0_start_write <= ap_const_logic_0;
    PE_110_U0_ap_continue <= ap_sync_continue;
    PE_110_U0_ap_start <= ((ap_sync_reg_PE_110_U0_ap_ready xor ap_const_logic_1) and ap_start);
    PE_110_U0_start_full_n <= ap_const_logic_1;
    PE_110_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (load_weight_U0_ap_idle and PE_110_U0_ap_idle and PE13_U0_ap_idle and PE12_U0_ap_idle and PE11_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_PE11_U0_ap_ready <= (ap_sync_reg_PE11_U0_ap_ready or PE11_U0_ap_ready);
    ap_sync_PE12_U0_ap_ready <= (ap_sync_reg_PE12_U0_ap_ready or PE12_U0_ap_ready);
    ap_sync_PE13_U0_ap_ready <= (ap_sync_reg_PE13_U0_ap_ready or PE13_U0_ap_ready);
    ap_sync_PE_110_U0_ap_ready <= (ap_sync_reg_PE_110_U0_ap_ready or PE_110_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (PE_110_U0_ap_done and PE13_U0_ap_done and PE12_U0_ap_done and PE11_U0_ap_done);
    ap_sync_load_weight_U0_ap_ready <= (load_weight_U0_ap_ready or ap_sync_reg_load_weight_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_weight_U0_ap_ready and ap_sync_PE_110_U0_ap_ready and ap_sync_PE13_U0_ap_ready and ap_sync_PE12_U0_ap_ready and ap_sync_PE11_U0_ap_ready);
    data_in_local_0_address0 <= PE_110_U0_data_in_0_address0;
    data_in_local_0_address1 <= ap_const_lv4_0;
    data_in_local_0_ce0 <= PE_110_U0_data_in_0_ce0;
    data_in_local_0_ce1 <= ap_const_logic_0;
    data_in_local_0_d0 <= ap_const_lv32_0;
    data_in_local_0_d1 <= ap_const_lv32_0;
    data_in_local_0_we0 <= ap_const_logic_0;
    data_in_local_0_we1 <= ap_const_logic_0;
    data_in_local_1_address0 <= PE11_U0_data_in7_address0;
    data_in_local_1_address1 <= ap_const_lv4_0;
    data_in_local_1_ce0 <= PE11_U0_data_in7_ce0;
    data_in_local_1_ce1 <= ap_const_logic_0;
    data_in_local_1_d0 <= ap_const_lv32_0;
    data_in_local_1_d1 <= ap_const_lv32_0;
    data_in_local_1_we0 <= ap_const_logic_0;
    data_in_local_1_we1 <= ap_const_logic_0;
    data_in_local_2_address0 <= PE12_U0_data_in8_address0;
    data_in_local_2_address1 <= ap_const_lv4_0;
    data_in_local_2_ce0 <= PE12_U0_data_in8_ce0;
    data_in_local_2_ce1 <= ap_const_logic_0;
    data_in_local_2_d0 <= ap_const_lv32_0;
    data_in_local_2_d1 <= ap_const_lv32_0;
    data_in_local_2_we0 <= ap_const_logic_0;
    data_in_local_2_we1 <= ap_const_logic_0;
    data_in_local_3_address0 <= PE13_U0_data_in9_address0;
    data_in_local_3_address1 <= ap_const_lv4_0;
    data_in_local_3_ce0 <= PE13_U0_data_in9_ce0;
    data_in_local_3_ce1 <= ap_const_logic_0;
    data_in_local_3_d0 <= ap_const_lv32_0;
    data_in_local_3_d1 <= ap_const_lv32_0;
    data_in_local_3_we0 <= ap_const_logic_0;
    data_in_local_3_we1 <= ap_const_logic_0;
    data_out_local_0_address0 <= PE_110_U0_data_out_local_0_address0;
    data_out_local_0_address1 <= ap_const_lv5_0;
    data_out_local_0_ce0 <= PE_110_U0_data_out_local_0_ce0;
    data_out_local_0_ce1 <= ap_const_logic_0;
    data_out_local_0_d0 <= PE_110_U0_data_out_local_0_d0;
    data_out_local_0_d1 <= ap_const_lv32_0;
    data_out_local_0_we0 <= PE_110_U0_data_out_local_0_we0;
    data_out_local_0_we1 <= ap_const_logic_0;
    data_out_local_1_address0 <= PE11_U0_data_out_local10_address0;
    data_out_local_1_address1 <= ap_const_lv5_0;
    data_out_local_1_ce0 <= PE11_U0_data_out_local10_ce0;
    data_out_local_1_ce1 <= ap_const_logic_0;
    data_out_local_1_d0 <= PE11_U0_data_out_local10_d0;
    data_out_local_1_d1 <= ap_const_lv32_0;
    data_out_local_1_we0 <= PE11_U0_data_out_local10_we0;
    data_out_local_1_we1 <= ap_const_logic_0;
    data_out_local_2_address0 <= PE12_U0_data_out_local11_address0;
    data_out_local_2_address1 <= ap_const_lv5_0;
    data_out_local_2_ce0 <= PE12_U0_data_out_local11_ce0;
    data_out_local_2_ce1 <= ap_const_logic_0;
    data_out_local_2_d0 <= PE12_U0_data_out_local11_d0;
    data_out_local_2_d1 <= ap_const_lv32_0;
    data_out_local_2_we0 <= PE12_U0_data_out_local11_we0;
    data_out_local_2_we1 <= ap_const_logic_0;
    data_out_local_3_address0 <= PE13_U0_data_out_local12_address0;
    data_out_local_3_address1 <= ap_const_lv5_0;
    data_out_local_3_ce0 <= PE13_U0_data_out_local12_ce0;
    data_out_local_3_ce1 <= ap_const_logic_0;
    data_out_local_3_d0 <= PE13_U0_data_out_local12_d0;
    data_out_local_3_d1 <= ap_const_lv32_0;
    data_out_local_3_we0 <= PE13_U0_data_out_local12_we0;
    data_out_local_3_we1 <= ap_const_logic_0;
    load_weight_U0_ap_continue <= ap_const_logic_1;
    load_weight_U0_ap_start <= ((ap_sync_reg_load_weight_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_weight_U0_start_full_n <= ap_const_logic_1;
    load_weight_U0_start_write <= ap_const_logic_0;
    m_axi_gmem_ARADDR <= load_weight_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= load_weight_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= load_weight_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= load_weight_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= load_weight_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= load_weight_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= load_weight_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= load_weight_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= load_weight_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= load_weight_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= load_weight_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= load_weight_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= load_weight_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
end behav;
