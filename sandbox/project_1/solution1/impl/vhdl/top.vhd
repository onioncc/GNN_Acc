-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=659,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2778,HLS_SYN_LUT=3500,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights : STD_LOGIC_VECTOR (63 downto 0);
    signal data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln74_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln85_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_657_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_312 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_357 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_368 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_out_read_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_read_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_596 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln74_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln74_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_445_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln74_reg_611 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln74_reg_611_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln74_1_fu_459_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln74_1_reg_616 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln74_fu_467_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_621 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln75_fu_471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_addr_read_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_out_1_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_out_1_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal gmem_addr_1_reg_646 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln80_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_fu_515_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln85_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_1_fu_547_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln85_1_reg_661 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln85_fu_555_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln85_reg_666 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln86_fu_567_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_573_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal data_in_local_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_local_0_ce0 : STD_LOGIC;
    signal data_in_local_0_we0 : STD_LOGIC;
    signal data_in_local_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_local_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_local_1_ce0 : STD_LOGIC;
    signal data_in_local_1_we0 : STD_LOGIC;
    signal data_in_local_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_local_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_local_2_ce0 : STD_LOGIC;
    signal data_in_local_2_we0 : STD_LOGIC;
    signal data_in_local_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_local_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_in_local_3_ce0 : STD_LOGIC;
    signal data_in_local_3_we0 : STD_LOGIC;
    signal data_in_local_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_local_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_out_local_0_ce0 : STD_LOGIC;
    signal data_out_local_0_we0 : STD_LOGIC;
    signal data_out_local_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_local_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_out_local_1_ce0 : STD_LOGIC;
    signal data_out_local_1_we0 : STD_LOGIC;
    signal data_out_local_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_local_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_out_local_2_ce0 : STD_LOGIC;
    signal data_out_local_2_we0 : STD_LOGIC;
    signal data_out_local_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_local_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_out_local_3_ce0 : STD_LOGIC;
    signal data_out_local_3_we0 : STD_LOGIC;
    signal data_out_local_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_dataflow_fu_390_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_0_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_0_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_0_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_0_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_1_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_1_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_1_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_1_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_2_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_2_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_2_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_2_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_3_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_3_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_3_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_in_local_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_in_local_3_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_0_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_0_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_0_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_0_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_1_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_1_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_1_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_1_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_2_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_2_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_2_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_2_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_3_ce0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_3_we0 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_3_ce1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_data_out_local_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_dataflow_fu_390_data_out_local_3_we1 : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_ap_start : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_ap_done : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_ap_ready : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_ap_idle : STD_LOGIC;
    signal grp_PE_dataflow_fu_390_ap_continue : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_327_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_out_reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_sync_grp_PE_dataflow_fu_390_ap_ready : STD_LOGIC;
    signal ap_sync_grp_PE_dataflow_fu_390_ap_done : STD_LOGIC;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_i_1_phi_fu_372_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PE_dataflow_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_PE_dataflow_fu_390_ap_done : STD_LOGIC := '0';
    signal j_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln85_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal trunc_ln_fu_407_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln75_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_1_fu_453_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1_fu_496_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln86_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_1_fu_541_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln85_fu_533_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_PE_dataflow IS
    port (
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights : IN STD_LOGIC_VECTOR (63 downto 0);
        data_in_local_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_0_ce0 : OUT STD_LOGIC;
        data_in_local_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_0_we0 : OUT STD_LOGIC;
        data_in_local_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_0_ce1 : OUT STD_LOGIC;
        data_in_local_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_0_we1 : OUT STD_LOGIC;
        data_in_local_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_1_ce0 : OUT STD_LOGIC;
        data_in_local_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_1_we0 : OUT STD_LOGIC;
        data_in_local_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_1_ce1 : OUT STD_LOGIC;
        data_in_local_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_1_we1 : OUT STD_LOGIC;
        data_in_local_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_2_ce0 : OUT STD_LOGIC;
        data_in_local_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_2_we0 : OUT STD_LOGIC;
        data_in_local_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_2_ce1 : OUT STD_LOGIC;
        data_in_local_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_2_we1 : OUT STD_LOGIC;
        data_in_local_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_3_ce0 : OUT STD_LOGIC;
        data_in_local_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_3_we0 : OUT STD_LOGIC;
        data_in_local_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_in_local_3_ce1 : OUT STD_LOGIC;
        data_in_local_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in_local_3_we1 : OUT STD_LOGIC;
        data_out_local_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_0_ce0 : OUT STD_LOGIC;
        data_out_local_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_0_we0 : OUT STD_LOGIC;
        data_out_local_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_0_ce1 : OUT STD_LOGIC;
        data_out_local_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_0_we1 : OUT STD_LOGIC;
        data_out_local_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_1_ce0 : OUT STD_LOGIC;
        data_out_local_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_1_we0 : OUT STD_LOGIC;
        data_out_local_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_1_ce1 : OUT STD_LOGIC;
        data_out_local_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_1_we1 : OUT STD_LOGIC;
        data_out_local_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_2_ce0 : OUT STD_LOGIC;
        data_out_local_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_2_we0 : OUT STD_LOGIC;
        data_out_local_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_2_ce1 : OUT STD_LOGIC;
        data_out_local_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_2_we1 : OUT STD_LOGIC;
        data_out_local_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_3_ce0 : OUT STD_LOGIC;
        data_out_local_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_3_we0 : OUT STD_LOGIC;
        data_out_local_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_out_local_3_ce1 : OUT STD_LOGIC;
        data_out_local_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_out_local_3_we1 : OUT STD_LOGIC;
        d_out : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        weights_ap_vld : IN STD_LOGIC;
        d_out_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component top_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_data_in_local_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_data_out_local_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        weights : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_out : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component top_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        weights => weights,
        data_in => data_in,
        data_out => data_out);

    gmem_m_axi_U : component top_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_646,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_50,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_reg_696,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    data_in_local_0_U : component top_data_in_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_in_local_0_address0,
        ce0 => data_in_local_0_ce0,
        we0 => data_in_local_0_we0,
        d0 => gmem_addr_read_reg_630,
        q0 => data_in_local_0_q0);

    data_in_local_1_U : component top_data_in_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_in_local_1_address0,
        ce0 => data_in_local_1_ce0,
        we0 => data_in_local_1_we0,
        d0 => gmem_addr_read_reg_630,
        q0 => data_in_local_1_q0);

    data_in_local_2_U : component top_data_in_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_in_local_2_address0,
        ce0 => data_in_local_2_ce0,
        we0 => data_in_local_2_we0,
        d0 => gmem_addr_read_reg_630,
        q0 => data_in_local_2_q0);

    data_in_local_3_U : component top_data_in_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_in_local_3_address0,
        ce0 => data_in_local_3_ce0,
        we0 => data_in_local_3_we0,
        d0 => gmem_addr_read_reg_630,
        q0 => data_in_local_3_q0);

    data_out_local_0_U : component top_data_out_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_out_local_0_address0,
        ce0 => data_out_local_0_ce0,
        we0 => data_out_local_0_we0,
        d0 => grp_PE_dataflow_fu_390_data_out_local_0_d0,
        q0 => data_out_local_0_q0);

    data_out_local_1_U : component top_data_out_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_out_local_1_address0,
        ce0 => data_out_local_1_ce0,
        we0 => data_out_local_1_we0,
        d0 => grp_PE_dataflow_fu_390_data_out_local_1_d0,
        q0 => data_out_local_1_q0);

    data_out_local_2_U : component top_data_out_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_out_local_2_address0,
        ce0 => data_out_local_2_ce0,
        we0 => data_out_local_2_we0,
        d0 => grp_PE_dataflow_fu_390_data_out_local_2_d0,
        q0 => data_out_local_2_q0);

    data_out_local_3_U : component top_data_out_local_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_out_local_3_address0,
        ce0 => data_out_local_3_ce0,
        we0 => data_out_local_3_we0,
        d0 => grp_PE_dataflow_fu_390_data_out_local_3_d0,
        q0 => data_out_local_3_q0);

    grp_PE_dataflow_fu_390 : component top_PE_dataflow
    port map (
        m_axi_gmem_AWVALID => grp_PE_dataflow_fu_390_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_PE_dataflow_fu_390_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_PE_dataflow_fu_390_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_PE_dataflow_fu_390_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_PE_dataflow_fu_390_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_PE_dataflow_fu_390_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_PE_dataflow_fu_390_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_PE_dataflow_fu_390_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_PE_dataflow_fu_390_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_PE_dataflow_fu_390_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_PE_dataflow_fu_390_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_PE_dataflow_fu_390_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_PE_dataflow_fu_390_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_PE_dataflow_fu_390_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_PE_dataflow_fu_390_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_PE_dataflow_fu_390_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_PE_dataflow_fu_390_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_PE_dataflow_fu_390_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_PE_dataflow_fu_390_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_PE_dataflow_fu_390_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_PE_dataflow_fu_390_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        weights => weights_read_reg_591,
        data_in_local_0_address0 => grp_PE_dataflow_fu_390_data_in_local_0_address0,
        data_in_local_0_ce0 => grp_PE_dataflow_fu_390_data_in_local_0_ce0,
        data_in_local_0_d0 => grp_PE_dataflow_fu_390_data_in_local_0_d0,
        data_in_local_0_q0 => data_in_local_0_q0,
        data_in_local_0_we0 => grp_PE_dataflow_fu_390_data_in_local_0_we0,
        data_in_local_0_address1 => grp_PE_dataflow_fu_390_data_in_local_0_address1,
        data_in_local_0_ce1 => grp_PE_dataflow_fu_390_data_in_local_0_ce1,
        data_in_local_0_d1 => grp_PE_dataflow_fu_390_data_in_local_0_d1,
        data_in_local_0_q1 => ap_const_lv32_0,
        data_in_local_0_we1 => grp_PE_dataflow_fu_390_data_in_local_0_we1,
        data_in_local_1_address0 => grp_PE_dataflow_fu_390_data_in_local_1_address0,
        data_in_local_1_ce0 => grp_PE_dataflow_fu_390_data_in_local_1_ce0,
        data_in_local_1_d0 => grp_PE_dataflow_fu_390_data_in_local_1_d0,
        data_in_local_1_q0 => data_in_local_1_q0,
        data_in_local_1_we0 => grp_PE_dataflow_fu_390_data_in_local_1_we0,
        data_in_local_1_address1 => grp_PE_dataflow_fu_390_data_in_local_1_address1,
        data_in_local_1_ce1 => grp_PE_dataflow_fu_390_data_in_local_1_ce1,
        data_in_local_1_d1 => grp_PE_dataflow_fu_390_data_in_local_1_d1,
        data_in_local_1_q1 => ap_const_lv32_0,
        data_in_local_1_we1 => grp_PE_dataflow_fu_390_data_in_local_1_we1,
        data_in_local_2_address0 => grp_PE_dataflow_fu_390_data_in_local_2_address0,
        data_in_local_2_ce0 => grp_PE_dataflow_fu_390_data_in_local_2_ce0,
        data_in_local_2_d0 => grp_PE_dataflow_fu_390_data_in_local_2_d0,
        data_in_local_2_q0 => data_in_local_2_q0,
        data_in_local_2_we0 => grp_PE_dataflow_fu_390_data_in_local_2_we0,
        data_in_local_2_address1 => grp_PE_dataflow_fu_390_data_in_local_2_address1,
        data_in_local_2_ce1 => grp_PE_dataflow_fu_390_data_in_local_2_ce1,
        data_in_local_2_d1 => grp_PE_dataflow_fu_390_data_in_local_2_d1,
        data_in_local_2_q1 => ap_const_lv32_0,
        data_in_local_2_we1 => grp_PE_dataflow_fu_390_data_in_local_2_we1,
        data_in_local_3_address0 => grp_PE_dataflow_fu_390_data_in_local_3_address0,
        data_in_local_3_ce0 => grp_PE_dataflow_fu_390_data_in_local_3_ce0,
        data_in_local_3_d0 => grp_PE_dataflow_fu_390_data_in_local_3_d0,
        data_in_local_3_q0 => data_in_local_3_q0,
        data_in_local_3_we0 => grp_PE_dataflow_fu_390_data_in_local_3_we0,
        data_in_local_3_address1 => grp_PE_dataflow_fu_390_data_in_local_3_address1,
        data_in_local_3_ce1 => grp_PE_dataflow_fu_390_data_in_local_3_ce1,
        data_in_local_3_d1 => grp_PE_dataflow_fu_390_data_in_local_3_d1,
        data_in_local_3_q1 => ap_const_lv32_0,
        data_in_local_3_we1 => grp_PE_dataflow_fu_390_data_in_local_3_we1,
        data_out_local_0_address0 => grp_PE_dataflow_fu_390_data_out_local_0_address0,
        data_out_local_0_ce0 => grp_PE_dataflow_fu_390_data_out_local_0_ce0,
        data_out_local_0_d0 => grp_PE_dataflow_fu_390_data_out_local_0_d0,
        data_out_local_0_q0 => ap_const_lv32_0,
        data_out_local_0_we0 => grp_PE_dataflow_fu_390_data_out_local_0_we0,
        data_out_local_0_address1 => grp_PE_dataflow_fu_390_data_out_local_0_address1,
        data_out_local_0_ce1 => grp_PE_dataflow_fu_390_data_out_local_0_ce1,
        data_out_local_0_d1 => grp_PE_dataflow_fu_390_data_out_local_0_d1,
        data_out_local_0_q1 => ap_const_lv32_0,
        data_out_local_0_we1 => grp_PE_dataflow_fu_390_data_out_local_0_we1,
        data_out_local_1_address0 => grp_PE_dataflow_fu_390_data_out_local_1_address0,
        data_out_local_1_ce0 => grp_PE_dataflow_fu_390_data_out_local_1_ce0,
        data_out_local_1_d0 => grp_PE_dataflow_fu_390_data_out_local_1_d0,
        data_out_local_1_q0 => ap_const_lv32_0,
        data_out_local_1_we0 => grp_PE_dataflow_fu_390_data_out_local_1_we0,
        data_out_local_1_address1 => grp_PE_dataflow_fu_390_data_out_local_1_address1,
        data_out_local_1_ce1 => grp_PE_dataflow_fu_390_data_out_local_1_ce1,
        data_out_local_1_d1 => grp_PE_dataflow_fu_390_data_out_local_1_d1,
        data_out_local_1_q1 => ap_const_lv32_0,
        data_out_local_1_we1 => grp_PE_dataflow_fu_390_data_out_local_1_we1,
        data_out_local_2_address0 => grp_PE_dataflow_fu_390_data_out_local_2_address0,
        data_out_local_2_ce0 => grp_PE_dataflow_fu_390_data_out_local_2_ce0,
        data_out_local_2_d0 => grp_PE_dataflow_fu_390_data_out_local_2_d0,
        data_out_local_2_q0 => ap_const_lv32_0,
        data_out_local_2_we0 => grp_PE_dataflow_fu_390_data_out_local_2_we0,
        data_out_local_2_address1 => grp_PE_dataflow_fu_390_data_out_local_2_address1,
        data_out_local_2_ce1 => grp_PE_dataflow_fu_390_data_out_local_2_ce1,
        data_out_local_2_d1 => grp_PE_dataflow_fu_390_data_out_local_2_d1,
        data_out_local_2_q1 => ap_const_lv32_0,
        data_out_local_2_we1 => grp_PE_dataflow_fu_390_data_out_local_2_we1,
        data_out_local_3_address0 => grp_PE_dataflow_fu_390_data_out_local_3_address0,
        data_out_local_3_ce0 => grp_PE_dataflow_fu_390_data_out_local_3_ce0,
        data_out_local_3_d0 => grp_PE_dataflow_fu_390_data_out_local_3_d0,
        data_out_local_3_q0 => ap_const_lv32_0,
        data_out_local_3_we0 => grp_PE_dataflow_fu_390_data_out_local_3_we0,
        data_out_local_3_address1 => grp_PE_dataflow_fu_390_data_out_local_3_address1,
        data_out_local_3_ce1 => grp_PE_dataflow_fu_390_data_out_local_3_ce1,
        data_out_local_3_d1 => grp_PE_dataflow_fu_390_data_out_local_3_d1,
        data_out_local_3_q1 => ap_const_lv32_0,
        data_out_local_3_we1 => grp_PE_dataflow_fu_390_data_out_local_3_we1,
        d_out => d_out_reg_345,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        weights_ap_vld => ap_const_logic_1,
        d_out_ap_vld => ap_const_logic_1,
        ap_start => grp_PE_dataflow_fu_390_ap_start,
        ap_done => grp_PE_dataflow_fu_390_ap_done,
        ap_ready => grp_PE_dataflow_fu_390_ap_ready,
        ap_idle => grp_PE_dataflow_fu_390_ap_idle,
        ap_continue => grp_PE_dataflow_fu_390_ap_continue);

    mux_42_32_1_1_U52 : component top_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => data_out_local_0_q0,
        din1 => data_out_local_1_q0,
        din2 => data_out_local_2_q0,
        din3 => data_out_local_3_q0,
        din4 => trunc_ln85_reg_666,
        dout => tmp_fu_573_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_PE_dataflow_fu_390_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
                    ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= ap_const_logic_0;
                elsif ((grp_PE_dataflow_fu_390_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_PE_dataflow_fu_390_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
                    ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= ap_const_logic_0;
                elsif ((grp_PE_dataflow_fu_390_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_PE_dataflow_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_PE_dataflow_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_PE_dataflow_fu_390_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_PE_dataflow_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PE_dataflow_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_PE_dataflow_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_out_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_out_reg_345 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
                d_out_reg_345 <= d_out_1_reg_638;
            end if; 
        end if;
    end process;

    i_1_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln85_reg_657 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_368 <= select_ln85_1_reg_661;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
                i_1_reg_368 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_323 <= select_ln74_1_reg_616;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_323 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_521_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_357 <= add_ln85_fu_515_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
                indvar_flatten7_reg_357 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_433_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_312 <= add_ln74_fu_427_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_312 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_521_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_1_reg_379 <= add_ln86_fu_567_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
                j_1_reg_379 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_433_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_334 <= add_ln75_fu_471_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_334 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                d_out_1_reg_638 <= d_out_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_out_read_reg_586 <= data_out;
                gmem_addr_reg_596 <= sext_ln74_fu_417_p1;
                weights_read_reg_591 <= weights;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                gmem_addr_1_reg_646 <= sext_ln85_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_630 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln74_reg_607 <= icmp_ln74_fu_433_p2;
                select_ln74_reg_611_pp0_iter1_reg <= select_ln74_reg_611;
                trunc_ln74_reg_621_pp0_iter1_reg <= trunc_ln74_reg_621;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln85_reg_657 <= icmp_ln85_fu_521_p2;
                icmp_ln85_reg_657_pp1_iter1_reg <= icmp_ln85_reg_657;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_433_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln74_1_reg_616 <= select_ln74_1_fu_459_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln74_reg_611 <= select_ln74_fu_445_p3;
                trunc_ln74_reg_621 <= trunc_ln74_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_521_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln85_1_reg_661 <= select_ln85_1_fu_547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln85_reg_657 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_reg_696 <= tmp_fu_573_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln85_reg_666 <= trunc_ln85_fu_555_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15, ap_enable_reg_pp1_iter2, ap_CS_fsm_state23, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp0_iter0, icmp_ln74_fu_433_p2, ap_CS_fsm_state13, icmp_ln80_fu_490_p2, ap_enable_reg_pp1_iter0, icmp_ln85_fu_521_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln74_fu_433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln74_fu_433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln80_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln85_fu_521_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln85_fu_521_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln74_1_fu_453_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_327_p4) + unsigned(ap_const_lv3_1));
    add_ln74_fu_427_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_312) + unsigned(ap_const_lv6_1));
    add_ln75_fu_471_p2 <= std_logic_vector(unsigned(select_ln74_fu_445_p3) + unsigned(ap_const_lv4_1));
    add_ln85_1_fu_541_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_372_p4) + unsigned(ap_const_lv3_1));
    add_ln85_fu_515_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_357) + unsigned(ap_const_lv7_1));
    add_ln86_fu_567_p2 <= std_logic_vector(unsigned(select_ln85_fu_533_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln74_reg_607, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln74_reg_607, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state18_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state18_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln74_reg_607, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln74_reg_607 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_on_subcall_done_assign_proc : process(ap_sync_grp_PE_dataflow_fu_390_ap_ready, ap_sync_grp_PE_dataflow_fu_390_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_sync_grp_PE_dataflow_fu_390_ap_ready and ap_sync_grp_PE_dataflow_fu_390_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(icmp_ln85_reg_657_pp1_iter1_reg, gmem_WREADY)
    begin
                ap_block_state18_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln85_reg_657_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln74_fu_433_p2)
    begin
        if ((icmp_ln74_fu_433_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln85_fu_521_p2)
    begin
        if ((icmp_ln85_fu_521_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_372_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln85_reg_657, i_1_reg_368, ap_CS_fsm_pp1_stage0, select_ln85_1_reg_661, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln85_reg_657 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_372_p4 <= select_ln85_1_reg_661;
        else 
            ap_phi_mux_i_1_phi_fu_372_p4 <= i_1_reg_368;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_327_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln74_reg_607, i_reg_323, select_ln74_1_reg_616)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_327_p4 <= select_ln74_1_reg_616;
        else 
            ap_phi_mux_i_phi_fu_327_p4 <= i_reg_323;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_PE_dataflow_fu_390_ap_done <= (grp_PE_dataflow_fu_390_ap_done or ap_sync_reg_grp_PE_dataflow_fu_390_ap_done);
    ap_sync_grp_PE_dataflow_fu_390_ap_ready <= (grp_PE_dataflow_fu_390_ap_ready or ap_sync_reg_grp_PE_dataflow_fu_390_ap_ready);
    d_out_1_fu_484_p2 <= std_logic_vector(unsigned(d_out_reg_345) + unsigned(ap_const_lv5_1));

    data_in_local_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_0_address0, ap_CS_fsm_state14, j_cast_fu_477_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_local_0_address0 <= j_cast_fu_477_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_0_address0 <= grp_PE_dataflow_fu_390_data_in_local_0_address0;
        else 
            data_in_local_0_address0 <= "XXXX";
        end if; 
    end process;


    data_in_local_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_0_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_0_ce0 <= grp_PE_dataflow_fu_390_data_in_local_0_ce0;
        else 
            data_in_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln74_reg_621_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln74_reg_621_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_0_we0 <= ap_const_logic_1;
        else 
            data_in_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_1_address0, ap_CS_fsm_state14, j_cast_fu_477_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_local_1_address0 <= j_cast_fu_477_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_1_address0 <= grp_PE_dataflow_fu_390_data_in_local_1_address0;
        else 
            data_in_local_1_address0 <= "XXXX";
        end if; 
    end process;


    data_in_local_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_1_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_1_ce0 <= grp_PE_dataflow_fu_390_data_in_local_1_ce0;
        else 
            data_in_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln74_reg_621_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln74_reg_621_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_1_we0 <= ap_const_logic_1;
        else 
            data_in_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_2_address0, ap_CS_fsm_state14, j_cast_fu_477_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_local_2_address0 <= j_cast_fu_477_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_2_address0 <= grp_PE_dataflow_fu_390_data_in_local_2_address0;
        else 
            data_in_local_2_address0 <= "XXXX";
        end if; 
    end process;


    data_in_local_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_2_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_2_ce0 <= grp_PE_dataflow_fu_390_data_in_local_2_ce0;
        else 
            data_in_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln74_reg_621_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln74_reg_621_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_2_we0 <= ap_const_logic_1;
        else 
            data_in_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_3_address0, ap_CS_fsm_state14, j_cast_fu_477_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_local_3_address0 <= j_cast_fu_477_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_3_address0 <= grp_PE_dataflow_fu_390_data_in_local_3_address0;
        else 
            data_in_local_3_address0 <= "XXXX";
        end if; 
    end process;


    data_in_local_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_PE_dataflow_fu_390_data_in_local_3_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_in_local_3_ce0 <= grp_PE_dataflow_fu_390_data_in_local_3_ce0;
        else 
            data_in_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_local_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln74_reg_621_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln74_reg_621_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_local_3_we0 <= ap_const_logic_1;
        else 
            data_in_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_0_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_PE_dataflow_fu_390_data_out_local_0_address0, ap_CS_fsm_state14, j_1_cast_fu_559_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            data_out_local_0_address0 <= j_1_cast_fu_559_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_0_address0 <= grp_PE_dataflow_fu_390_data_out_local_0_address0;
        else 
            data_out_local_0_address0 <= "XXXXX";
        end if; 
    end process;


    data_out_local_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_PE_dataflow_fu_390_data_out_local_0_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_out_local_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_0_ce0 <= grp_PE_dataflow_fu_390_data_out_local_0_ce0;
        else 
            data_out_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_0_we0_assign_proc : process(grp_PE_dataflow_fu_390_data_out_local_0_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_0_we0 <= grp_PE_dataflow_fu_390_data_out_local_0_we0;
        else 
            data_out_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_1_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_PE_dataflow_fu_390_data_out_local_1_address0, ap_CS_fsm_state14, j_1_cast_fu_559_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            data_out_local_1_address0 <= j_1_cast_fu_559_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_1_address0 <= grp_PE_dataflow_fu_390_data_out_local_1_address0;
        else 
            data_out_local_1_address0 <= "XXXXX";
        end if; 
    end process;


    data_out_local_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_PE_dataflow_fu_390_data_out_local_1_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_out_local_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_1_ce0 <= grp_PE_dataflow_fu_390_data_out_local_1_ce0;
        else 
            data_out_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_1_we0_assign_proc : process(grp_PE_dataflow_fu_390_data_out_local_1_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_1_we0 <= grp_PE_dataflow_fu_390_data_out_local_1_we0;
        else 
            data_out_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_2_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_PE_dataflow_fu_390_data_out_local_2_address0, ap_CS_fsm_state14, j_1_cast_fu_559_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            data_out_local_2_address0 <= j_1_cast_fu_559_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_2_address0 <= grp_PE_dataflow_fu_390_data_out_local_2_address0;
        else 
            data_out_local_2_address0 <= "XXXXX";
        end if; 
    end process;


    data_out_local_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_PE_dataflow_fu_390_data_out_local_2_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_out_local_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_2_ce0 <= grp_PE_dataflow_fu_390_data_out_local_2_ce0;
        else 
            data_out_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_2_we0_assign_proc : process(grp_PE_dataflow_fu_390_data_out_local_2_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_2_we0 <= grp_PE_dataflow_fu_390_data_out_local_2_we0;
        else 
            data_out_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_3_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_PE_dataflow_fu_390_data_out_local_3_address0, ap_CS_fsm_state14, j_1_cast_fu_559_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            data_out_local_3_address0 <= j_1_cast_fu_559_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_3_address0 <= grp_PE_dataflow_fu_390_data_out_local_3_address0;
        else 
            data_out_local_3_address0 <= "XXXXX";
        end if; 
    end process;


    data_out_local_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, grp_PE_dataflow_fu_390_data_out_local_3_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_out_local_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_3_ce0 <= grp_PE_dataflow_fu_390_data_out_local_3_ce0;
        else 
            data_out_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_local_3_we0_assign_proc : process(grp_PE_dataflow_fu_390_data_out_local_3_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data_out_local_3_we0 <= grp_PE_dataflow_fu_390_data_out_local_3_we0;
        else 
            data_out_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY, gmem_addr_reg_596, ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR, ap_CS_fsm_state14)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= gmem_addr_reg_596;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARADDR <= grp_PE_dataflow_fu_390_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARBURST <= grp_PE_dataflow_fu_390_m_axi_gmem_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARCACHE <= grp_PE_dataflow_fu_390_m_axi_gmem_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARID, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARID <= grp_PE_dataflow_fu_390_m_axi_gmem_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY, ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN, ap_CS_fsm_state14)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= ap_const_lv32_28;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARLEN <= grp_PE_dataflow_fu_390_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARLOCK <= grp_PE_dataflow_fu_390_m_axi_gmem_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARPROT <= grp_PE_dataflow_fu_390_m_axi_gmem_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARQOS <= grp_PE_dataflow_fu_390_m_axi_gmem_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARREGION <= grp_PE_dataflow_fu_390_m_axi_gmem_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARSIZE <= grp_PE_dataflow_fu_390_m_axi_gmem_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARUSER <= grp_PE_dataflow_fu_390_m_axi_gmem_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY, ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID, ap_CS_fsm_state14)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_ARVALID <= grp_PE_dataflow_fu_390_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state15, gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (gmem_AWREADY = ap_const_logic_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state23, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln74_reg_607, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, icmp_ln80_fu_490_p2, grp_PE_dataflow_fu_390_m_axi_gmem_RREADY, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((icmp_ln80_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            gmem_RREADY <= grp_PE_dataflow_fu_390_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln85_reg_657_pp1_iter1_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln85_reg_657_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln74_reg_607)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln74_reg_607 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln85_reg_657_pp1_iter1_reg)
    begin
        if (((icmp_ln85_reg_657_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_PE_dataflow_fu_390_ap_continue_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
            grp_PE_dataflow_fu_390_ap_continue <= ap_const_logic_1;
        else 
            grp_PE_dataflow_fu_390_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_PE_dataflow_fu_390_ap_start <= grp_PE_dataflow_fu_390_ap_start_reg;
    icmp_ln74_fu_433_p2 <= "1" when (indvar_flatten_reg_312 = ap_const_lv6_28) else "0";
    icmp_ln75_fu_439_p2 <= "1" when (j_reg_334 = ap_const_lv4_A) else "0";
    icmp_ln80_fu_490_p2 <= "1" when (d_out_reg_345 = ap_const_lv5_14) else "0";
    icmp_ln85_fu_521_p2 <= "1" when (indvar_flatten7_reg_357 = ap_const_lv7_50) else "0";
    icmp_ln86_fu_527_p2 <= "1" when (j_1_reg_379 = ap_const_lv5_14) else "0";
    j_1_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_fu_533_p3),64));
    j_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_reg_611_pp0_iter1_reg),64));
    select_ln74_1_fu_459_p3 <= 
        add_ln74_1_fu_453_p2 when (icmp_ln75_fu_439_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_327_p4;
    select_ln74_fu_445_p3 <= 
        ap_const_lv4_0 when (icmp_ln75_fu_439_p2(0) = '1') else 
        j_reg_334;
    select_ln85_1_fu_547_p3 <= 
        add_ln85_1_fu_541_p2 when (icmp_ln86_fu_527_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_372_p4;
    select_ln85_fu_533_p3 <= 
        ap_const_lv5_0 when (icmp_ln86_fu_527_p2(0) = '1') else 
        j_1_reg_379;
        sext_ln74_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_407_p4),64));

        sext_ln85_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_496_p4),64));

    trunc_ln1_fu_496_p4 <= data_out_read_reg_586(63 downto 2);
    trunc_ln74_fu_467_p1 <= select_ln74_1_fu_459_p3(2 - 1 downto 0);
    trunc_ln85_fu_555_p1 <= select_ln85_1_fu_547_p3(2 - 1 downto 0);
    trunc_ln_fu_407_p4 <= data_in(63 downto 2);
end behav;
