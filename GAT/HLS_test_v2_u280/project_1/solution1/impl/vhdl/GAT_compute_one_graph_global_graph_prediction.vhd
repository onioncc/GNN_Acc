-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_global_graph_prediction is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    task_r : IN STD_LOGIC_VECTOR (63 downto 0);
    h_graph_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    h_graph_V_ce0 : OUT STD_LOGIC;
    h_graph_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    pred_linear_weight_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pred_linear_weight_V_ce0 : OUT STD_LOGIC;
    pred_linear_weight_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    num_features_per_layer_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_features_per_layer_ce0 : OUT STD_LOGIC;
    num_features_per_layer_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GAT_compute_one_graph_global_graph_prediction is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal cmp350_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_reg_153 : STD_LOGIC_VECTOR (63 downto 0);
    signal num_features_per_layer_load_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cmp350_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln199_fu_135_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln199_reg_170 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_idle : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_ready : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_lhs_out : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_lhs_out_ap_vld : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_ce0 : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_ce0 : STD_LOGIC;
    signal grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln198_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal zext_ln736_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln_fu_109_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_global_graph_prediction_Pipeline_VITIS_LOOP_199_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        trunc_ln14 : IN STD_LOGIC_VECTOR (30 downto 0);
        lhs_out : OUT STD_LOGIC_VECTOR (27 downto 0);
        lhs_out_ap_vld : OUT STD_LOGIC;
        h_graph_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_graph_V_ce0 : OUT STD_LOGIC;
        h_graph_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
        pred_linear_weight_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        pred_linear_weight_V_ce0 : OUT STD_LOGIC;
        pred_linear_weight_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99 : component GAT_compute_one_graph_global_graph_prediction_Pipeline_VITIS_LOOP_199_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start,
        ap_done => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done,
        ap_idle => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_idle,
        ap_ready => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_ready,
        trunc_ln14 => trunc_ln199_reg_170,
        lhs_out => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_lhs_out,
        lhs_out_ap_vld => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_lhs_out_ap_vld,
        h_graph_V_address0 => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_address0,
        h_graph_V_ce0 => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_ce0,
        h_graph_V_q0 => h_graph_V_q0,
        pred_linear_weight_V_address0 => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_address0,
        pred_linear_weight_V_ce0 => grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_ce0,
        pred_linear_weight_V_q0 => pred_linear_weight_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if (((m_axi_mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (cmp350_fu_130_p2 = ap_const_lv1_1))) then 
                    grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cmp350_reg_166 <= cmp350_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mem_addr_reg_153 <= sext_ln198_fu_119_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                num_features_per_layer_load_reg_160 <= num_features_per_layer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (cmp350_fu_130_p2 = ap_const_lv1_1))) then
                trunc_ln199_reg_170 <= trunc_ln199_fu_135_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_AWREADY, m_axi_mem_WREADY, m_axi_mem_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, cmp350_reg_166, cmp350_fu_130_p2, grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_mem_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_mem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((m_axi_mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (cmp350_fu_130_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((m_axi_mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (cmp350_fu_130_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((m_axi_mem_AWREADY = ap_const_logic_0) or (grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((m_axi_mem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if ((not(((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(m_axi_mem_BVALID, cmp350_reg_166)
    begin
        if (((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1))) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_mem_AWREADY)
    begin
        if (((m_axi_mem_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_mem_WREADY)
    begin
        if ((m_axi_mem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(m_axi_mem_BVALID)
    begin
        if ((m_axi_mem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(m_axi_mem_AWREADY, grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done)
    begin
        if (((m_axi_mem_AWREADY = ap_const_logic_0) or (grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_mem_WREADY)
    begin
        if ((m_axi_mem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state14_assign_proc : process(m_axi_mem_BVALID, cmp350_reg_166)
    begin
                ap_block_state14 <= ((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_BVALID, ap_CS_fsm_state14, cmp350_reg_166)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or (not(((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state14, cmp350_reg_166)
    begin
        if ((not(((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp350_fu_130_p2 <= "1" when (signed(num_features_per_layer_load_reg_160) > signed(ap_const_lv32_0)) else "0";
    grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start <= grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_start_reg;
    h_graph_V_address0 <= grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_address0;
    h_graph_V_ce0 <= grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_h_graph_V_ce0;
    m_axi_mem_ARADDR <= ap_const_lv64_0;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_0;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;
    m_axi_mem_ARVALID <= ap_const_logic_0;

    m_axi_mem_AWADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_AWREADY, ap_CS_fsm_state8, mem_addr_reg_153, grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done, sext_ln198_fu_119_p1)
    begin
        if ((not(((m_axi_mem_AWREADY = ap_const_logic_0) or (grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_mem_AWADDR <= mem_addr_reg_153;
        elsif ((not(((m_axi_mem_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_mem_AWADDR <= sext_ln198_fu_119_p1;
        else 
            m_axi_mem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_1;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;

    m_axi_mem_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_AWREADY, ap_CS_fsm_state8, grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done)
    begin
        if (((not(((m_axi_mem_AWREADY = ap_const_logic_0) or (grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((m_axi_mem_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axi_mem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_BREADY_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state7, ap_CS_fsm_state14, cmp350_reg_166)
    begin
        if (((not(((m_axi_mem_BVALID = ap_const_logic_0) and (cmp350_reg_166 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state14) and (cmp350_reg_166 = ap_const_lv1_1)) or ((m_axi_mem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            m_axi_mem_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_RREADY <= ap_const_logic_0;

    m_axi_mem_WDATA_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, zext_ln736_fu_142_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_axi_mem_WDATA <= zext_ln736_fu_142_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_axi_mem_WDATA <= ap_const_lv32_0;
        else 
            m_axi_mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_F;
    m_axi_mem_WUSER <= ap_const_lv1_0;

    m_axi_mem_WVALID_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if ((((m_axi_mem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((m_axi_mem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_mem_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_AWREADY, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state7, ap_CS_fsm_state14, cmp350_reg_166)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (cmp350_reg_166 = ap_const_lv1_1)))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    num_features_per_layer_address0 <= ap_const_lv3_2;

    num_features_per_layer_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            num_features_per_layer_ce0 <= ap_const_logic_1;
        else 
            num_features_per_layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pred_linear_weight_V_address0 <= grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_address0;
    pred_linear_weight_V_ce0 <= grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_pred_linear_weight_V_ce0;
        sext_ln198_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_109_p4),64));

    trunc_ln199_fu_135_p1 <= num_features_per_layer_load_reg_160(31 - 1 downto 0);
    trunc_ln_fu_109_p4 <= task_r(63 downto 2);
    zext_ln736_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_global_graph_prediction_Pipeline_VITIS_LOOP_199_2_fu_99_lhs_out),32));
end behav;
