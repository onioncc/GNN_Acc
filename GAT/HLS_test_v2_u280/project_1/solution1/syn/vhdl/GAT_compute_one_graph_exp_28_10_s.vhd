-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_exp_28_10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (27 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of GAT_compute_one_graph_exp_28_10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv28_7FFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "0111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_msb_4_h_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_h_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_h_table_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_x_msb_4_l_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_l_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_l_table_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_773_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_773_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_779 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_779_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_784_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_784_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_784_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_784_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_365_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_790 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_790_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_790_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_790_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_790_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln640_1_fu_375_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln640_1_reg_796 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln640_1_reg_796_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln300_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_reg_816_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_reg_821_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_4_h_V_reg_826 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_x_msb_4_l_V_reg_831 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_msb_3_V_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_836_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_836_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_422_p6 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_5_reg_842 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_5_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_5_reg_842_pp0_iter4_reg : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln_reg_857 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_fu_499_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter6_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter7_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter8_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter9_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter10_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_3_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_3_reg_873_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln640_2_fu_528_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879_pp0_iter6_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879_pp0_iter7_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879_pp0_iter8_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879_pp0_iter9_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_2_reg_879_pp0_iter10_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln1245_1_reg_895 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_2_3_4_lsb_m_1_V_reg_905 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910_pp0_iter12_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910_pp0_iter13_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910_pp0_iter14_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910_pp0_iter15_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_910_pp0_iter16_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln712_2_reg_926 : STD_LOGIC_VECTOR (47 downto 0);
    signal y_V_2_fu_665_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_2_reg_931 : STD_LOGIC_VECTOR (45 downto 0);
    signal overf_1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_1_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln533_1_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln573_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_3_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln640_fu_237_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_227_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_3_fu_241_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1551_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_379_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal overf_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_3_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_2_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_4_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_433_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal rhs_1_fu_472_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln712_fu_486_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln1245_fu_469_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln712_fu_489_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln712_1_fu_495_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1245_1_fu_482_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_7_fu_505_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln712_4_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln712_2_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_8_fu_532_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_545_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Result_4_fu_551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_3_fu_575_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1245_2_fu_572_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_4_fu_583_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1245_3_fu_589_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_592_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_614_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_614_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_614_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal xor_ln288_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln712_3_fu_643_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_646_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal or_ln300_4_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln640_fu_635_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_fu_651_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_11_fu_673_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_689_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_705_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_1_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_89_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_2_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_2_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_756_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to17 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_449_p00 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_449_p10 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_545_p00 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_545_p10 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_614_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_614_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_44ns_42ns_86_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (85 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_50ns_48ns_98_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_50ns_50ns_100_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component GAT_compute_one_graph_exp_28_10_s_f_x_msb_4_h_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component GAT_compute_one_graph_exp_28_10_s_f_x_msb_4_l_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component GAT_compute_one_graph_exp_28_10_s_f_x_msb_3_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GAT_compute_one_graph_exp_28_10_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component GAT_compute_one_graph_exp_28_10_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_4_h_table_V_U : component GAT_compute_one_graph_exp_28_10_s_f_x_msb_4_h_table_V
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_h_table_V_address0,
        ce0 => f_x_msb_4_h_table_V_ce0,
        q0 => f_x_msb_4_h_table_V_q0);

    f_x_msb_4_l_table_V_U : component GAT_compute_one_graph_exp_28_10_s_f_x_msb_4_l_table_V
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_l_table_V_address0,
        ce0 => f_x_msb_4_l_table_V_ce0,
        q0 => f_x_msb_4_l_table_V_q0);

    f_x_msb_3_table_V_U : component GAT_compute_one_graph_exp_28_10_s_f_x_msb_3_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component GAT_compute_one_graph_exp_28_10_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component GAT_compute_one_graph_exp_28_10_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_44ns_42ns_86_3_1_U1255 : component GAT_compute_one_graph_mul_44ns_42ns_86_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 44,
        din1_WIDTH => 42,
        dout_WIDTH => 86)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    mul_50ns_48ns_98_5_1_U1256 : component GAT_compute_one_graph_mul_50ns_48ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 50,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_545_p0,
        din1 => grp_fu_545_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_545_p2);

    mul_50ns_50ns_100_5_1_U1257 : component GAT_compute_one_graph_mul_50ns_50ns_100_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_614_p0,
        din1 => grp_fu_614_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_614_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_910 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_910_pp0_iter12_reg <= exp_x_msb_1_V_reg_910;
                exp_x_msb_1_V_reg_910_pp0_iter13_reg <= exp_x_msb_1_V_reg_910_pp0_iter12_reg;
                exp_x_msb_1_V_reg_910_pp0_iter14_reg <= exp_x_msb_1_V_reg_910_pp0_iter13_reg;
                exp_x_msb_1_V_reg_910_pp0_iter15_reg <= exp_x_msb_1_V_reg_910_pp0_iter14_reg;
                exp_x_msb_1_V_reg_910_pp0_iter16_reg <= exp_x_msb_1_V_reg_910_pp0_iter15_reg;
                exp_x_msb_2_3_4_lsb_m_1_V_reg_905 <= ret_V_fu_592_p2(55 downto 6);
                exp_x_msb_3_4_lsb_m_1_V_reg_867 <= exp_x_msb_3_4_lsb_m_1_V_fu_499_p2;
                exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter10_reg <= exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter9_reg;
                exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter6_reg <= exp_x_msb_3_4_lsb_m_1_V_reg_867;
                exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter7_reg <= exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter6_reg;
                exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter8_reg <= exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter7_reg;
                exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter9_reg <= exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter8_reg;
                f_x_msb_3_V_reg_836_pp0_iter2_reg <= f_x_msb_3_V_reg_836;
                f_x_msb_3_V_reg_836_pp0_iter3_reg <= f_x_msb_3_V_reg_836_pp0_iter2_reg;
                f_x_msb_3_V_reg_836_pp0_iter4_reg <= f_x_msb_3_V_reg_836_pp0_iter3_reg;
                icmp_ln533_1_reg_948 <= icmp_ln533_1_fu_715_p2;
                icmp_ln533_reg_943 <= icmp_ln533_fu_699_p2;
                or_ln300_1_reg_816_pp0_iter10_reg <= or_ln300_1_reg_816_pp0_iter9_reg;
                or_ln300_1_reg_816_pp0_iter11_reg <= or_ln300_1_reg_816_pp0_iter10_reg;
                or_ln300_1_reg_816_pp0_iter12_reg <= or_ln300_1_reg_816_pp0_iter11_reg;
                or_ln300_1_reg_816_pp0_iter13_reg <= or_ln300_1_reg_816_pp0_iter12_reg;
                or_ln300_1_reg_816_pp0_iter14_reg <= or_ln300_1_reg_816_pp0_iter13_reg;
                or_ln300_1_reg_816_pp0_iter15_reg <= or_ln300_1_reg_816_pp0_iter14_reg;
                or_ln300_1_reg_816_pp0_iter16_reg <= or_ln300_1_reg_816_pp0_iter15_reg;
                or_ln300_1_reg_816_pp0_iter2_reg <= or_ln300_1_reg_816_pp0_iter1_reg;
                or_ln300_1_reg_816_pp0_iter3_reg <= or_ln300_1_reg_816_pp0_iter2_reg;
                or_ln300_1_reg_816_pp0_iter4_reg <= or_ln300_1_reg_816_pp0_iter3_reg;
                or_ln300_1_reg_816_pp0_iter5_reg <= or_ln300_1_reg_816_pp0_iter4_reg;
                or_ln300_1_reg_816_pp0_iter6_reg <= or_ln300_1_reg_816_pp0_iter5_reg;
                or_ln300_1_reg_816_pp0_iter7_reg <= or_ln300_1_reg_816_pp0_iter6_reg;
                or_ln300_1_reg_816_pp0_iter8_reg <= or_ln300_1_reg_816_pp0_iter7_reg;
                or_ln300_1_reg_816_pp0_iter9_reg <= or_ln300_1_reg_816_pp0_iter8_reg;
                or_ln300_3_reg_821_pp0_iter10_reg <= or_ln300_3_reg_821_pp0_iter9_reg;
                or_ln300_3_reg_821_pp0_iter11_reg <= or_ln300_3_reg_821_pp0_iter10_reg;
                or_ln300_3_reg_821_pp0_iter12_reg <= or_ln300_3_reg_821_pp0_iter11_reg;
                or_ln300_3_reg_821_pp0_iter13_reg <= or_ln300_3_reg_821_pp0_iter12_reg;
                or_ln300_3_reg_821_pp0_iter14_reg <= or_ln300_3_reg_821_pp0_iter13_reg;
                or_ln300_3_reg_821_pp0_iter15_reg <= or_ln300_3_reg_821_pp0_iter14_reg;
                or_ln300_3_reg_821_pp0_iter16_reg <= or_ln300_3_reg_821_pp0_iter15_reg;
                or_ln300_3_reg_821_pp0_iter2_reg <= or_ln300_3_reg_821_pp0_iter1_reg;
                or_ln300_3_reg_821_pp0_iter3_reg <= or_ln300_3_reg_821_pp0_iter2_reg;
                or_ln300_3_reg_821_pp0_iter4_reg <= or_ln300_3_reg_821_pp0_iter3_reg;
                or_ln300_3_reg_821_pp0_iter5_reg <= or_ln300_3_reg_821_pp0_iter4_reg;
                or_ln300_3_reg_821_pp0_iter6_reg <= or_ln300_3_reg_821_pp0_iter5_reg;
                or_ln300_3_reg_821_pp0_iter7_reg <= or_ln300_3_reg_821_pp0_iter6_reg;
                or_ln300_3_reg_821_pp0_iter8_reg <= or_ln300_3_reg_821_pp0_iter7_reg;
                or_ln300_3_reg_821_pp0_iter9_reg <= or_ln300_3_reg_821_pp0_iter8_reg;
                overf_1_reg_938 <= overf_1_fu_683_p2;
                    p_Result_5_reg_842(6 downto 0) <= p_Result_5_fu_422_p6(6 downto 0);    p_Result_5_reg_842(24 downto 19) <= p_Result_5_fu_422_p6(24 downto 19);    p_Result_5_reg_842(41 downto 40) <= p_Result_5_fu_422_p6(41 downto 40);
                    p_Result_5_reg_842_pp0_iter3_reg(6 downto 0) <= p_Result_5_reg_842(6 downto 0);    p_Result_5_reg_842_pp0_iter3_reg(24 downto 19) <= p_Result_5_reg_842(24 downto 19);    p_Result_5_reg_842_pp0_iter3_reg(41 downto 40) <= p_Result_5_reg_842(41 downto 40);
                    p_Result_5_reg_842_pp0_iter4_reg(6 downto 0) <= p_Result_5_reg_842_pp0_iter3_reg(6 downto 0);    p_Result_5_reg_842_pp0_iter4_reg(24 downto 19) <= p_Result_5_reg_842_pp0_iter3_reg(24 downto 19);    p_Result_5_reg_842_pp0_iter4_reg(41 downto 40) <= p_Result_5_reg_842_pp0_iter3_reg(41 downto 40);
                p_Result_s_reg_779_pp0_iter2_reg <= p_Result_s_reg_779_pp0_iter1_reg;
                p_Result_s_reg_779_pp0_iter3_reg <= p_Result_s_reg_779_pp0_iter2_reg;
                p_Result_s_reg_779_pp0_iter4_reg <= p_Result_s_reg_779_pp0_iter3_reg;
                p_Result_s_reg_779_pp0_iter5_reg <= p_Result_s_reg_779_pp0_iter4_reg;
                p_Result_s_reg_779_pp0_iter6_reg <= p_Result_s_reg_779_pp0_iter5_reg;
                p_Result_s_reg_779_pp0_iter7_reg <= p_Result_s_reg_779_pp0_iter6_reg;
                p_Result_s_reg_779_pp0_iter8_reg <= p_Result_s_reg_779_pp0_iter7_reg;
                p_Result_s_reg_779_pp0_iter9_reg <= p_Result_s_reg_779_pp0_iter8_reg;
                ret_V_3_reg_873 <= ret_V_3_fu_522_p2;
                ret_V_3_reg_873_pp0_iter10_reg <= ret_V_3_reg_873_pp0_iter9_reg;
                ret_V_3_reg_873_pp0_iter6_reg <= ret_V_3_reg_873;
                ret_V_3_reg_873_pp0_iter7_reg <= ret_V_3_reg_873_pp0_iter6_reg;
                ret_V_3_reg_873_pp0_iter8_reg <= ret_V_3_reg_873_pp0_iter7_reg;
                ret_V_3_reg_873_pp0_iter9_reg <= ret_V_3_reg_873_pp0_iter8_reg;
                tmp_16_reg_784_pp0_iter2_reg <= tmp_16_reg_784_pp0_iter1_reg;
                tmp_16_reg_784_pp0_iter3_reg <= tmp_16_reg_784_pp0_iter2_reg;
                tmp_16_reg_784_pp0_iter4_reg <= tmp_16_reg_784_pp0_iter3_reg;
                tmp_17_reg_790_pp0_iter2_reg <= tmp_17_reg_790_pp0_iter1_reg;
                tmp_17_reg_790_pp0_iter3_reg <= tmp_17_reg_790_pp0_iter2_reg;
                tmp_17_reg_790_pp0_iter4_reg <= tmp_17_reg_790_pp0_iter3_reg;
                tmp_reg_773_pp0_iter10_reg <= tmp_reg_773_pp0_iter9_reg;
                tmp_reg_773_pp0_iter11_reg <= tmp_reg_773_pp0_iter10_reg;
                tmp_reg_773_pp0_iter12_reg <= tmp_reg_773_pp0_iter11_reg;
                tmp_reg_773_pp0_iter13_reg <= tmp_reg_773_pp0_iter12_reg;
                tmp_reg_773_pp0_iter14_reg <= tmp_reg_773_pp0_iter13_reg;
                tmp_reg_773_pp0_iter15_reg <= tmp_reg_773_pp0_iter14_reg;
                tmp_reg_773_pp0_iter16_reg <= tmp_reg_773_pp0_iter15_reg;
                tmp_reg_773_pp0_iter2_reg <= tmp_reg_773_pp0_iter1_reg;
                tmp_reg_773_pp0_iter3_reg <= tmp_reg_773_pp0_iter2_reg;
                tmp_reg_773_pp0_iter4_reg <= tmp_reg_773_pp0_iter3_reg;
                tmp_reg_773_pp0_iter5_reg <= tmp_reg_773_pp0_iter4_reg;
                tmp_reg_773_pp0_iter6_reg <= tmp_reg_773_pp0_iter5_reg;
                tmp_reg_773_pp0_iter7_reg <= tmp_reg_773_pp0_iter6_reg;
                tmp_reg_773_pp0_iter8_reg <= tmp_reg_773_pp0_iter7_reg;
                tmp_reg_773_pp0_iter9_reg <= tmp_reg_773_pp0_iter8_reg;
                trunc_ln1245_1_reg_895 <= grp_fu_545_p2(97 downto 52);
                trunc_ln640_2_reg_879 <= trunc_ln640_2_fu_528_p1;
                trunc_ln640_2_reg_879_pp0_iter10_reg <= trunc_ln640_2_reg_879_pp0_iter9_reg;
                trunc_ln640_2_reg_879_pp0_iter6_reg <= trunc_ln640_2_reg_879;
                trunc_ln640_2_reg_879_pp0_iter7_reg <= trunc_ln640_2_reg_879_pp0_iter6_reg;
                trunc_ln640_2_reg_879_pp0_iter8_reg <= trunc_ln640_2_reg_879_pp0_iter7_reg;
                trunc_ln640_2_reg_879_pp0_iter9_reg <= trunc_ln640_2_reg_879_pp0_iter8_reg;
                trunc_ln712_2_reg_926 <= grp_fu_614_p2(99 downto 52);
                trunc_ln_reg_857 <= grp_fu_449_p2(85 downto 55);
                y_V_2_reg_931 <= y_V_2_fu_665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                f_x_msb_3_V_reg_836 <= f_x_msb_3_table_V_q0;
                f_x_msb_4_h_V_reg_826 <= f_x_msb_4_h_table_V_q0;
                f_x_msb_4_l_V_reg_831 <= f_x_msb_4_l_table_V_q0;
                or_ln300_1_reg_816 <= or_ln300_1_fu_404_p2;
                or_ln300_1_reg_816_pp0_iter1_reg <= or_ln300_1_reg_816;
                or_ln300_3_reg_821 <= or_ln300_3_fu_416_p2;
                or_ln300_3_reg_821_pp0_iter1_reg <= or_ln300_3_reg_821;
                p_Result_s_reg_779 <= x(21 downto 15);
                p_Result_s_reg_779_pp0_iter1_reg <= p_Result_s_reg_779;
                tmp_16_reg_784 <= x(14 downto 7);
                tmp_16_reg_784_pp0_iter1_reg <= tmp_16_reg_784;
                tmp_17_reg_790 <= x(6 downto 2);
                tmp_17_reg_790_pp0_iter1_reg <= tmp_17_reg_790;
                tmp_reg_773 <= x(27 downto 27);
                tmp_reg_773_pp0_iter1_reg <= tmp_reg_773;
                trunc_ln640_1_reg_796 <= trunc_ln640_1_fu_375_p1;
                trunc_ln640_1_reg_796_pp0_iter1_reg <= trunc_ln640_1_reg_796;
            end if;
        end if;
    end process;
    p_Result_5_reg_842(18 downto 7) <= "000000000000";
    p_Result_5_reg_842(39 downto 25) <= "000000000000000";
    p_Result_5_reg_842_pp0_iter3_reg(18 downto 7) <= "000000000000";
    p_Result_5_reg_842_pp0_iter3_reg(39 downto 25) <= "000000000000000";
    p_Result_5_reg_842_pp0_iter4_reg(18 downto 7) <= "000000000000";
    p_Result_5_reg_842_pp0_iter4_reg(39 downto 25) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_fu_489_p2 <= std_logic_vector(unsigned(zext_ln712_fu_486_p1) + unsigned(zext_ln1245_fu_469_p1));
    and_ln300_fu_339_p2 <= (icmp_ln1551_fu_327_p2 and icmp_ln1549_fu_333_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to17_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to17 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to17)
    begin
        if (((ap_idle_pp0_0to17 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv28_7FFFFFF when (overf_2_fu_751_p2(0) = '1') else 
        tmp_s_fu_756_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln573_3_fu_567_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_3_4_lsb_m_1_V_fu_499_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_495_p1) + unsigned(zext_ln1245_1_fu_482_p1));
    f_x_msb_2_table_V_address0 <= zext_ln573_2_fu_465_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln573_1_fu_393_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_h_table_V_address0 <= zext_ln573_fu_387_p1(3 - 1 downto 0);

    f_x_msb_4_h_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_l_table_V_address0 <= zext_ln573_fu_387_p1(3 - 1 downto 0);

    f_x_msb_4_l_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_449_p0 <= grp_fu_449_p00(44 - 1 downto 0);
    grp_fu_449_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_fu_433_p4),86));
    grp_fu_449_p1 <= grp_fu_449_p10(42 - 1 downto 0);
    grp_fu_449_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_422_p6),86));
    grp_fu_545_p0 <= grp_fu_545_p00(50 - 1 downto 0);
    grp_fu_545_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_532_p3),98));
    grp_fu_545_p1 <= grp_fu_545_p10(48 - 1 downto 0);
    grp_fu_545_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_reg_867),98));
    grp_fu_614_p0 <= grp_fu_614_p00(50 - 1 downto 0);
    grp_fu_614_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_m_1_V_reg_905),100));
    grp_fu_614_p1 <= grp_fu_614_p10(50 - 1 downto 0);
    grp_fu_614_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_910),100));
    icmp_ln1549_fu_333_p2 <= "1" when (unsigned(p_Result_3_fu_241_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln1551_fu_327_p2 <= "1" when (p_Result_2_fu_227_p4 = ap_const_lv5_F) else "0";
    icmp_ln533_1_fu_715_p2 <= "0" when (tmp_15_fu_705_p4 = ap_const_lv7_0) else "1";
    icmp_ln533_fu_699_p2 <= "0" when (tmp_14_fu_689_p4 = ap_const_lv3_0) else "1";
    or_ln300_1_fu_404_p2 <= (xor_ln222_2_fu_279_p2 or or_ln300_fu_398_p2);
    or_ln300_2_fu_410_p2 <= (xor_ln222_fu_321_p2 or and_ln300_fu_339_p2);
    or_ln300_3_fu_416_p2 <= (xor_ln222_4_fu_307_p2 or or_ln300_2_fu_410_p2);
    or_ln300_4_fu_661_p2 <= (or_ln300_3_reg_821_pp0_iter16_reg or or_ln300_1_reg_816_pp0_iter16_reg);
    or_ln300_fu_398_p2 <= (xor_ln222_3_fu_293_p2 or overf_fu_265_p2);
    or_ln533_1_fu_740_p2 <= (p_Result_s_89_fu_721_p3 or or_ln533_fu_735_p2);
    or_ln533_2_fu_746_p2 <= (or_ln533_1_fu_740_p2 or icmp_ln533_reg_943);
    or_ln533_fu_735_p2 <= (p_Result_1_fu_728_p3 or overf_1_reg_938);
    overf_1_fu_683_p2 <= "0" when (tmp_11_fu_673_p4 = ap_const_lv2_0) else "1";
    overf_2_fu_751_p2 <= (or_ln533_2_fu_746_p2 or icmp_ln533_1_reg_948);
    overf_fu_265_p2 <= (tmp_fu_249_p3 xor tmp_3_fu_257_p3);
    p_Result_1_fu_728_p3 <= y_V_2_reg_931(42 downto 42);
    p_Result_2_fu_227_p4 <= x(22 downto 18);
    p_Result_3_fu_241_p3 <= (trunc_ln640_fu_237_p1 & ap_const_lv5_0);
    p_Result_4_fu_551_p3 <= (tmp_reg_773_pp0_iter9_reg & p_Result_s_reg_779_pp0_iter9_reg);
    p_Result_5_fu_422_p6 <= ((((trunc_ln640_1_reg_796_pp0_iter1_reg & ap_const_lv15_0) & f_x_msb_4_h_V_reg_826) & ap_const_lv12_0) & f_x_msb_4_l_V_reg_831);
    p_Result_6_fu_433_p4 <= ((tmp_17_reg_790_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_836);
    p_Result_7_fu_505_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_8_fu_532_p3 <= (ret_V_3_reg_873 & trunc_ln640_2_reg_879);
    p_Result_s_89_fu_721_p3 <= y_V_2_reg_931(43 downto 43);
    ret_V_3_fu_522_p2 <= std_logic_vector(unsigned(zext_ln712_4_fu_519_p1) + unsigned(zext_ln712_2_fu_515_p1));
    ret_V_4_fu_583_p2 <= std_logic_vector(unsigned(rhs_3_fu_575_p4) + unsigned(zext_ln1245_2_fu_572_p1));
    ret_V_fu_592_p2 <= std_logic_vector(unsigned(ret_V_4_fu_583_p2) + unsigned(zext_ln1245_3_fu_589_p1));
    rhs_1_fu_472_p5 <= (((tmp_17_reg_790_pp0_iter4_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_836_pp0_iter4_reg) & ap_const_lv3_0);
    rhs_3_fu_575_p4 <= ((ret_V_3_reg_873_pp0_iter10_reg & trunc_ln640_2_reg_879_pp0_iter10_reg) & ap_const_lv6_0);
    select_ln640_fu_635_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln288_fu_630_p2(0) = '1') else 
        ap_const_lv46_0;
    tmp_11_fu_673_p4 <= y_V_2_fu_665_p3(45 downto 44);
    tmp_14_fu_689_p4 <= y_V_2_fu_665_p3(41 downto 39);
    tmp_15_fu_705_p4 <= y_V_2_fu_665_p3(38 downto 32);
    tmp_17_fu_365_p4 <= x(6 downto 2);
    tmp_18_fu_379_p3 <= (trunc_ln640_1_fu_375_p1 & ap_const_lv1_0);
    tmp_3_fu_257_p3 <= x(22 downto 22);
    tmp_4_fu_271_p3 <= x(23 downto 23);
    tmp_5_fu_285_p3 <= x(24 downto 24);
    tmp_6_fu_299_p3 <= x(25 downto 25);
    tmp_7_fu_313_p3 <= x(26 downto 26);
    tmp_fu_249_p3 <= x(27 downto 27);
    tmp_s_fu_756_p4 <= y_V_2_reg_931(32 downto 5);
    trunc_ln640_1_fu_375_p1 <= x(2 - 1 downto 0);
    trunc_ln640_2_fu_528_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln640_fu_237_p1 <= x(18 - 1 downto 0);
    xor_ln222_2_fu_279_p2 <= (tmp_fu_249_p3 xor tmp_4_fu_271_p3);
    xor_ln222_3_fu_293_p2 <= (tmp_fu_249_p3 xor tmp_5_fu_285_p3);
    xor_ln222_4_fu_307_p2 <= (tmp_fu_249_p3 xor tmp_6_fu_299_p3);
    xor_ln222_fu_321_p2 <= (tmp_fu_249_p3 xor tmp_7_fu_313_p3);
    xor_ln288_fu_630_p2 <= (tmp_reg_773_pp0_iter16_reg xor ap_const_lv1_1);
    y_V_2_fu_665_p3 <= 
        select_ln640_fu_635_p3 when (or_ln300_4_fu_661_p2(0) = '1') else 
        y_V_fu_651_p4;
    y_V_fu_651_p4 <= y_l_V_fu_646_p2(49 downto 4);
    y_l_V_fu_646_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_910_pp0_iter16_reg) + unsigned(zext_ln712_3_fu_643_p1));
    zext_ln1245_1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_1_fu_472_p5),48));
    zext_ln1245_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1245_1_reg_895),56));
    zext_ln1245_3_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_reg_867_pp0_iter10_reg),56));
    zext_ln1245_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_857),43));
    zext_ln573_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_365_p4),64));
    zext_ln573_2_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_784_pp0_iter3_reg),64));
    zext_ln573_3_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_551_p3),64));
    zext_ln573_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_379_p3),64));
    zext_ln712_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_fu_489_p2),48));
    zext_ln712_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_505_p4),9));
    zext_ln712_3_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_reg_926),50));
    zext_ln712_4_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_784_pp0_iter4_reg),9));
    zext_ln712_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_reg_842_pp0_iter4_reg),43));
end behav;
