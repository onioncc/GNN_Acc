-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_attention_coefficients_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    all_scores_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce0 : OUT STD_LOGIC;
    all_scores_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    attention_coefficients_sum_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    attention_coefficients_sum_V_ce1 : OUT STD_LOGIC;
    attention_coefficients_sum_V_we1 : OUT STD_LOGIC;
    attention_coefficients_sum_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    connectivity_mask_final_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    connectivity_mask_final_ce0 : OUT STD_LOGIC;
    connectivity_mask_final_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_exp_28_10_s_fu_5295_p_din1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_5295_p_dout0 : IN STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_5295_p_start : OUT STD_LOGIC;
    grp_exp_28_10_s_fu_5295_p_ready : IN STD_LOGIC;
    grp_exp_28_10_s_fu_5295_p_done : IN STD_LOGIC;
    grp_exp_28_10_s_fu_5295_p_idle : IN STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_compute_attention_coefficients_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_5A4 : STD_LOGIC_VECTOR (10 downto 0) := "10110100100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_169 : STD_LOGIC_VECTOR (9 downto 0) := "0101101001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv12_64 : STD_LOGIC_VECTOR (11 downto 0) := "000001100100";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln108_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln109_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln109_reg_510_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln109_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_reg_515_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_reg_515_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_reg_515_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_2_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln109_2_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln111_1_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_reg_531_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545 : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter16_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter17_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter18_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter19_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_545_pp0_iter20_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln113_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_565_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_V_reg_574 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_exp_28_10_s_fu_156_ap_ready : STD_LOGIC;
    signal grp_exp_28_10_s_fu_156_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln116_3_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_6_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_V_fu_84 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_V_1_fu_402_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln109_1_fu_395_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n2_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln111_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n1_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln109_3_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nh_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_nh_load : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln108_1_fu_235_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten14_fu_104 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten14_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln108_1_fu_211_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln108_fu_223_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln109_1_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln111_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln108_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln108_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln108_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln109_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_421_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_431_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_440_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_421_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_421_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_421_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_431_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_431_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_440_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_440_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_exp_28_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (27 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_3ns_7ns_5ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_5ns_7ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_10ns_7ns_5ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_7ns_5ns_10_4_1_U1917 : component GAT_compute_one_graph_mac_muladd_3ns_7ns_5ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_421_p0,
        din1 => grp_fu_421_p1,
        din2 => grp_fu_421_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_421_p3);

    mac_muladd_5ns_7ns_5ns_12_4_1_U1918 : component GAT_compute_one_graph_mac_muladd_5ns_7ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        din2 => grp_fu_431_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p3);

    mac_muladd_10ns_7ns_5ns_16_4_1_U1919 : component GAT_compute_one_graph_mac_muladd_10ns_7ns_5ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        din2 => grp_fu_440_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p3);

    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_28_10_s_fu_156_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_28_10_s_fu_156_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln113_reg_565 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_28_10_s_fu_156_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_28_10_s_fu_156_ap_ready = ap_const_logic_1)) then 
                    grp_exp_28_10_s_fu_156_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten14_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln108_fu_205_p2 = ap_const_lv1_0))) then 
                    indvar_flatten14_fu_104 <= add_ln108_1_fu_211_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_104 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln108_fu_205_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_96 <= select_ln109_3_fu_256_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n1_fu_92 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    n1_fu_92 <= select_ln109_2_fu_328_p3;
                end if;
            end if; 
        end if;
    end process;

    n2_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_88 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    n2_fu_88 <= add_ln111_fu_340_p2;
                end if;
            end if; 
        end if;
    end process;

    nh_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln108_fu_205_p2 = ap_const_lv1_0))) then 
                    nh_fu_100 <= select_ln108_1_fu_235_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    nh_fu_100 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    sum_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sum_V_fu_84 <= ap_const_lv28_0;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln113_reg_565_pp0_iter19_reg = ap_const_lv1_1))) then 
                    sum_V_fu_84 <= select_ln109_1_fu_395_p3;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln113_reg_565_pp0_iter19_reg = ap_const_lv1_0))) then 
                    sum_V_fu_84 <= sum_V_1_fu_402_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                attention_coefficients_sum_V_addr_reg_545 <= zext_ln116_3_fu_365_p1(9 - 1 downto 0);
                attention_coefficients_sum_V_addr_reg_545_pp0_iter10_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter9_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter11_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter10_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter12_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter11_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter13_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter12_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter14_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter13_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter15_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter14_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter16_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter15_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter17_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter16_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter18_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter17_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter19_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter18_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter20_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter19_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter4_reg <= attention_coefficients_sum_V_addr_reg_545;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter5_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter4_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter6_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter5_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter7_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter6_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter8_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter7_reg;
                attention_coefficients_sum_V_addr_reg_545_pp0_iter9_reg <= attention_coefficients_sum_V_addr_reg_545_pp0_iter8_reg;
                icmp_ln111_1_reg_531_pp0_iter10_reg <= icmp_ln111_1_reg_531_pp0_iter9_reg;
                icmp_ln111_1_reg_531_pp0_iter11_reg <= icmp_ln111_1_reg_531_pp0_iter10_reg;
                icmp_ln111_1_reg_531_pp0_iter12_reg <= icmp_ln111_1_reg_531_pp0_iter11_reg;
                icmp_ln111_1_reg_531_pp0_iter13_reg <= icmp_ln111_1_reg_531_pp0_iter12_reg;
                icmp_ln111_1_reg_531_pp0_iter14_reg <= icmp_ln111_1_reg_531_pp0_iter13_reg;
                icmp_ln111_1_reg_531_pp0_iter15_reg <= icmp_ln111_1_reg_531_pp0_iter14_reg;
                icmp_ln111_1_reg_531_pp0_iter16_reg <= icmp_ln111_1_reg_531_pp0_iter15_reg;
                icmp_ln111_1_reg_531_pp0_iter17_reg <= icmp_ln111_1_reg_531_pp0_iter16_reg;
                icmp_ln111_1_reg_531_pp0_iter18_reg <= icmp_ln111_1_reg_531_pp0_iter17_reg;
                icmp_ln111_1_reg_531_pp0_iter19_reg <= icmp_ln111_1_reg_531_pp0_iter18_reg;
                icmp_ln111_1_reg_531_pp0_iter20_reg <= icmp_ln111_1_reg_531_pp0_iter19_reg;
                icmp_ln111_1_reg_531_pp0_iter2_reg <= icmp_ln111_1_reg_531;
                icmp_ln111_1_reg_531_pp0_iter3_reg <= icmp_ln111_1_reg_531_pp0_iter2_reg;
                icmp_ln111_1_reg_531_pp0_iter4_reg <= icmp_ln111_1_reg_531_pp0_iter3_reg;
                icmp_ln111_1_reg_531_pp0_iter5_reg <= icmp_ln111_1_reg_531_pp0_iter4_reg;
                icmp_ln111_1_reg_531_pp0_iter6_reg <= icmp_ln111_1_reg_531_pp0_iter5_reg;
                icmp_ln111_1_reg_531_pp0_iter7_reg <= icmp_ln111_1_reg_531_pp0_iter6_reg;
                icmp_ln111_1_reg_531_pp0_iter8_reg <= icmp_ln111_1_reg_531_pp0_iter7_reg;
                icmp_ln111_1_reg_531_pp0_iter9_reg <= icmp_ln111_1_reg_531_pp0_iter8_reg;
                icmp_ln113_reg_565 <= icmp_ln113_fu_382_p2;
                icmp_ln113_reg_565_pp0_iter10_reg <= icmp_ln113_reg_565_pp0_iter9_reg;
                icmp_ln113_reg_565_pp0_iter11_reg <= icmp_ln113_reg_565_pp0_iter10_reg;
                icmp_ln113_reg_565_pp0_iter12_reg <= icmp_ln113_reg_565_pp0_iter11_reg;
                icmp_ln113_reg_565_pp0_iter13_reg <= icmp_ln113_reg_565_pp0_iter12_reg;
                icmp_ln113_reg_565_pp0_iter14_reg <= icmp_ln113_reg_565_pp0_iter13_reg;
                icmp_ln113_reg_565_pp0_iter15_reg <= icmp_ln113_reg_565_pp0_iter14_reg;
                icmp_ln113_reg_565_pp0_iter16_reg <= icmp_ln113_reg_565_pp0_iter15_reg;
                icmp_ln113_reg_565_pp0_iter17_reg <= icmp_ln113_reg_565_pp0_iter16_reg;
                icmp_ln113_reg_565_pp0_iter18_reg <= icmp_ln113_reg_565_pp0_iter17_reg;
                icmp_ln113_reg_565_pp0_iter19_reg <= icmp_ln113_reg_565_pp0_iter18_reg;
                icmp_ln113_reg_565_pp0_iter6_reg <= icmp_ln113_reg_565;
                icmp_ln113_reg_565_pp0_iter7_reg <= icmp_ln113_reg_565_pp0_iter6_reg;
                icmp_ln113_reg_565_pp0_iter8_reg <= icmp_ln113_reg_565_pp0_iter7_reg;
                icmp_ln113_reg_565_pp0_iter9_reg <= icmp_ln113_reg_565_pp0_iter8_reg;
                or_ln109_reg_510_pp0_iter10_reg <= or_ln109_reg_510_pp0_iter9_reg;
                or_ln109_reg_510_pp0_iter11_reg <= or_ln109_reg_510_pp0_iter10_reg;
                or_ln109_reg_510_pp0_iter12_reg <= or_ln109_reg_510_pp0_iter11_reg;
                or_ln109_reg_510_pp0_iter13_reg <= or_ln109_reg_510_pp0_iter12_reg;
                or_ln109_reg_510_pp0_iter14_reg <= or_ln109_reg_510_pp0_iter13_reg;
                or_ln109_reg_510_pp0_iter15_reg <= or_ln109_reg_510_pp0_iter14_reg;
                or_ln109_reg_510_pp0_iter16_reg <= or_ln109_reg_510_pp0_iter15_reg;
                or_ln109_reg_510_pp0_iter17_reg <= or_ln109_reg_510_pp0_iter16_reg;
                or_ln109_reg_510_pp0_iter18_reg <= or_ln109_reg_510_pp0_iter17_reg;
                or_ln109_reg_510_pp0_iter19_reg <= or_ln109_reg_510_pp0_iter18_reg;
                or_ln109_reg_510_pp0_iter2_reg <= or_ln109_reg_510;
                or_ln109_reg_510_pp0_iter3_reg <= or_ln109_reg_510_pp0_iter2_reg;
                or_ln109_reg_510_pp0_iter4_reg <= or_ln109_reg_510_pp0_iter3_reg;
                or_ln109_reg_510_pp0_iter5_reg <= or_ln109_reg_510_pp0_iter4_reg;
                or_ln109_reg_510_pp0_iter6_reg <= or_ln109_reg_510_pp0_iter5_reg;
                or_ln109_reg_510_pp0_iter7_reg <= or_ln109_reg_510_pp0_iter6_reg;
                or_ln109_reg_510_pp0_iter8_reg <= or_ln109_reg_510_pp0_iter7_reg;
                or_ln109_reg_510_pp0_iter9_reg <= or_ln109_reg_510_pp0_iter8_reg;
                select_ln109_reg_515_pp0_iter2_reg <= select_ln109_reg_515;
                select_ln109_reg_515_pp0_iter3_reg <= select_ln109_reg_515_pp0_iter2_reg;
                select_ln109_reg_515_pp0_iter4_reg <= select_ln109_reg_515_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln111_1_reg_531 <= icmp_ln111_1_fu_346_p2;
                or_ln109_reg_510 <= or_ln109_fu_315_p2;
                select_ln109_2_reg_521 <= select_ln109_2_fu_328_p3;
                select_ln109_reg_515 <= select_ln109_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln108_fu_205_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln109_reg_498 <= icmp_ln109_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_reg_565_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                op2_V_reg_574 <= grp_exp_28_10_s_fu_5295_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln108_1_fu_211_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten14_load) + unsigned(ap_const_lv11_1));
    add_ln108_fu_223_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_nh_load) + unsigned(ap_const_lv3_1));
    add_ln109_1_fu_250_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln109_fu_309_p2 <= std_logic_vector(unsigned(select_ln108_fu_285_p3) + unsigned(ap_const_lv5_1));
    add_ln111_fu_340_p2 <= std_logic_vector(unsigned(select_ln109_fu_320_p3) + unsigned(ap_const_lv5_1));
    all_scores_V_address0 <= zext_ln116_6_fu_388_p1(16 - 1 downto 0);
    all_scores_V_address1 <= zext_ln116_6_fu_388_p1(16 - 1 downto 0);

    all_scores_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            all_scores_V_ce0 <= ap_const_logic_1;
        else 
            all_scores_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    all_scores_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= ap_const_lv28_0;

    all_scores_V_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, icmp_ln113_reg_565)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln113_reg_565 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln108_fu_303_p2 <= (xor_ln108_fu_292_p2 and icmp_ln111_fu_297_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln108_fu_205_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln108_fu_205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten14_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten14_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten14_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten14_load <= indvar_flatten14_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_nh_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nh_fu_100)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_nh_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_nh_load <= nh_fu_100;
        end if; 
    end process;

    attention_coefficients_sum_V_address1 <= attention_coefficients_sum_V_addr_reg_545_pp0_iter20_reg;

    attention_coefficients_sum_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            attention_coefficients_sum_V_ce1 <= ap_const_logic_1;
        else 
            attention_coefficients_sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    attention_coefficients_sum_V_d1 <= sum_V_fu_84;

    attention_coefficients_sum_V_we1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001, icmp_ln111_1_reg_531_pp0_iter20_reg)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln111_1_reg_531_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            attention_coefficients_sum_V_we1 <= ap_const_logic_1;
        else 
            attention_coefficients_sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    connectivity_mask_final_address0 <= zext_ln113_fu_375_p1(14 - 1 downto 0);

    connectivity_mask_final_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            connectivity_mask_final_ce0 <= ap_const_logic_1;
        else 
            connectivity_mask_final_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_28_10_s_fu_156_ap_ready <= grp_exp_28_10_s_fu_5295_p_ready;
    grp_exp_28_10_s_fu_5295_p_din1 <= all_scores_V_q0;
    grp_exp_28_10_s_fu_5295_p_start <= grp_exp_28_10_s_fu_156_ap_start_reg;
    grp_fu_421_p0 <= grp_fu_421_p00(3 - 1 downto 0);
    grp_fu_421_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln108_1_fu_235_p3),10));
    grp_fu_421_p1 <= ap_const_lv10_64(7 - 1 downto 0);
    grp_fu_421_p2 <= grp_fu_421_p20(5 - 1 downto 0);
    grp_fu_421_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_2_reg_521),10));
    grp_fu_431_p0 <= grp_fu_431_p00(5 - 1 downto 0);
    grp_fu_431_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_2_fu_328_p3),12));
    grp_fu_431_p1 <= ap_const_lv12_64(7 - 1 downto 0);
    grp_fu_431_p2 <= grp_fu_431_p20(5 - 1 downto 0);
    grp_fu_431_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_reg_515_pp0_iter2_reg),12));
    grp_fu_440_p0 <= grp_fu_440_p00(10 - 1 downto 0);
    grp_fu_440_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_421_p3),16));
    grp_fu_440_p1 <= ap_const_lv16_64(7 - 1 downto 0);
    grp_fu_440_p2 <= grp_fu_440_p20(5 - 1 downto 0);
    grp_fu_440_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_reg_515_pp0_iter4_reg),16));
    icmp_ln108_fu_205_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten14_load = ap_const_lv11_5A4) else "0";
    icmp_ln109_fu_229_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv10_169) else "0";
    icmp_ln111_1_fu_346_p2 <= "1" when (add_ln111_fu_340_p2 = ap_const_lv5_13) else "0";
    icmp_ln111_fu_297_p2 <= "1" when (n2_fu_88 = ap_const_lv5_13) else "0";
    icmp_ln113_fu_382_p2 <= "1" when (connectivity_mask_final_q0 = ap_const_lv32_80000000) else "0";
    or_ln109_fu_315_p2 <= (icmp_ln109_reg_498 or and_ln108_fu_303_p2);
    select_ln108_1_fu_235_p3 <= 
        add_ln108_fu_223_p2 when (icmp_ln109_fu_229_p2(0) = '1') else 
        ap_sig_allocacmp_nh_load;
    select_ln108_fu_285_p3 <= 
        ap_const_lv5_0 when (icmp_ln109_reg_498(0) = '1') else 
        n1_fu_92;
    select_ln109_1_fu_395_p3 <= 
        ap_const_lv28_0 when (or_ln109_reg_510_pp0_iter19_reg(0) = '1') else 
        sum_V_fu_84;
    select_ln109_2_fu_328_p3 <= 
        add_ln109_fu_309_p2 when (and_ln108_fu_303_p2(0) = '1') else 
        select_ln108_fu_285_p3;
    select_ln109_3_fu_256_p3 <= 
        ap_const_lv10_1 when (icmp_ln109_fu_229_p2(0) = '1') else 
        add_ln109_1_fu_250_p2;
    select_ln109_fu_320_p3 <= 
        ap_const_lv5_0 when (or_ln109_fu_315_p2(0) = '1') else 
        n2_fu_88;
    sum_V_1_fu_402_p2 <= std_logic_vector(unsigned(op2_V_reg_574) + unsigned(select_ln109_1_fu_395_p3));
    xor_ln108_fu_292_p2 <= (icmp_ln109_reg_498 xor ap_const_lv1_1);
    zext_ln113_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_431_p3),64));
    zext_ln116_3_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_421_p3),64));
    zext_ln116_6_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_440_p3),64));
end behav;
