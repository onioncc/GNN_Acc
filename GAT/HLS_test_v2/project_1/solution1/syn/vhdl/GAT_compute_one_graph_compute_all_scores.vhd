-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_all_scores is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    scores_source_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_source_V_ce0 : OUT STD_LOGIC;
    scores_source_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    scores_target_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_target_V_ce0 : OUT STD_LOGIC;
    scores_target_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of GAT_compute_one_graph_compute_all_scores is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_5A4 : STD_LOGIC_VECTOR (10 downto 0) := "10110100100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_169 : STD_LOGIC_VECTOR (9 downto 0) := "0101101001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv45_CCCC : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001100110011001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln91_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_545_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_545_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_fu_201_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln92_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_554_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_1_fu_213_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln91_1_reg_562 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln91_1_reg_562_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln91_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln91_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln91_reg_567_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_275_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_reg_573 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_reg_573_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_reg_573_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_reg_573_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln91_1_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln91_1_reg_584 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln98_fu_320_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln98_reg_589 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln91_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln91_reg_594 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln92_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln92_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_1_fu_336_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln92_1_reg_605 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_fu_403_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_620 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_620_pp0_iter5_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_620_pp0_iter6_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1548_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_625_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_625_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_489_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln98_1_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal select_ln92_2_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln712_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_4_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln93_fu_283_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n1_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln92_3_fu_227_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nh_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_nh_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten20_fu_104 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten20_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_1_fu_192_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln92_1_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln93_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln91_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln91_1_fu_311_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln91_1_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln98_fu_320_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln98_fu_320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln91_fu_301_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln92_cast_fu_353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_97_fu_356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln91_2_fu_348_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln92_2_fu_364_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln98_2_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln712_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln712_fu_393_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln92_fu_389_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal temp_V_fu_397_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_V_fu_423_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln96_fu_442_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_fu_448_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1245_fu_456_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_fu_460_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_463_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_480_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_480_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_489_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_489_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_498_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_480_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_480_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_489_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_489_p30 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_1_fu_311_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln98_fu_320_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_3ns_8ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_3ns_8ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_3ns_7ns_5ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_ama_addmuladd_10ns_5ns_7ns_5ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_3ns_8ns_9_1_1_U1893 : component GAT_compute_one_graph_mul_3ns_8ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln91_1_fu_311_p0,
        din1 => mul_ln91_1_fu_311_p1,
        dout => mul_ln91_1_fu_311_p2);

    mul_3ns_8ns_10_1_1_U1894 : component GAT_compute_one_graph_mul_3ns_8ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln98_fu_320_p0,
        din1 => mul_ln98_fu_320_p1,
        dout => mul_ln98_fu_320_p2);

    mac_muladd_3ns_7ns_5ns_9_4_1_U1895 : component GAT_compute_one_graph_mac_muladd_3ns_7ns_5ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 7,
        din2_WIDTH => 5,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_480_p0,
        din1 => grp_fu_480_p1,
        din2 => grp_fu_480_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_480_p3);

    ama_addmuladd_10ns_5ns_7ns_5ns_16_4_1_U1896 : component GAT_compute_one_graph_ama_addmuladd_10ns_5ns_7ns_5ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        din2_WIDTH => 7,
        din3_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln98_reg_589,
        din1 => grp_fu_489_p1,
        din2 => grp_fu_489_p2,
        din3 => grp_fu_489_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p4);

    mul_mul_28s_16ns_45_4_1_U1897 : component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 28,
        din1_WIDTH => 16,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_V_fu_423_p3,
        din1 => grp_fu_498_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p2);

    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten20_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten20_fu_104 <= add_ln91_1_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten20_fu_104 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_96 <= select_ln92_3_fu_227_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n1_fu_92 <= ap_const_lv5_0;
                elsif (((icmp_ln91_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    n1_fu_92 <= select_ln92_1_fu_336_p3;
                end if;
            end if; 
        end if;
    end process;

    n2_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_88 <= ap_const_lv5_0;
                elsif (((icmp_ln91_reg_545 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    n2_fu_88 <= add_ln93_fu_283_p2;
                end if;
            end if; 
        end if;
    end process;

    nh_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    nh_fu_100 <= select_ln91_1_fu_213_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    nh_fu_100 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_186_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln91_reg_549 <= add_ln91_fu_201_p2;
                icmp_ln92_reg_554 <= icmp_ln92_fu_207_p2;
                select_ln91_1_reg_562 <= select_ln91_1_fu_213_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln91_reg_549_pp0_iter1_reg <= add_ln91_reg_549;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln91_reg_545 <= icmp_ln91_fu_186_p2;
                icmp_ln91_reg_545_pp0_iter1_reg <= icmp_ln91_reg_545;
                icmp_ln92_reg_554_pp0_iter1_reg <= icmp_ln92_reg_554;
                select_ln91_1_reg_562_pp0_iter1_reg <= select_ln91_1_reg_562;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln92_reg_600 <= add_ln92_fu_330_p2;
                mul_ln98_reg_589 <= mul_ln98_fu_320_p2;
                select_ln92_1_reg_605 <= select_ln92_1_fu_336_p3;
                trunc_ln91_reg_594 <= trunc_ln91_fu_326_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln95_reg_620 <= add_ln95_fu_403_p2;
                add_ln95_reg_620_pp0_iter5_reg <= add_ln95_reg_620;
                add_ln95_reg_620_pp0_iter6_reg <= add_ln95_reg_620_pp0_iter5_reg;
                and_ln91_reg_567_pp0_iter2_reg <= and_ln91_reg_567;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln1548_reg_625 <= icmp_ln1548_fu_409_p2;
                icmp_ln1548_reg_625_pp0_iter5_reg <= icmp_ln1548_reg_625;
                icmp_ln1548_reg_625_pp0_iter6_reg <= icmp_ln1548_reg_625_pp0_iter5_reg;
                icmp_ln91_reg_545_pp0_iter2_reg <= icmp_ln91_reg_545_pp0_iter1_reg;
                icmp_ln92_reg_554_pp0_iter2_reg <= icmp_ln92_reg_554_pp0_iter1_reg;
                select_ln92_reg_573_pp0_iter2_reg <= select_ln92_reg_573;
                select_ln92_reg_573_pp0_iter3_reg <= select_ln92_reg_573_pp0_iter2_reg;
                select_ln92_reg_573_pp0_iter4_reg <= select_ln92_reg_573_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                add_ln98_1_reg_640 <= grp_fu_489_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_545 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln91_reg_567 <= and_ln91_fu_264_p2;
                select_ln92_reg_573 <= select_ln92_fu_275_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln92_reg_554_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln91_reg_567))) then
                mul_ln91_1_reg_584 <= mul_ln91_1_fu_311_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_fu_379_p2 <= std_logic_vector(unsigned(trunc_ln91_reg_594) + unsigned(zext_ln98_2_fu_376_p1));
    add_ln91_1_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten20_load) + unsigned(ap_const_lv11_1));
    add_ln91_fu_201_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_nh_1) + unsigned(ap_const_lv3_1));
    add_ln92_1_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln92_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_600),9));
    add_ln92_fu_330_p2 <= std_logic_vector(unsigned(select_ln91_fu_301_p3) + unsigned(ap_const_lv5_1));
    add_ln93_fu_283_p2 <= std_logic_vector(unsigned(select_ln92_fu_275_p3) + unsigned(ap_const_lv5_1));
    add_ln95_fu_403_p2 <= std_logic_vector(unsigned(trunc_ln712_fu_393_p1) + unsigned(trunc_ln92_fu_389_p1));
    all_scores_V_address1 <= zext_ln98_4_fu_438_p1(16 - 1 downto 0);

    all_scores_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= ret_V_fu_463_p2(45 downto 18);

    all_scores_V_we1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln91_fu_264_p2 <= (xor_ln91_fu_253_p2 and icmp_ln93_fu_258_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_186_p2)
    begin
        if (((icmp_ln91_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln91_reg_545_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln91_reg_545_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten20_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten20_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten20_load <= indvar_flatten20_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_nh_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nh_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_nh_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_nh_1 <= nh_fu_100;
        end if; 
    end process;

    empty_97_fu_356_p2 <= std_logic_vector(unsigned(trunc_ln91_reg_594) + unsigned(add_ln92_cast_fu_353_p1));
    grp_fu_480_p0 <= grp_fu_480_p00(3 - 1 downto 0);
    grp_fu_480_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_nh_1),9));
    grp_fu_480_p1 <= ap_const_lv9_64(7 - 1 downto 0);
    grp_fu_480_p2 <= grp_fu_480_p20(5 - 1 downto 0);
    grp_fu_480_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n1_fu_92),9));
    grp_fu_489_p1 <= grp_fu_489_p10(5 - 1 downto 0);
    grp_fu_489_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_1_reg_605),10));
    grp_fu_489_p2 <= ap_const_lv16_64(7 - 1 downto 0);
    grp_fu_489_p3 <= grp_fu_489_p30(5 - 1 downto 0);
    grp_fu_489_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_reg_573_pp0_iter4_reg),16));
    grp_fu_498_p1 <= ap_const_lv45_CCCC(16 - 1 downto 0);
    icmp_ln1548_fu_409_p2 <= "1" when (signed(temp_V_fu_397_p2) > signed(ap_const_lv28_0)) else "0";
    icmp_ln91_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten20_load = ap_const_lv11_5A4) else "0";
    icmp_ln92_fu_207_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_169) else "0";
    icmp_ln93_fu_258_p2 <= "1" when (n2_fu_88 = ap_const_lv5_13) else "0";
    lhs_fu_448_p3 <= (select_ln96_fu_442_p3 & ap_const_lv18_0);
    min_V_fu_423_p3 <= 
        temp_V_fu_397_p2 when (tmp_fu_415_p3(0) = '1') else 
        ap_const_lv28_0;
    mul_ln91_1_fu_311_p0 <= mul_ln91_1_fu_311_p00(3 - 1 downto 0);
    mul_ln91_1_fu_311_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_549_pp0_iter1_reg),9));
    mul_ln91_1_fu_311_p1 <= ap_const_lv9_64(8 - 1 downto 0);
    mul_ln98_fu_320_p0 <= mul_ln98_fu_320_p00(3 - 1 downto 0);
    mul_ln98_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_reg_562_pp0_iter1_reg),10));
    mul_ln98_fu_320_p1 <= ap_const_lv10_64(8 - 1 downto 0);
    or_ln92_fu_270_p2 <= (icmp_ln92_reg_554 or and_ln91_fu_264_p2);
    ret_V_fu_463_p2 <= std_logic_vector(unsigned(zext_ln1245_fu_456_p1) + unsigned(sext_ln712_fu_460_p1));
    scores_source_V_address0 <= select_ln92_2_cast_fu_371_p1(9 - 1 downto 0);

    scores_source_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_source_V_ce0 <= ap_const_logic_1;
        else 
            scores_source_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scores_target_V_address0 <= zext_ln712_fu_384_p1(9 - 1 downto 0);

    scores_target_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_target_V_ce0 <= ap_const_logic_1;
        else 
            scores_target_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln91_1_fu_213_p3 <= 
        add_ln91_fu_201_p2 when (icmp_ln92_fu_207_p2(0) = '1') else 
        ap_sig_allocacmp_nh_1;
    select_ln91_2_fu_348_p3 <= 
        mul_ln91_1_reg_584 when (icmp_ln92_reg_554_pp0_iter2_reg(0) = '1') else 
        grp_fu_480_p3;
    select_ln91_fu_301_p3 <= 
        ap_const_lv5_0 when (icmp_ln92_reg_554_pp0_iter1_reg(0) = '1') else 
        n1_fu_92;
    select_ln92_1_fu_336_p3 <= 
        add_ln92_fu_330_p2 when (and_ln91_reg_567(0) = '1') else 
        select_ln91_fu_301_p3;
    select_ln92_2_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_2_fu_364_p3),64));
    select_ln92_2_fu_364_p3 <= 
        empty_97_fu_356_p2 when (and_ln91_reg_567_pp0_iter2_reg(0) = '1') else 
        select_ln91_2_fu_348_p3;
    select_ln92_3_fu_227_p3 <= 
        ap_const_lv10_1 when (icmp_ln92_fu_207_p2(0) = '1') else 
        add_ln92_1_fu_221_p2;
    select_ln92_fu_275_p3 <= 
        ap_const_lv5_0 when (or_ln92_fu_270_p2(0) = '1') else 
        n2_fu_88;
    select_ln96_fu_442_p3 <= 
        add_ln95_reg_620_pp0_iter6_reg when (icmp_ln1548_reg_625_pp0_iter6_reg(0) = '1') else 
        ap_const_lv27_0;
        sext_ln712_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_498_p2),46));

    temp_V_fu_397_p2 <= std_logic_vector(unsigned(scores_target_V_q0) + unsigned(scores_source_V_q0));
    tmp_fu_415_p3 <= temp_V_fu_397_p2(27 downto 27);
    trunc_ln712_fu_393_p1 <= scores_target_V_q0(27 - 1 downto 0);
    trunc_ln91_fu_326_p1 <= mul_ln98_fu_320_p2(9 - 1 downto 0);
    trunc_ln92_fu_389_p1 <= scores_source_V_q0(27 - 1 downto 0);
    xor_ln91_fu_253_p2 <= (icmp_ln92_reg_554 xor ap_const_lv1_1);
    zext_ln1245_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_448_p3),46));
    zext_ln712_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_fu_379_p2),64));
    zext_ln98_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_reg_573_pp0_iter2_reg),9));
    zext_ln98_4_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_reg_640),64));
end behav;
