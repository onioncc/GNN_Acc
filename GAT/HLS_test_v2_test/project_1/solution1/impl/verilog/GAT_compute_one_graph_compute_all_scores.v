// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GAT_compute_one_graph_compute_all_scores (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_nodes,
        scores_source_V_address0,
        scores_source_V_ce0,
        scores_source_V_q0,
        scores_target_V_address0,
        scores_target_V_ce0,
        scores_target_V_q0,
        all_scores_V_address1,
        all_scores_V_ce1,
        all_scores_V_we1,
        all_scores_V_d1,
        grp_fu_18318_p_din0,
        grp_fu_18318_p_din1,
        grp_fu_18318_p_dout0,
        grp_fu_18318_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_of_nodes;
output  [8:0] scores_source_V_address0;
output   scores_source_V_ce0;
input  [27:0] scores_source_V_q0;
output  [8:0] scores_target_V_address0;
output   scores_target_V_ce0;
input  [27:0] scores_target_V_q0;
output  [15:0] all_scores_V_address1;
output   all_scores_V_ce1;
output   all_scores_V_we1;
output  [27:0] all_scores_V_d1;
output  [31:0] grp_fu_18318_p_din0;
output  [31:0] grp_fu_18318_p_din1;
input  [63:0] grp_fu_18318_p_dout0;
output   grp_fu_18318_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg scores_source_V_ce0;
reg scores_target_V_ce0;
reg all_scores_V_ce1;
reg all_scores_V_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] cast_fu_151_p1;
reg   [63:0] bound_reg_590;
wire    ap_CS_fsm_state2;
wire   [65:0] tmp_fu_186_p3;
reg   [65:0] tmp_reg_595;
wire   [0:0] icmp_ln94_1_fu_194_p2;
reg   [0:0] icmp_ln94_1_reg_600;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln92_fu_209_p2;
reg   [0:0] icmp_ln92_reg_610;
reg   [0:0] icmp_ln92_reg_610_pp0_iter1_reg;
wire   [2:0] add_ln92_fu_223_p2;
reg   [2:0] add_ln92_reg_614;
reg   [2:0] add_ln92_reg_614_pp0_iter1_reg;
wire   [0:0] icmp_ln93_fu_229_p2;
reg   [0:0] icmp_ln93_reg_619;
reg   [0:0] icmp_ln93_reg_619_pp0_iter1_reg;
reg   [0:0] icmp_ln93_reg_619_pp0_iter2_reg;
wire   [2:0] select_ln92_1_fu_234_p3;
reg   [2:0] select_ln92_1_reg_628;
reg   [2:0] select_ln92_1_reg_628_pp0_iter1_reg;
wire   [0:0] select_ln92_4_fu_283_p3;
reg   [0:0] select_ln92_4_reg_633;
reg   [0:0] select_ln92_4_reg_633_pp0_iter2_reg;
wire   [15:0] select_ln93_fu_294_p3;
reg   [15:0] select_ln93_reg_640;
reg   [15:0] select_ln93_reg_640_pp0_iter2_reg;
reg   [15:0] select_ln93_reg_640_pp0_iter3_reg;
reg   [15:0] select_ln93_reg_640_pp0_iter4_reg;
wire   [8:0] trunc_ln99_fu_302_p1;
reg   [8:0] trunc_ln99_reg_645;
wire   [8:0] mul_ln92_1_fu_338_p2;
reg   [8:0] mul_ln92_1_reg_655;
wire   [9:0] mul_ln99_fu_347_p2;
reg   [9:0] mul_ln99_reg_660;
wire   [8:0] empty_93_fu_378_p2;
reg   [8:0] empty_93_reg_665;
wire   [15:0] select_ln93_1_fu_384_p3;
reg   [15:0] select_ln93_1_reg_670;
wire   [8:0] add_ln712_fu_398_p2;
reg   [8:0] add_ln712_reg_675;
wire   [26:0] add_ln96_fu_445_p2;
reg   [26:0] add_ln96_reg_690;
reg   [26:0] add_ln96_reg_690_pp0_iter5_reg;
reg   [26:0] add_ln96_reg_690_pp0_iter6_reg;
wire   [0:0] icmp_ln1548_fu_451_p2;
reg   [0:0] icmp_ln1548_reg_695;
reg   [0:0] icmp_ln1548_reg_695_pp0_iter5_reg;
reg   [0:0] icmp_ln1548_reg_695_pp0_iter6_reg;
wire   [15:0] grp_fu_528_p4;
reg  signed [15:0] add_ln99_1_reg_705;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter3_state6;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
wire   [63:0] select_ln93_2_cast_fu_422_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln712_fu_427_p1;
wire   [63:0] zext_ln99_1_fu_477_p1;
reg   [15:0] n2_fu_82;
wire   [15:0] add_ln94_fu_306_p2;
reg   [31:0] n1_fu_86;
wire   [31:0] select_ln93_3_fu_391_p3;
reg   [63:0] indvar_flatten_fu_90;
wire   [63:0] select_ln93_4_fu_248_p3;
reg   [2:0] nh_fu_94;
reg   [65:0] indvar_flatten22_fu_98;
wire   [65:0] add_ln92_1_fu_214_p2;
wire   [63:0] add_ln93_1_fu_242_p2;
wire   [31:0] zext_ln94_fu_274_p1;
wire   [0:0] icmp_ln94_fu_278_p2;
wire   [0:0] or_ln93_fu_289_p2;
wire   [2:0] mul_ln92_1_fu_338_p0;
wire   [7:0] mul_ln92_1_fu_338_p1;
wire   [2:0] mul_ln99_fu_347_p0;
wire   [7:0] mul_ln99_fu_347_p1;
wire   [15:0] empty_fu_320_p1;
wire   [31:0] select_ln92_fu_328_p3;
wire   [31:0] add_ln93_fu_364_p2;
wire   [8:0] trunc_ln92_fu_353_p1;
wire   [8:0] empty_92_fu_374_p1;
wire   [15:0] empty_91_fu_370_p1;
wire   [15:0] select_ln92_2_fu_357_p3;
wire   [8:0] grp_fu_519_p3;
wire   [8:0] select_ln92_3_fu_411_p3;
wire   [8:0] select_ln93_2_fu_416_p3;
wire   [26:0] trunc_ln712_fu_435_p1;
wire   [26:0] trunc_ln93_fu_431_p1;
wire   [27:0] temp_V_fu_439_p2;
wire   [0:0] tmp_18_fu_457_p3;
wire  signed [27:0] min_V_fu_465_p3;
wire   [26:0] select_ln97_fu_481_p3;
wire   [44:0] lhs_fu_487_p3;
wire  signed [44:0] grp_fu_536_p2;
wire   [45:0] zext_ln1245_fu_495_p1;
wire  signed [45:0] sext_ln712_fu_499_p1;
wire   [45:0] ret_V_fu_502_p2;
wire   [2:0] grp_fu_519_p0;
wire   [6:0] grp_fu_519_p1;
wire   [8:0] grp_fu_519_p2;
wire   [9:0] grp_fu_528_p0;
wire   [6:0] grp_fu_528_p2;
wire   [15:0] grp_fu_536_p1;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] grp_fu_519_p00;
wire   [15:0] grp_fu_528_p00;
wire   [8:0] mul_ln92_1_fu_338_p00;
wire   [9:0] mul_ln99_fu_347_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

GAT_compute_one_graph_mul_3ns_8ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 9 ))
mul_3ns_8ns_9_1_1_U5788(
    .din0(mul_ln92_1_fu_338_p0),
    .din1(mul_ln92_1_fu_338_p1),
    .dout(mul_ln92_1_fu_338_p2)
);

GAT_compute_one_graph_mul_3ns_8ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mul_3ns_8ns_10_1_1_U5789(
    .din0(mul_ln99_fu_347_p0),
    .din1(mul_ln99_fu_347_p1),
    .dout(mul_ln99_fu_347_p2)
);

GAT_compute_one_graph_mac_muladd_3ns_7ns_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_3ns_7ns_9ns_9_4_1_U5790(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_519_p0),
    .din1(grp_fu_519_p1),
    .din2(grp_fu_519_p2),
    .ce(1'b1),
    .dout(grp_fu_519_p3)
);

GAT_compute_one_graph_ama_addmuladd_10ns_16ns_7ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ama_addmuladd_10ns_16ns_7ns_16ns_16_4_1_U5791(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_528_p0),
    .din1(select_ln93_1_reg_670),
    .din2(grp_fu_528_p2),
    .din3(select_ln93_reg_640_pp0_iter4_reg),
    .ce(1'b1),
    .dout(grp_fu_528_p4)
);

GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 45 ))
mul_mul_28s_16ns_45_4_1_U5792(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_V_fu_465_p3),
    .din1(grp_fu_536_p1),
    .ce(1'b1),
    .dout(grp_fu_536_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter3_state6)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten22_fu_98 <= 66'd0;
    end else if (((icmp_ln92_fu_209_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten22_fu_98 <= add_ln92_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_90 <= 64'd0;
    end else if (((icmp_ln92_fu_209_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_fu_90 <= select_ln93_4_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n1_fu_86 <= 32'd0;
    end else if (((icmp_ln92_reg_610_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        n1_fu_86 <= select_ln93_3_fu_391_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n2_fu_82 <= 16'd0;
    end else if (((icmp_ln92_reg_610 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n2_fu_82 <= add_ln94_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nh_fu_94 <= 3'd0;
    end else if (((icmp_ln92_fu_209_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        nh_fu_94 <= select_ln92_1_fu_234_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_610_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln712_reg_675 <= add_ln712_fu_398_p2;
        mul_ln99_reg_660 <= mul_ln99_fu_347_p2;
        select_ln93_1_reg_670 <= select_ln93_1_fu_384_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_209_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln92_reg_614 <= add_ln92_fu_223_p2;
        icmp_ln93_reg_619 <= icmp_ln93_fu_229_p2;
        select_ln92_1_reg_628 <= select_ln92_1_fu_234_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln92_reg_614_pp0_iter1_reg <= add_ln92_reg_614;
        icmp_ln92_reg_610 <= icmp_ln92_fu_209_p2;
        icmp_ln92_reg_610_pp0_iter1_reg <= icmp_ln92_reg_610;
        icmp_ln93_reg_619_pp0_iter1_reg <= icmp_ln93_reg_619;
        select_ln92_1_reg_628_pp0_iter1_reg <= select_ln92_1_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln96_reg_690 <= add_ln96_fu_445_p2;
        add_ln96_reg_690_pp0_iter5_reg <= add_ln96_reg_690;
        add_ln96_reg_690_pp0_iter6_reg <= add_ln96_reg_690_pp0_iter5_reg;
        icmp_ln1548_reg_695 <= icmp_ln1548_fu_451_p2;
        icmp_ln1548_reg_695_pp0_iter5_reg <= icmp_ln1548_reg_695;
        icmp_ln1548_reg_695_pp0_iter6_reg <= icmp_ln1548_reg_695_pp0_iter5_reg;
        icmp_ln93_reg_619_pp0_iter2_reg <= icmp_ln93_reg_619_pp0_iter1_reg;
        select_ln92_4_reg_633_pp0_iter2_reg <= select_ln92_4_reg_633;
        select_ln93_reg_640_pp0_iter2_reg <= select_ln93_reg_640;
        select_ln93_reg_640_pp0_iter3_reg <= select_ln93_reg_640_pp0_iter2_reg;
        select_ln93_reg_640_pp0_iter4_reg <= select_ln93_reg_640_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        add_ln99_1_reg_705 <= grp_fu_528_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_590 <= grp_fu_18318_p_dout0;
        icmp_ln94_1_reg_600 <= icmp_ln94_1_fu_194_p2;
        tmp_reg_595[65 : 2] <= tmp_fu_186_p3[65 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_610_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln92_4_reg_633 == 1'd1))) begin
        empty_93_reg_665 <= empty_93_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_619_pp0_iter1_reg == 1'd1) & (icmp_ln92_reg_610_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (select_ln92_4_reg_633 == 1'd0))) begin
        mul_ln92_1_reg_655 <= mul_ln92_1_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_610 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln92_4_reg_633 <= select_ln92_4_fu_283_p3;
        select_ln93_reg_640 <= select_ln93_fu_294_p3;
        trunc_ln99_reg_645 <= trunc_ln99_fu_302_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        all_scores_V_ce1 = 1'b1;
    end else begin
        all_scores_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        all_scores_V_we1 = 1'b1;
    end else begin
        all_scores_V_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_condition_pp0_exit_iter3_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_209_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        scores_source_V_ce0 = 1'b1;
    end else begin
        scores_source_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        scores_target_V_ce0 = 1'b1;
    end else begin
        scores_target_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln712_fu_398_p2 = (trunc_ln92_fu_353_p1 + trunc_ln99_reg_645);

assign add_ln92_1_fu_214_p2 = (indvar_flatten22_fu_98 + 66'd1);

assign add_ln92_fu_223_p2 = (nh_fu_94 + 3'd1);

assign add_ln93_1_fu_242_p2 = (indvar_flatten_fu_90 + 64'd1);

assign add_ln93_fu_364_p2 = (select_ln92_fu_328_p3 + 32'd1);

assign add_ln94_fu_306_p2 = (select_ln93_fu_294_p3 + 16'd1);

assign add_ln96_fu_445_p2 = (trunc_ln712_fu_435_p1 + trunc_ln93_fu_431_p1);

assign all_scores_V_address1 = zext_ln99_1_fu_477_p1;

assign all_scores_V_d1 = {{ret_V_fu_502_p2[45:18]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cast_fu_151_p1 = num_of_nodes;

assign empty_91_fu_370_p1 = add_ln93_fu_364_p2[15:0];

assign empty_92_fu_374_p1 = add_ln93_fu_364_p2[8:0];

assign empty_93_fu_378_p2 = (trunc_ln92_fu_353_p1 + empty_92_fu_374_p1);

assign empty_fu_320_p1 = n1_fu_86[15:0];

assign grp_fu_18318_p_ce = 1'b1;

assign grp_fu_18318_p_din0 = cast_fu_151_p1;

assign grp_fu_18318_p_din1 = cast_fu_151_p1;

assign grp_fu_519_p0 = grp_fu_519_p00;

assign grp_fu_519_p00 = nh_fu_94;

assign grp_fu_519_p1 = 9'd100;

assign grp_fu_519_p2 = n1_fu_86[8:0];

assign grp_fu_528_p0 = grp_fu_528_p00;

assign grp_fu_528_p00 = mul_ln99_reg_660;

assign grp_fu_528_p2 = 16'd100;

assign grp_fu_536_p1 = 45'd52428;

assign icmp_ln1548_fu_451_p2 = (($signed(temp_V_fu_439_p2) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_209_p2 = ((indvar_flatten22_fu_98 == tmp_reg_595) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_229_p2 = ((indvar_flatten_fu_90 == bound_reg_590) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_194_p2 = ((num_of_nodes == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_278_p2 = ((zext_ln94_fu_274_p1 == num_of_nodes) ? 1'b1 : 1'b0);

assign lhs_fu_487_p3 = {{select_ln97_fu_481_p3}, {18'd0}};

assign min_V_fu_465_p3 = ((tmp_18_fu_457_p3[0:0] == 1'b1) ? temp_V_fu_439_p2 : 28'd0);

assign mul_ln92_1_fu_338_p0 = mul_ln92_1_fu_338_p00;

assign mul_ln92_1_fu_338_p00 = add_ln92_reg_614_pp0_iter1_reg;

assign mul_ln92_1_fu_338_p1 = 9'd100;

assign mul_ln99_fu_347_p0 = mul_ln99_fu_347_p00;

assign mul_ln99_fu_347_p00 = select_ln92_1_reg_628_pp0_iter1_reg;

assign mul_ln99_fu_347_p1 = 10'd100;

assign or_ln93_fu_289_p2 = (select_ln92_4_fu_283_p3 | icmp_ln93_reg_619);

assign ret_V_fu_502_p2 = ($signed(zext_ln1245_fu_495_p1) + $signed(sext_ln712_fu_499_p1));

assign scores_source_V_address0 = select_ln93_2_cast_fu_422_p1;

assign scores_target_V_address0 = zext_ln712_fu_427_p1;

assign select_ln92_1_fu_234_p3 = ((icmp_ln93_fu_229_p2[0:0] == 1'b1) ? add_ln92_fu_223_p2 : nh_fu_94);

assign select_ln92_2_fu_357_p3 = ((icmp_ln93_reg_619_pp0_iter1_reg[0:0] == 1'b1) ? 16'd0 : empty_fu_320_p1);

assign select_ln92_3_fu_411_p3 = ((icmp_ln93_reg_619_pp0_iter2_reg[0:0] == 1'b1) ? mul_ln92_1_reg_655 : grp_fu_519_p3);

assign select_ln92_4_fu_283_p3 = ((icmp_ln93_reg_619[0:0] == 1'b1) ? icmp_ln94_1_reg_600 : icmp_ln94_fu_278_p2);

assign select_ln92_fu_328_p3 = ((icmp_ln93_reg_619_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : n1_fu_86);

assign select_ln93_1_fu_384_p3 = ((select_ln92_4_reg_633[0:0] == 1'b1) ? empty_91_fu_370_p1 : select_ln92_2_fu_357_p3);

assign select_ln93_2_cast_fu_422_p1 = select_ln93_2_fu_416_p3;

assign select_ln93_2_fu_416_p3 = ((select_ln92_4_reg_633_pp0_iter2_reg[0:0] == 1'b1) ? empty_93_reg_665 : select_ln92_3_fu_411_p3);

assign select_ln93_3_fu_391_p3 = ((select_ln92_4_reg_633[0:0] == 1'b1) ? add_ln93_fu_364_p2 : select_ln92_fu_328_p3);

assign select_ln93_4_fu_248_p3 = ((icmp_ln93_fu_229_p2[0:0] == 1'b1) ? 64'd1 : add_ln93_1_fu_242_p2);

assign select_ln93_fu_294_p3 = ((or_ln93_fu_289_p2[0:0] == 1'b1) ? 16'd0 : n2_fu_82);

assign select_ln97_fu_481_p3 = ((icmp_ln1548_reg_695_pp0_iter6_reg[0:0] == 1'b1) ? add_ln96_reg_690_pp0_iter6_reg : 27'd0);

assign sext_ln712_fu_499_p1 = grp_fu_536_p2;

assign temp_V_fu_439_p2 = (scores_target_V_q0 + scores_source_V_q0);

assign tmp_18_fu_457_p3 = temp_V_fu_439_p2[32'd27];

assign tmp_fu_186_p3 = {{grp_fu_18318_p_dout0}, {2'd0}};

assign trunc_ln712_fu_435_p1 = scores_target_V_q0[26:0];

assign trunc_ln92_fu_353_p1 = mul_ln99_fu_347_p2[8:0];

assign trunc_ln93_fu_431_p1 = scores_source_V_q0[26:0];

assign trunc_ln99_fu_302_p1 = select_ln93_fu_294_p3[8:0];

assign zext_ln1245_fu_495_p1 = lhs_fu_487_p3;

assign zext_ln712_fu_427_p1 = add_ln712_reg_675;

assign zext_ln94_fu_274_p1 = n2_fu_82;

assign zext_ln99_1_fu_477_p1 = $unsigned(add_ln99_1_reg_705);

always @ (posedge ap_clk) begin
    tmp_reg_595[1:0] <= 2'b00;
end

endmodule //GAT_compute_one_graph_compute_all_scores
