// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GAT_compute_one_graph_compute_out_nodes_features_Pipeline_VITIS_LOOP_183_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_116,
        mul_ln185,
        zext_ln181,
        a_buffer_V_0,
        a_buffer_V_0_ap_vld,
        all_attention_coefficients_V_address0,
        all_attention_coefficients_V_ce0,
        all_attention_coefficients_V_q0,
        a_buffer_V_1,
        a_buffer_V_1_ap_vld,
        a_buffer_V_2,
        a_buffer_V_2_ap_vld,
        a_buffer_V_3,
        a_buffer_V_3_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] tmp_116;
input  [9:0] mul_ln185;
input  [15:0] zext_ln181;
output  [27:0] a_buffer_V_0;
output   a_buffer_V_0_ap_vld;
output  [15:0] all_attention_coefficients_V_address0;
output   all_attention_coefficients_V_ce0;
input  [27:0] all_attention_coefficients_V_q0;
output  [27:0] a_buffer_V_1;
output   a_buffer_V_1_ap_vld;
output  [27:0] a_buffer_V_2;
output   a_buffer_V_2_ap_vld;
output  [27:0] a_buffer_V_3;
output   a_buffer_V_3_ap_vld;

reg ap_idle;
reg a_buffer_V_0_ap_vld;
reg all_attention_coefficients_V_ce0;
reg a_buffer_V_1_ap_vld;
reg a_buffer_V_2_ap_vld;
reg a_buffer_V_3_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln183_fu_109_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] mul_ln185_cast_fu_97_p1;
reg   [10:0] mul_ln185_cast_reg_192;
wire   [8:0] add_ln185_fu_125_p2;
reg   [8:0] add_ln185_reg_201;
wire   [1:0] trunc_ln185_fu_131_p1;
reg   [1:0] trunc_ln185_reg_206;
reg   [1:0] trunc_ln185_reg_206_pp0_iter1_reg;
reg   [1:0] trunc_ln185_reg_206_pp0_iter2_reg;
reg   [1:0] trunc_ln185_reg_206_pp0_iter3_reg;
reg   [1:0] trunc_ln185_reg_206_pp0_iter4_reg;
wire   [63:0] zext_ln185_2_fu_143_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] nd_1_fu_62;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_nd;
wire   [2:0] add_ln183_fu_115_p2;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln183_fu_121_p1;
wire   [15:0] grp_fu_171_p4;
wire   [9:0] grp_fu_171_p0;
wire   [8:0] grp_fu_171_p1;
wire   [6:0] grp_fu_171_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] grp_fu_171_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

GAT_compute_one_graph_ama_addmuladd_10ns_9ns_7ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ama_addmuladd_10ns_9ns_7ns_16ns_16_4_1_U5841(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .din2(grp_fu_171_p2),
    .din3(zext_ln181),
    .ce(1'b1),
    .dout(grp_fu_171_p4)
);

GAT_compute_one_graph_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln183_fu_109_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            nd_1_fu_62 <= add_ln183_fu_115_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            nd_1_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_109_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln185_reg_201 <= add_ln185_fu_125_p2;
        trunc_ln185_reg_206 <= trunc_ln185_fu_131_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mul_ln185_cast_reg_192[9 : 0] <= mul_ln185_cast_fu_97_p1[9 : 0];
        trunc_ln185_reg_206_pp0_iter1_reg <= trunc_ln185_reg_206;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        trunc_ln185_reg_206_pp0_iter2_reg <= trunc_ln185_reg_206_pp0_iter1_reg;
        trunc_ln185_reg_206_pp0_iter3_reg <= trunc_ln185_reg_206_pp0_iter2_reg;
        trunc_ln185_reg_206_pp0_iter4_reg <= trunc_ln185_reg_206_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (trunc_ln185_reg_206_pp0_iter4_reg == 2'd0))) begin
        a_buffer_V_0_ap_vld = 1'b1;
    end else begin
        a_buffer_V_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (trunc_ln185_reg_206_pp0_iter4_reg == 2'd1))) begin
        a_buffer_V_1_ap_vld = 1'b1;
    end else begin
        a_buffer_V_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (trunc_ln185_reg_206_pp0_iter4_reg == 2'd2))) begin
        a_buffer_V_2_ap_vld = 1'b1;
    end else begin
        a_buffer_V_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (trunc_ln185_reg_206_pp0_iter4_reg == 2'd3))) begin
        a_buffer_V_3_ap_vld = 1'b1;
    end else begin
        a_buffer_V_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        all_attention_coefficients_V_ce0 = 1'b1;
    end else begin
        all_attention_coefficients_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln183_fu_109_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_nd = 3'd0;
    end else begin
        ap_sig_allocacmp_nd = nd_1_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_buffer_V_0 = all_attention_coefficients_V_q0;

assign a_buffer_V_1 = all_attention_coefficients_V_q0;

assign a_buffer_V_2 = all_attention_coefficients_V_q0;

assign a_buffer_V_3 = all_attention_coefficients_V_q0;

assign add_ln183_fu_115_p2 = (ap_sig_allocacmp_nd + 3'd1);

assign add_ln185_fu_125_p2 = (zext_ln183_fu_121_p1 + tmp_116);

assign all_attention_coefficients_V_address0 = zext_ln185_2_fu_143_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_171_p0 = mul_ln185_cast_reg_192;

assign grp_fu_171_p1 = grp_fu_171_p10;

assign grp_fu_171_p10 = add_ln185_reg_201;

assign grp_fu_171_p2 = 16'd100;

assign icmp_ln183_fu_109_p2 = ((ap_sig_allocacmp_nd == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln185_cast_fu_97_p1 = mul_ln185;

assign trunc_ln185_fu_131_p1 = ap_sig_allocacmp_nd[1:0];

assign zext_ln183_fu_121_p1 = ap_sig_allocacmp_nd;

assign zext_ln185_2_fu_143_p1 = grp_fu_171_p4;

always @ (posedge ap_clk) begin
    mul_ln185_cast_reg_192[10] <= 1'b0;
end

endmodule //GAT_compute_one_graph_compute_out_nodes_features_Pipeline_VITIS_LOOP_183_4
