-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_all_scores is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    scores_source_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_source_V_ce0 : OUT STD_LOGIC;
    scores_source_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    scores_target_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_target_V_ce0 : OUT STD_LOGIC;
    scores_target_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_18318_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_18318_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_18318_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_18318_p_ce : OUT STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_compute_all_scores is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv45_CCCC : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001100110011001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cast_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_186_p3 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_reg_595 : STD_LOGIC_VECTOR (65 downto 0);
    signal icmp_ln94_1_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_1_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln92_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_610_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_223_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln92_reg_614 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln92_reg_614_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln93_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_619_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_619_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_1_fu_234_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln92_1_reg_628 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln92_1_reg_628_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln92_4_fu_283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_4_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_4_reg_633_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln93_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_reg_640_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_reg_640_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln99_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln99_reg_645 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln92_1_fu_338_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln92_1_reg_655 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln99_fu_347_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln99_reg_660 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_93_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_93_reg_665 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln93_1_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_1_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln712_reg_675 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln96_fu_445_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln96_reg_690 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln96_reg_690_pp0_iter5_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln96_reg_690_pp0_iter6_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1548_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_695_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_695_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_528_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln99_1_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal select_ln93_2_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln712_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln94_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln93_3_fu_391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln93_4_fu_248_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal nh_fu_94 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten22_fu_98 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln92_1_fu_214_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln93_1_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln94_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln93_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln92_1_fu_338_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln92_1_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln99_fu_347_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln99_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln92_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_fu_353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_92_fu_374_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_91_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln92_2_fu_357_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_519_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln92_3_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln93_2_fu_416_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln712_fu_435_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln93_fu_431_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal temp_V_fu_439_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_18_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_V_fu_465_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln97_fu_481_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_fu_487_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1245_fu_495_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_fu_499_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_502_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_536_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_519_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_528_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln92_1_fu_338_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln99_fu_347_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_3ns_8ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_3ns_8ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_3ns_7ns_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_ama_addmuladd_10ns_16ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;



begin
    mul_3ns_8ns_9_1_1_U5788 : component GAT_compute_one_graph_mul_3ns_8ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        din0 => mul_ln92_1_fu_338_p0,
        din1 => mul_ln92_1_fu_338_p1,
        dout => mul_ln92_1_fu_338_p2);

    mul_3ns_8ns_10_1_1_U5789 : component GAT_compute_one_graph_mul_3ns_8ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln99_fu_347_p0,
        din1 => mul_ln99_fu_347_p1,
        dout => mul_ln99_fu_347_p2);

    mac_muladd_3ns_7ns_9ns_9_4_1_U5790 : component GAT_compute_one_graph_mac_muladd_3ns_7ns_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 7,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_519_p0,
        din1 => grp_fu_519_p1,
        din2 => grp_fu_519_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p3);

    ama_addmuladd_10ns_16ns_7ns_16ns_16_4_1_U5791 : component GAT_compute_one_graph_ama_addmuladd_10ns_16ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 7,
        din3_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_528_p0,
        din1 => select_ln93_1_reg_670,
        din2 => grp_fu_528_p2,
        din3 => select_ln93_reg_640_pp0_iter4_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p4);

    mul_mul_28s_16ns_45_4_1_U5792 : component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 28,
        din1_WIDTH => 16,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_V_fu_465_p3,
        din1 => grp_fu_536_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_536_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state6)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten22_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_fu_98 <= ap_const_lv66_0;
            elsif (((icmp_ln92_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten22_fu_98 <= add_ln92_1_fu_214_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_90 <= ap_const_lv64_0;
            elsif (((icmp_ln92_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_fu_90 <= select_ln93_4_fu_248_p3;
            end if; 
        end if;
    end process;

    n1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n1_fu_86 <= ap_const_lv32_0;
            elsif (((icmp_ln92_reg_610_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                n1_fu_86 <= select_ln93_3_fu_391_p3;
            end if; 
        end if;
    end process;

    n2_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n2_fu_82 <= ap_const_lv16_0;
            elsif (((icmp_ln92_reg_610 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n2_fu_82 <= add_ln94_fu_306_p2;
            end if; 
        end if;
    end process;

    nh_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nh_fu_94 <= ap_const_lv3_0;
            elsif (((icmp_ln92_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                nh_fu_94 <= select_ln92_1_fu_234_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_610_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln712_reg_675 <= add_ln712_fu_398_p2;
                mul_ln99_reg_660 <= mul_ln99_fu_347_p2;
                select_ln93_1_reg_670 <= select_ln93_1_fu_384_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln92_reg_614 <= add_ln92_fu_223_p2;
                icmp_ln93_reg_619 <= icmp_ln93_fu_229_p2;
                select_ln92_1_reg_628 <= select_ln92_1_fu_234_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln92_reg_614_pp0_iter1_reg <= add_ln92_reg_614;
                icmp_ln92_reg_610 <= icmp_ln92_fu_209_p2;
                icmp_ln92_reg_610_pp0_iter1_reg <= icmp_ln92_reg_610;
                icmp_ln93_reg_619_pp0_iter1_reg <= icmp_ln93_reg_619;
                select_ln92_1_reg_628_pp0_iter1_reg <= select_ln92_1_reg_628;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln96_reg_690 <= add_ln96_fu_445_p2;
                add_ln96_reg_690_pp0_iter5_reg <= add_ln96_reg_690;
                add_ln96_reg_690_pp0_iter6_reg <= add_ln96_reg_690_pp0_iter5_reg;
                icmp_ln1548_reg_695 <= icmp_ln1548_fu_451_p2;
                icmp_ln1548_reg_695_pp0_iter5_reg <= icmp_ln1548_reg_695;
                icmp_ln1548_reg_695_pp0_iter6_reg <= icmp_ln1548_reg_695_pp0_iter5_reg;
                icmp_ln93_reg_619_pp0_iter2_reg <= icmp_ln93_reg_619_pp0_iter1_reg;
                select_ln92_4_reg_633_pp0_iter2_reg <= select_ln92_4_reg_633;
                select_ln93_reg_640_pp0_iter2_reg <= select_ln93_reg_640;
                select_ln93_reg_640_pp0_iter3_reg <= select_ln93_reg_640_pp0_iter2_reg;
                select_ln93_reg_640_pp0_iter4_reg <= select_ln93_reg_640_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                add_ln99_1_reg_705 <= grp_fu_528_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_590 <= grp_fu_18318_p_dout0;
                icmp_ln94_1_reg_600 <= icmp_ln94_1_fu_194_p2;
                    tmp_reg_595(65 downto 2) <= tmp_fu_186_p3(65 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_610_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln92_4_reg_633 = ap_const_lv1_1))) then
                empty_93_reg_665 <= empty_93_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_reg_619_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln92_reg_610_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln92_4_reg_633 = ap_const_lv1_0))) then
                mul_ln92_1_reg_655 <= mul_ln92_1_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_610 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln92_4_reg_633 <= select_ln92_4_fu_283_p3;
                select_ln93_reg_640 <= select_ln93_fu_294_p3;
                trunc_ln99_reg_645 <= trunc_ln99_fu_302_p1;
            end if;
        end if;
    end process;
    tmp_reg_595(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln712_fu_398_p2 <= std_logic_vector(unsigned(trunc_ln92_fu_353_p1) + unsigned(trunc_ln99_reg_645));
    add_ln92_1_fu_214_p2 <= std_logic_vector(unsigned(indvar_flatten22_fu_98) + unsigned(ap_const_lv66_1));
    add_ln92_fu_223_p2 <= std_logic_vector(unsigned(nh_fu_94) + unsigned(ap_const_lv3_1));
    add_ln93_1_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_90) + unsigned(ap_const_lv64_1));
    add_ln93_fu_364_p2 <= std_logic_vector(unsigned(select_ln92_fu_328_p3) + unsigned(ap_const_lv32_1));
    add_ln94_fu_306_p2 <= std_logic_vector(unsigned(select_ln93_fu_294_p3) + unsigned(ap_const_lv16_1));
    add_ln96_fu_445_p2 <= std_logic_vector(unsigned(trunc_ln712_fu_435_p1) + unsigned(trunc_ln93_fu_431_p1));
    all_scores_V_address1 <= zext_ln99_1_fu_477_p1(16 - 1 downto 0);

    all_scores_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= ret_V_fu_502_p2(45 downto 18);

    all_scores_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter3_state6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter3_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln92_fu_209_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln92_fu_209_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_of_nodes),64));
    empty_91_fu_370_p1 <= add_ln93_fu_364_p2(16 - 1 downto 0);
    empty_92_fu_374_p1 <= add_ln93_fu_364_p2(9 - 1 downto 0);
    empty_93_fu_378_p2 <= std_logic_vector(unsigned(trunc_ln92_fu_353_p1) + unsigned(empty_92_fu_374_p1));
    empty_fu_320_p1 <= n1_fu_86(16 - 1 downto 0);
    grp_fu_18318_p_ce <= ap_const_logic_1;
    grp_fu_18318_p_din0 <= cast_fu_151_p1(32 - 1 downto 0);
    grp_fu_18318_p_din1 <= cast_fu_151_p1(32 - 1 downto 0);
    grp_fu_519_p0 <= grp_fu_519_p00(3 - 1 downto 0);
    grp_fu_519_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nh_fu_94),9));
    grp_fu_519_p1 <= ap_const_lv9_64(7 - 1 downto 0);
    grp_fu_519_p2 <= n1_fu_86(9 - 1 downto 0);
    grp_fu_528_p0 <= grp_fu_528_p00(10 - 1 downto 0);
    grp_fu_528_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln99_reg_660),16));
    grp_fu_528_p2 <= ap_const_lv16_64(7 - 1 downto 0);
    grp_fu_536_p1 <= ap_const_lv45_CCCC(16 - 1 downto 0);
    icmp_ln1548_fu_451_p2 <= "1" when (signed(temp_V_fu_439_p2) > signed(ap_const_lv28_0)) else "0";
    icmp_ln92_fu_209_p2 <= "1" when (indvar_flatten22_fu_98 = tmp_reg_595) else "0";
    icmp_ln93_fu_229_p2 <= "1" when (indvar_flatten_fu_90 = bound_reg_590) else "0";
    icmp_ln94_1_fu_194_p2 <= "1" when (num_of_nodes = ap_const_lv32_0) else "0";
    icmp_ln94_fu_278_p2 <= "1" when (zext_ln94_fu_274_p1 = num_of_nodes) else "0";
    lhs_fu_487_p3 <= (select_ln97_fu_481_p3 & ap_const_lv18_0);
    min_V_fu_465_p3 <= 
        temp_V_fu_439_p2 when (tmp_18_fu_457_p3(0) = '1') else 
        ap_const_lv28_0;
    mul_ln92_1_fu_338_p0 <= mul_ln92_1_fu_338_p00(3 - 1 downto 0);
    mul_ln92_1_fu_338_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_614_pp0_iter1_reg),9));
    mul_ln92_1_fu_338_p1 <= ap_const_lv9_64(8 - 1 downto 0);
    mul_ln99_fu_347_p0 <= mul_ln99_fu_347_p00(3 - 1 downto 0);
    mul_ln99_fu_347_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_1_reg_628_pp0_iter1_reg),10));
    mul_ln99_fu_347_p1 <= ap_const_lv10_64(8 - 1 downto 0);
    or_ln93_fu_289_p2 <= (select_ln92_4_fu_283_p3 or icmp_ln93_reg_619);
    ret_V_fu_502_p2 <= std_logic_vector(unsigned(zext_ln1245_fu_495_p1) + unsigned(sext_ln712_fu_499_p1));
    scores_source_V_address0 <= select_ln93_2_cast_fu_422_p1(9 - 1 downto 0);

    scores_source_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_source_V_ce0 <= ap_const_logic_1;
        else 
            scores_source_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scores_target_V_address0 <= zext_ln712_fu_427_p1(9 - 1 downto 0);

    scores_target_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_target_V_ce0 <= ap_const_logic_1;
        else 
            scores_target_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln92_1_fu_234_p3 <= 
        add_ln92_fu_223_p2 when (icmp_ln93_fu_229_p2(0) = '1') else 
        nh_fu_94;
    select_ln92_2_fu_357_p3 <= 
        ap_const_lv16_0 when (icmp_ln93_reg_619_pp0_iter1_reg(0) = '1') else 
        empty_fu_320_p1;
    select_ln92_3_fu_411_p3 <= 
        mul_ln92_1_reg_655 when (icmp_ln93_reg_619_pp0_iter2_reg(0) = '1') else 
        grp_fu_519_p3;
    select_ln92_4_fu_283_p3 <= 
        icmp_ln94_1_reg_600 when (icmp_ln93_reg_619(0) = '1') else 
        icmp_ln94_fu_278_p2;
    select_ln92_fu_328_p3 <= 
        ap_const_lv32_0 when (icmp_ln93_reg_619_pp0_iter1_reg(0) = '1') else 
        n1_fu_86;
    select_ln93_1_fu_384_p3 <= 
        empty_91_fu_370_p1 when (select_ln92_4_reg_633(0) = '1') else 
        select_ln92_2_fu_357_p3;
    select_ln93_2_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln93_2_fu_416_p3),64));
    select_ln93_2_fu_416_p3 <= 
        empty_93_reg_665 when (select_ln92_4_reg_633_pp0_iter2_reg(0) = '1') else 
        select_ln92_3_fu_411_p3;
    select_ln93_3_fu_391_p3 <= 
        add_ln93_fu_364_p2 when (select_ln92_4_reg_633(0) = '1') else 
        select_ln92_fu_328_p3;
    select_ln93_4_fu_248_p3 <= 
        ap_const_lv64_1 when (icmp_ln93_fu_229_p2(0) = '1') else 
        add_ln93_1_fu_242_p2;
    select_ln93_fu_294_p3 <= 
        ap_const_lv16_0 when (or_ln93_fu_289_p2(0) = '1') else 
        n2_fu_82;
    select_ln97_fu_481_p3 <= 
        add_ln96_reg_690_pp0_iter6_reg when (icmp_ln1548_reg_695_pp0_iter6_reg(0) = '1') else 
        ap_const_lv27_0;
        sext_ln712_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_536_p2),46));

    temp_V_fu_439_p2 <= std_logic_vector(unsigned(scores_target_V_q0) + unsigned(scores_source_V_q0));
    tmp_18_fu_457_p3 <= temp_V_fu_439_p2(27 downto 27);
    tmp_fu_186_p3 <= (grp_fu_18318_p_dout0 & ap_const_lv2_0);
    trunc_ln712_fu_435_p1 <= scores_target_V_q0(27 - 1 downto 0);
    trunc_ln92_fu_353_p1 <= mul_ln99_fu_347_p2(9 - 1 downto 0);
    trunc_ln93_fu_431_p1 <= scores_source_V_q0(27 - 1 downto 0);
    trunc_ln99_fu_302_p1 <= select_ln93_fu_294_p3(9 - 1 downto 0);
    zext_ln1245_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_487_p3),46));
    zext_ln712_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_reg_675),64));
    zext_ln94_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_82),32));
    zext_ln99_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_1_reg_705),64));
end behav;
