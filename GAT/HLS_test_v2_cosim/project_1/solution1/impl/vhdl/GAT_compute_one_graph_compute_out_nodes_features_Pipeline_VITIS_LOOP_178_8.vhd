-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_out_nodes_features_Pipeline_VITIS_LOOP_178_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_V_4_reload : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_0_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_1_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_2_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_3_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_4_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_5_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_6_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_7_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_8_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_9_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_10_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_11_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_12_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_13_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_14_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_16_15_load : IN STD_LOGIC_VECTOR (27 downto 0);
    trunc_ln1171_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    all_attention_coefficients_buffer_V_1_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_2_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_3_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_4_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_5_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_6_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_7_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_8_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_9_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_10_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_11_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_12_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_13_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_14_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_15_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_attention_coefficients_buffer_V_0_load_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_0_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_1_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_2_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_3_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_4_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_5_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_6_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_7_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_8_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_9_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_10_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_11_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_12_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_13_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_14_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_17_15_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_0_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_1_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_2_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_3_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_4_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_5_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_6_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_7_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_8_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_9_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_10_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_11_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_12_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_13_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_14_load : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_18_15_load : IN STD_LOGIC_VECTOR (27 downto 0);
    sum_V_5_out : OUT STD_LOGIC_VECTOR (27 downto 0);
    sum_V_5_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_compute_out_nodes_features_Pipeline_VITIS_LOOP_178_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln178_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal grp_fu_656_p18 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln179_fu_736_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln178_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_740_p18 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_reg_968 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_18_fu_778_p18 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_17_fu_816_p18 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_16_fu_854_p18 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_7_fu_904_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_7_reg_988 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln1171_reg_619 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_fu_208 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal n2_fu_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_n2_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln178_fu_730_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_740_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_2_fu_913_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_921_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mux_164_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        din3 : IN STD_LOGIC_VECTOR (27 downto 0);
        din4 : IN STD_LOGIC_VECTOR (27 downto 0);
        din5 : IN STD_LOGIC_VECTOR (27 downto 0);
        din6 : IN STD_LOGIC_VECTOR (27 downto 0);
        din7 : IN STD_LOGIC_VECTOR (27 downto 0);
        din8 : IN STD_LOGIC_VECTOR (27 downto 0);
        din9 : IN STD_LOGIC_VECTOR (27 downto 0);
        din10 : IN STD_LOGIC_VECTOR (27 downto 0);
        din11 : IN STD_LOGIC_VECTOR (27 downto 0);
        din12 : IN STD_LOGIC_VECTOR (27 downto 0);
        din13 : IN STD_LOGIC_VECTOR (27 downto 0);
        din14 : IN STD_LOGIC_VECTOR (27 downto 0);
        din15 : IN STD_LOGIC_VECTOR (27 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_28s_28s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_28_1_1_U2263 : component GAT_compute_one_graph_mux_164_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 4,
        dout_WIDTH => 28)
    port map (
        din0 => ap_const_lv28_0,
        din1 => ap_const_lv28_0,
        din2 => ap_const_lv28_0,
        din3 => ap_const_lv28_0,
        din4 => ap_const_lv28_0,
        din5 => ap_const_lv28_0,
        din6 => ap_const_lv28_0,
        din7 => ap_const_lv28_0,
        din8 => ap_const_lv28_0,
        din9 => ap_const_lv28_0,
        din10 => ap_const_lv28_0,
        din11 => ap_const_lv28_0,
        din12 => ap_const_lv28_0,
        din13 => ap_const_lv28_0,
        din14 => ap_const_lv28_0,
        din15 => ap_const_lv28_0,
        din16 => trunc_ln1171_1,
        dout => grp_fu_656_p18);

    mux_164_28_1_1_U2264 : component GAT_compute_one_graph_mux_164_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 4,
        dout_WIDTH => 28)
    port map (
        din0 => all_attention_coefficients_buffer_V_0_load_1,
        din1 => all_attention_coefficients_buffer_V_1_load_1,
        din2 => all_attention_coefficients_buffer_V_2_load_1,
        din3 => all_attention_coefficients_buffer_V_3_load_1,
        din4 => all_attention_coefficients_buffer_V_4_load_1,
        din5 => all_attention_coefficients_buffer_V_5_load_1,
        din6 => all_attention_coefficients_buffer_V_6_load_1,
        din7 => all_attention_coefficients_buffer_V_7_load_1,
        din8 => all_attention_coefficients_buffer_V_8_load_1,
        din9 => all_attention_coefficients_buffer_V_9_load_1,
        din10 => all_attention_coefficients_buffer_V_10_load_1,
        din11 => all_attention_coefficients_buffer_V_11_load_1,
        din12 => all_attention_coefficients_buffer_V_12_load_1,
        din13 => all_attention_coefficients_buffer_V_13_load_1,
        din14 => all_attention_coefficients_buffer_V_14_load_1,
        din15 => all_attention_coefficients_buffer_V_15_load_1,
        din16 => r_V_fu_740_p17,
        dout => r_V_fu_740_p18);

    mux_164_28_1_1_U2265 : component GAT_compute_one_graph_mux_164_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 4,
        dout_WIDTH => 28)
    port map (
        din0 => nodes_features_proj_V_18_0_load,
        din1 => nodes_features_proj_V_18_1_load,
        din2 => nodes_features_proj_V_18_2_load,
        din3 => nodes_features_proj_V_18_3_load,
        din4 => nodes_features_proj_V_18_4_load,
        din5 => nodes_features_proj_V_18_5_load,
        din6 => nodes_features_proj_V_18_6_load,
        din7 => nodes_features_proj_V_18_7_load,
        din8 => nodes_features_proj_V_18_8_load,
        din9 => nodes_features_proj_V_18_9_load,
        din10 => nodes_features_proj_V_18_10_load,
        din11 => nodes_features_proj_V_18_11_load,
        din12 => nodes_features_proj_V_18_12_load,
        din13 => nodes_features_proj_V_18_13_load,
        din14 => nodes_features_proj_V_18_14_load,
        din15 => nodes_features_proj_V_18_15_load,
        din16 => trunc_ln1171_1,
        dout => tmp_18_fu_778_p18);

    mux_164_28_1_1_U2266 : component GAT_compute_one_graph_mux_164_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 4,
        dout_WIDTH => 28)
    port map (
        din0 => nodes_features_proj_V_17_0_load,
        din1 => nodes_features_proj_V_17_1_load,
        din2 => nodes_features_proj_V_17_2_load,
        din3 => nodes_features_proj_V_17_3_load,
        din4 => nodes_features_proj_V_17_4_load,
        din5 => nodes_features_proj_V_17_5_load,
        din6 => nodes_features_proj_V_17_6_load,
        din7 => nodes_features_proj_V_17_7_load,
        din8 => nodes_features_proj_V_17_8_load,
        din9 => nodes_features_proj_V_17_9_load,
        din10 => nodes_features_proj_V_17_10_load,
        din11 => nodes_features_proj_V_17_11_load,
        din12 => nodes_features_proj_V_17_12_load,
        din13 => nodes_features_proj_V_17_13_load,
        din14 => nodes_features_proj_V_17_14_load,
        din15 => nodes_features_proj_V_17_15_load,
        din16 => trunc_ln1171_1,
        dout => tmp_17_fu_816_p18);

    mux_164_28_1_1_U2267 : component GAT_compute_one_graph_mux_164_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 4,
        dout_WIDTH => 28)
    port map (
        din0 => nodes_features_proj_V_16_0_load,
        din1 => nodes_features_proj_V_16_1_load,
        din2 => nodes_features_proj_V_16_2_load,
        din3 => nodes_features_proj_V_16_3_load,
        din4 => nodes_features_proj_V_16_4_load,
        din5 => nodes_features_proj_V_16_5_load,
        din6 => nodes_features_proj_V_16_6_load,
        din7 => nodes_features_proj_V_16_7_load,
        din8 => nodes_features_proj_V_16_8_load,
        din9 => nodes_features_proj_V_16_9_load,
        din10 => nodes_features_proj_V_16_10_load,
        din11 => nodes_features_proj_V_16_11_load,
        din12 => nodes_features_proj_V_16_12_load,
        din13 => nodes_features_proj_V_16_13_load,
        din14 => nodes_features_proj_V_16_14_load,
        din15 => nodes_features_proj_V_16_15_load,
        din16 => trunc_ln1171_1,
        dout => tmp_16_fu_854_p18);

    mul_28s_28s_46_1_1_U2268 : component GAT_compute_one_graph_mul_28s_28s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        dout_WIDTH => 46)
    port map (
        din0 => ap_phi_reg_pp0_iter1_phi_ln1171_reg_619,
        din1 => r_V_reg_968,
        dout => r_V_7_fu_904_p2);

    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_phi_ln1171_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_F)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_3)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_4)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_5)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_6)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_7)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_8)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_9)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_A)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_B)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_C)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_D)) or ((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_E)))) then 
                ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 <= grp_fu_656_p18;
            elsif (((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_2))) then 
                ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 <= tmp_18_fu_778_p18;
            elsif (((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_1))) then 
                ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 <= tmp_17_fu_816_p18;
            elsif (((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln179_fu_736_p1 = ap_const_lv4_0))) then 
                ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 <= tmp_16_fu_854_p18;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_phi_ln1171_reg_619 <= ap_phi_reg_pp0_iter0_phi_ln1171_reg_619;
            end if; 
        end if;
    end process;

    lhs_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_fu_208 <= sum_V_4_reload;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    lhs_fu_208 <= ret_V_fu_921_p2(45 downto 18);
                end if;
            end if; 
        end if;
    end process;

    n2_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n2_fu_212 <= add_ln178_fu_730_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_212 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln178_reg_960 <= icmp_ln178_fu_724_p2;
                r_V_7_reg_988 <= r_V_7_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln178_fu_724_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_reg_968 <= r_V_fu_740_p18;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln178_fu_730_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln178_fu_724_p2)
    begin
        if (((icmp_ln178_fu_724_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_phi_ln1171_reg_619 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n2_fu_212)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n2_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_n2_1 <= n2_fu_212;
        end if; 
    end process;

    icmp_ln178_fu_724_p2 <= "1" when (ap_sig_allocacmp_n2_1 = ap_const_lv5_10) else "0";
    lhs_2_fu_913_p3 <= (lhs_fu_208 & ap_const_lv18_0);
    r_V_fu_740_p17 <= ap_sig_allocacmp_n2_1(4 - 1 downto 0);
    ret_V_fu_921_p2 <= std_logic_vector(unsigned(lhs_2_fu_913_p3) + unsigned(r_V_7_reg_988));
    sum_V_5_out <= lhs_fu_208;

    sum_V_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln178_reg_960)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln178_reg_960 = ap_const_lv1_1))) then 
            sum_V_5_out_ap_vld <= ap_const_logic_1;
        else 
            sum_V_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln179_fu_736_p1 <= ap_sig_allocacmp_n2_1(4 - 1 downto 0);
end behav;
