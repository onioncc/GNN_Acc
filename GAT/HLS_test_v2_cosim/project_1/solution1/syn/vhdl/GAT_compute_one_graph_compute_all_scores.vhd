-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_all_scores is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    scores_source_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    scores_source_V_ce0 : OUT STD_LOGIC;
    scores_source_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    scores_target_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    scores_target_V_ce0 : OUT STD_LOGIC;
    scores_target_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_2450_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2450_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2450_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2450_p_ce : OUT STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_compute_all_scores is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv10_C8 : STD_LOGIC_VECTOR (9 downto 0) := "0011001000";
    constant ap_const_lv11_C8 : STD_LOGIC_VECTOR (10 downto 0) := "00011001000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv18_C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011001000";
    constant ap_const_lv45_CCCC : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001100110011001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cast_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_184_p3 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_reg_593 : STD_LOGIC_VECTOR (65 downto 0);
    signal icmp_ln93_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_1_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln91_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_608_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_fu_221_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_reg_612 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_reg_612_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln92_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_617_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_617_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_1_fu_232_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln91_1_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln91_1_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln91_4_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_4_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_4_reg_631_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_292_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln92_reg_638 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln92_reg_638_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln92_reg_638_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln92_reg_638_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln98_fu_300_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln98_reg_643 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln91_1_fu_336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln91_1_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln98_fu_345_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln98_reg_658 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_101_fu_376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_101_reg_663 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln92_1_fu_382_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln92_1_reg_668 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_396_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln712_reg_673 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln95_fu_443_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_688 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_688_pp0_iter5_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln95_reg_688_pp0_iter6_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln1548_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_693_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_693_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_526_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln98_1_reg_703 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal select_ln92_2_cast_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln712_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_80 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln93_fu_304_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal n1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_3_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln92_4_fu_246_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal nh_fu_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten22_fu_96 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln91_1_fu_212_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln92_1_fu_240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln91_1_fu_336_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln91_1_fu_336_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln98_fu_345_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln98_fu_345_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_318_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln91_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln92_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln91_fu_351_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_100_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_99_fu_368_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln91_2_fu_355_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_517_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln91_3_fu_409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln92_2_fu_414_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln712_fu_433_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln92_fu_429_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal temp_V_fu_437_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_19_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_V_fu_463_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln96_fu_479_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_fu_485_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1245_fu_493_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_fu_497_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_500_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_517_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_526_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln91_1_fu_336_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln98_fu_345_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_3ns_9ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_3ns_9ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_3ns_8ns_10ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component GAT_compute_one_graph_ama_addmuladd_11ns_18ns_8ns_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;



begin
    mul_3ns_9ns_10_1_1_U1016 : component GAT_compute_one_graph_mul_3ns_9ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln91_1_fu_336_p0,
        din1 => mul_ln91_1_fu_336_p1,
        dout => mul_ln91_1_fu_336_p2);

    mul_3ns_9ns_11_1_1_U1017 : component GAT_compute_one_graph_mul_3ns_9ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln98_fu_345_p0,
        din1 => mul_ln98_fu_345_p1,
        dout => mul_ln98_fu_345_p2);

    mac_muladd_3ns_8ns_10ns_10_4_1_U1018 : component GAT_compute_one_graph_mac_muladd_3ns_8ns_10ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        din1 => grp_fu_517_p1,
        din2 => grp_fu_517_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p3);

    ama_addmuladd_11ns_18ns_8ns_18ns_18_4_1_U1019 : component GAT_compute_one_graph_ama_addmuladd_11ns_18ns_8ns_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 18,
        din2_WIDTH => 8,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_526_p0,
        din1 => select_ln92_1_reg_668,
        din2 => grp_fu_526_p2,
        din3 => select_ln92_reg_638_pp0_iter4_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p4);

    mul_mul_28s_16ns_45_4_1_U1020 : component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 28,
        din1_WIDTH => 16,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_V_fu_463_p3,
        din1 => grp_fu_534_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state6)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten22_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_fu_96 <= ap_const_lv66_0;
            elsif (((icmp_ln91_fu_207_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten22_fu_96 <= add_ln91_1_fu_212_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_88 <= ap_const_lv64_0;
            elsif (((icmp_ln91_fu_207_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_fu_88 <= select_ln92_4_fu_246_p3;
            end if; 
        end if;
    end process;

    n1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n1_fu_84 <= ap_const_lv32_0;
            elsif (((icmp_ln91_reg_608_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                n1_fu_84 <= select_ln92_3_fu_389_p3;
            end if; 
        end if;
    end process;

    n2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n2_fu_80 <= ap_const_lv18_0;
            elsif (((icmp_ln91_reg_608 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n2_fu_80 <= add_ln93_fu_304_p2;
            end if; 
        end if;
    end process;

    nh_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nh_fu_92 <= ap_const_lv3_0;
            elsif (((icmp_ln91_fu_207_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                nh_fu_92 <= select_ln91_1_fu_232_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_608_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln712_reg_673 <= add_ln712_fu_396_p2;
                mul_ln98_reg_658 <= mul_ln98_fu_345_p2;
                select_ln92_1_reg_668 <= select_ln92_1_fu_382_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_207_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln91_reg_612 <= add_ln91_fu_221_p2;
                icmp_ln92_reg_617 <= icmp_ln92_fu_227_p2;
                select_ln91_1_reg_626 <= select_ln91_1_fu_232_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln91_reg_612_pp0_iter1_reg <= add_ln91_reg_612;
                icmp_ln91_reg_608 <= icmp_ln91_fu_207_p2;
                icmp_ln91_reg_608_pp0_iter1_reg <= icmp_ln91_reg_608;
                icmp_ln92_reg_617_pp0_iter1_reg <= icmp_ln92_reg_617;
                select_ln91_1_reg_626_pp0_iter1_reg <= select_ln91_1_reg_626;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln95_reg_688 <= add_ln95_fu_443_p2;
                add_ln95_reg_688_pp0_iter5_reg <= add_ln95_reg_688;
                add_ln95_reg_688_pp0_iter6_reg <= add_ln95_reg_688_pp0_iter5_reg;
                icmp_ln1548_reg_693 <= icmp_ln1548_fu_449_p2;
                icmp_ln1548_reg_693_pp0_iter5_reg <= icmp_ln1548_reg_693;
                icmp_ln1548_reg_693_pp0_iter6_reg <= icmp_ln1548_reg_693_pp0_iter5_reg;
                icmp_ln92_reg_617_pp0_iter2_reg <= icmp_ln92_reg_617_pp0_iter1_reg;
                select_ln91_4_reg_631_pp0_iter2_reg <= select_ln91_4_reg_631;
                select_ln92_reg_638_pp0_iter2_reg <= select_ln92_reg_638;
                select_ln92_reg_638_pp0_iter3_reg <= select_ln92_reg_638_pp0_iter2_reg;
                select_ln92_reg_638_pp0_iter4_reg <= select_ln92_reg_638_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                add_ln98_1_reg_703 <= grp_fu_526_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_588 <= grp_fu_2450_p_dout0;
                icmp_ln93_1_reg_598 <= icmp_ln93_1_fu_192_p2;
                    tmp_reg_593(65 downto 2) <= tmp_fu_184_p3(65 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_608_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln91_4_reg_631 = ap_const_lv1_1))) then
                empty_101_reg_663 <= empty_101_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_617_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln91_reg_608_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln91_4_reg_631 = ap_const_lv1_0))) then
                mul_ln91_1_reg_653 <= mul_ln91_1_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_608 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln91_4_reg_631 <= select_ln91_4_fu_281_p3;
                select_ln92_reg_638 <= select_ln92_fu_292_p3;
                trunc_ln98_reg_643 <= trunc_ln98_fu_300_p1;
            end if;
        end if;
    end process;
    tmp_reg_593(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln712_fu_396_p2 <= std_logic_vector(unsigned(trunc_ln91_fu_351_p1) + unsigned(trunc_ln98_reg_643));
    add_ln91_1_fu_212_p2 <= std_logic_vector(unsigned(indvar_flatten22_fu_96) + unsigned(ap_const_lv66_1));
    add_ln91_fu_221_p2 <= std_logic_vector(unsigned(nh_fu_92) + unsigned(ap_const_lv3_1));
    add_ln92_1_fu_240_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_88) + unsigned(ap_const_lv64_1));
    add_ln92_fu_362_p2 <= std_logic_vector(unsigned(select_ln91_fu_326_p3) + unsigned(ap_const_lv32_1));
    add_ln93_fu_304_p2 <= std_logic_vector(unsigned(select_ln92_fu_292_p3) + unsigned(ap_const_lv18_1));
    add_ln95_fu_443_p2 <= std_logic_vector(unsigned(trunc_ln712_fu_433_p1) + unsigned(trunc_ln92_fu_429_p1));
    all_scores_V_address1 <= zext_ln98_1_fu_475_p1(18 - 1 downto 0);

    all_scores_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= ret_V_fu_500_p2(45 downto 18);

    all_scores_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter3_state6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter3_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_207_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln91_fu_207_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_of_nodes),64));
    empty_100_fu_372_p1 <= add_ln92_fu_362_p2(10 - 1 downto 0);
    empty_101_fu_376_p2 <= std_logic_vector(unsigned(trunc_ln91_fu_351_p1) + unsigned(empty_100_fu_372_p1));
    empty_99_fu_368_p1 <= add_ln92_fu_362_p2(18 - 1 downto 0);
    empty_fu_318_p1 <= n1_fu_84(18 - 1 downto 0);
    grp_fu_2450_p_ce <= ap_const_logic_1;
    grp_fu_2450_p_din0 <= cast_fu_149_p1(32 - 1 downto 0);
    grp_fu_2450_p_din1 <= cast_fu_149_p1(32 - 1 downto 0);
    grp_fu_517_p0 <= grp_fu_517_p00(3 - 1 downto 0);
    grp_fu_517_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nh_fu_92),10));
    grp_fu_517_p1 <= ap_const_lv10_C8(8 - 1 downto 0);
    grp_fu_517_p2 <= n1_fu_84(10 - 1 downto 0);
    grp_fu_526_p0 <= grp_fu_526_p00(11 - 1 downto 0);
    grp_fu_526_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln98_reg_658),18));
    grp_fu_526_p2 <= ap_const_lv18_C8(8 - 1 downto 0);
    grp_fu_534_p1 <= ap_const_lv45_CCCC(16 - 1 downto 0);
    icmp_ln1548_fu_449_p2 <= "1" when (signed(temp_V_fu_437_p2) > signed(ap_const_lv28_0)) else "0";
    icmp_ln91_fu_207_p2 <= "1" when (indvar_flatten22_fu_96 = tmp_reg_593) else "0";
    icmp_ln92_fu_227_p2 <= "1" when (indvar_flatten_fu_88 = bound_reg_588) else "0";
    icmp_ln93_1_fu_192_p2 <= "1" when (num_of_nodes = ap_const_lv32_0) else "0";
    icmp_ln93_fu_276_p2 <= "1" when (zext_ln93_fu_272_p1 = num_of_nodes) else "0";
    lhs_fu_485_p3 <= (select_ln96_fu_479_p3 & ap_const_lv18_0);
    min_V_fu_463_p3 <= 
        temp_V_fu_437_p2 when (tmp_19_fu_455_p3(0) = '1') else 
        ap_const_lv28_0;
    mul_ln91_1_fu_336_p0 <= mul_ln91_1_fu_336_p00(3 - 1 downto 0);
    mul_ln91_1_fu_336_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_612_pp0_iter1_reg),10));
    mul_ln91_1_fu_336_p1 <= ap_const_lv10_C8(9 - 1 downto 0);
    mul_ln98_fu_345_p0 <= mul_ln98_fu_345_p00(3 - 1 downto 0);
    mul_ln98_fu_345_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_1_reg_626_pp0_iter1_reg),11));
    mul_ln98_fu_345_p1 <= ap_const_lv11_C8(9 - 1 downto 0);
    or_ln92_fu_287_p2 <= (select_ln91_4_fu_281_p3 or icmp_ln92_reg_617);
    ret_V_fu_500_p2 <= std_logic_vector(unsigned(zext_ln1245_fu_493_p1) + unsigned(sext_ln712_fu_497_p1));
    scores_source_V_address0 <= select_ln92_2_cast_fu_420_p1(10 - 1 downto 0);

    scores_source_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_source_V_ce0 <= ap_const_logic_1;
        else 
            scores_source_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scores_target_V_address0 <= zext_ln712_fu_425_p1(10 - 1 downto 0);

    scores_target_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            scores_target_V_ce0 <= ap_const_logic_1;
        else 
            scores_target_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln91_1_fu_232_p3 <= 
        add_ln91_fu_221_p2 when (icmp_ln92_fu_227_p2(0) = '1') else 
        nh_fu_92;
    select_ln91_2_fu_355_p3 <= 
        ap_const_lv18_0 when (icmp_ln92_reg_617_pp0_iter1_reg(0) = '1') else 
        empty_fu_318_p1;
    select_ln91_3_fu_409_p3 <= 
        mul_ln91_1_reg_653 when (icmp_ln92_reg_617_pp0_iter2_reg(0) = '1') else 
        grp_fu_517_p3;
    select_ln91_4_fu_281_p3 <= 
        icmp_ln93_1_reg_598 when (icmp_ln92_reg_617(0) = '1') else 
        icmp_ln93_fu_276_p2;
    select_ln91_fu_326_p3 <= 
        ap_const_lv32_0 when (icmp_ln92_reg_617_pp0_iter1_reg(0) = '1') else 
        n1_fu_84;
    select_ln92_1_fu_382_p3 <= 
        empty_99_fu_368_p1 when (select_ln91_4_reg_631(0) = '1') else 
        select_ln91_2_fu_355_p3;
    select_ln92_2_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln92_2_fu_414_p3),64));
    select_ln92_2_fu_414_p3 <= 
        empty_101_reg_663 when (select_ln91_4_reg_631_pp0_iter2_reg(0) = '1') else 
        select_ln91_3_fu_409_p3;
    select_ln92_3_fu_389_p3 <= 
        add_ln92_fu_362_p2 when (select_ln91_4_reg_631(0) = '1') else 
        select_ln91_fu_326_p3;
    select_ln92_4_fu_246_p3 <= 
        ap_const_lv64_1 when (icmp_ln92_fu_227_p2(0) = '1') else 
        add_ln92_1_fu_240_p2;
    select_ln92_fu_292_p3 <= 
        ap_const_lv18_0 when (or_ln92_fu_287_p2(0) = '1') else 
        n2_fu_80;
    select_ln96_fu_479_p3 <= 
        add_ln95_reg_688_pp0_iter6_reg when (icmp_ln1548_reg_693_pp0_iter6_reg(0) = '1') else 
        ap_const_lv27_0;
        sext_ln712_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_534_p2),46));

    temp_V_fu_437_p2 <= std_logic_vector(unsigned(scores_target_V_q0) + unsigned(scores_source_V_q0));
    tmp_19_fu_455_p3 <= temp_V_fu_437_p2(27 downto 27);
    tmp_fu_184_p3 <= (grp_fu_2450_p_dout0 & ap_const_lv2_0);
    trunc_ln712_fu_433_p1 <= scores_target_V_q0(27 - 1 downto 0);
    trunc_ln91_fu_351_p1 <= mul_ln98_fu_345_p2(10 - 1 downto 0);
    trunc_ln92_fu_429_p1 <= scores_source_V_q0(27 - 1 downto 0);
    trunc_ln98_fu_300_p1 <= select_ln92_fu_292_p3(10 - 1 downto 0);
    zext_ln1245_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_485_p3),46));
    zext_ln712_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_reg_673),64));
    zext_ln93_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_fu_80),32));
    zext_ln98_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_reg_703),64));
end behav;
