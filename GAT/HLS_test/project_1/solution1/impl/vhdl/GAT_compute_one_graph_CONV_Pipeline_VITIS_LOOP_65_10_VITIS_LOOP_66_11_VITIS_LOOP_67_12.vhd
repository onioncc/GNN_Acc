-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_65_10_VITIS_LOOP_66_11_VITIS_LOOP_67_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln65_1 : IN STD_LOGIC_VECTOR (94 downto 0);
    mul_ln65 : IN STD_LOGIC_VECTOR (63 downto 0);
    icmp_ln67_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    scores_source_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_source_V_ce0 : OUT STD_LOGIC;
    scores_source_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    scores_target_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    scores_target_V_ce0 : OUT STD_LOGIC;
    scores_target_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_65_10_VITIS_LOOP_66_11_VITIS_LOOP_67_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv95_0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv95_1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv23_64 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001100100";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv45_CCCC : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001100110011001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln65_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n2_2_reg_612 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_211_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln65_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_622_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_622_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_622_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_626_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_626_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_626_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_253_fu_249_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_253_reg_634 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_253_reg_634_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_253_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln65_4_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_reg_644_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_reg_644_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_321_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_reg_652_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_reg_652_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_reg_652_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_reg_652_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln71_1_fu_328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln71_1_reg_657 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln71_1_reg_657_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_254_fu_361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_254_reg_667 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln71_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln71_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_257_fu_393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_257_reg_677 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln66_1_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_1_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_fu_413_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln712_reg_687 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_V_fu_451_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal temp_V_reg_702 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln68_fu_457_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln68_reg_708 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln68_reg_708_pp0_iter7_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln68_reg_708_pp0_iter8_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln68_reg_708_pp0_iter9_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_718_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_reg_718_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_543_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln71_1_reg_728 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln71_1_reg_728_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln71_1_reg_728_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_3_reg_733 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal select_ln66_2_cast_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln712_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_n2_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_3_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten23_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_4_fu_294_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal nh_fu_102 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln65_5_fu_280_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten45_fu_106 : STD_LOGIC_VECTOR (94 downto 0);
    signal add_ln65_1_fu_229_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal n2_cast_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_fu_238_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln65_fu_253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_1_fu_257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_261_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln67_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln66_1_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln66_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_254_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln71_fu_366_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln65_2_fu_369_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_250_fu_346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_354_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln65_2_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_256_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_255_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_372_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_3_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_535_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln65_3_fu_423_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln66_2_fu_428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln712_fu_447_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln66_fu_443_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal min_V_fu_476_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln69_fu_486_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_fu_492_p3 : STD_LOGIC_VECTOR (44 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1245_fu_500_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_fu_504_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_507_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_527_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_550_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_527_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_9s_8ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_mul_16ns_7ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_9s_7ns_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component GAT_compute_one_graph_ama_addmuladd_16ns_16ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_9s_8ns_9_1_1_U118 : component GAT_compute_one_graph_mul_9s_8ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        din0 => empty_253_reg_634_pp0_iter3_reg,
        din1 => empty_254_fu_361_p1,
        dout => empty_254_fu_361_p2);

    mul_mul_16ns_7ns_23_4_1_U119 : component GAT_compute_one_graph_mul_mul_16ns_7ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_527_p0,
        din1 => grp_fu_527_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p2);

    mac_muladd_9s_7ns_9ns_9_4_1_U120 : component GAT_compute_one_graph_mac_muladd_9s_7ns_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_617,
        din1 => grp_fu_535_p1,
        din2 => grp_fu_535_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p3);

    ama_addmuladd_16ns_16ns_7ns_16ns_16_4_1_U121 : component GAT_compute_one_graph_ama_addmuladd_16ns_16ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 7,
        din3_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln71_reg_672,
        din1 => select_ln66_1_reg_682,
        din2 => grp_fu_543_p2,
        din3 => select_ln66_reg_652_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_543_p4);

    mul_mul_28s_16ns_45_4_1_U122 : component GAT_compute_one_graph_mul_mul_28s_16ns_45_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 28,
        din1_WIDTH => 16,
        dout_WIDTH => 45)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_V_fu_476_p3,
        din1 => grp_fu_550_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);

    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten23_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten23_fu_98 <= ap_const_lv64_0;
                elsif (((icmp_ln65_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten23_fu_98 <= select_ln66_4_fu_294_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten45_fu_106 <= ap_const_lv95_0;
                elsif (((icmp_ln65_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten45_fu_106 <= add_ln65_1_fu_229_p2;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n1_fu_94 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln65_reg_622_pp0_iter3_reg = ap_const_lv1_0))) then 
                    n1_fu_94 <= select_ln66_3_fu_406_p3;
                end if;
            end if; 
        end if;
    end process;

    n2_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n2_fu_90 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln65_reg_622 = ap_const_lv1_0))) then 
                    n2_fu_90 <= add_ln67_fu_332_p2;
                end if;
            end if; 
        end if;
    end process;

    nh_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    nh_fu_102 <= ap_const_lv31_0;
                elsif (((icmp_ln65_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    nh_fu_102 <= select_ln65_5_fu_280_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln68_reg_708 <= add_ln68_fu_457_p2;
                add_ln68_reg_708_pp0_iter7_reg <= add_ln68_reg_708;
                add_ln68_reg_708_pp0_iter8_reg <= add_ln68_reg_708_pp0_iter7_reg;
                add_ln68_reg_708_pp0_iter9_reg <= add_ln68_reg_708_pp0_iter8_reg;
                add_ln71_1_reg_728_pp0_iter10_reg <= add_ln71_1_reg_728_pp0_iter9_reg;
                add_ln71_1_reg_728_pp0_iter9_reg <= add_ln71_1_reg_728;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_253_reg_634_pp0_iter2_reg <= empty_253_reg_634;
                empty_253_reg_634_pp0_iter3_reg <= empty_253_reg_634_pp0_iter2_reg;
                icmp_ln1548_reg_718 <= icmp_ln1548_fu_471_p2;
                icmp_ln1548_reg_718_pp0_iter8_reg <= icmp_ln1548_reg_718;
                icmp_ln1548_reg_718_pp0_iter9_reg <= icmp_ln1548_reg_718_pp0_iter8_reg;
                icmp_ln65_reg_622_pp0_iter2_reg <= icmp_ln65_reg_622;
                icmp_ln65_reg_622_pp0_iter3_reg <= icmp_ln65_reg_622_pp0_iter2_reg;
                icmp_ln65_reg_622_pp0_iter4_reg <= icmp_ln65_reg_622_pp0_iter3_reg;
                icmp_ln66_reg_626_pp0_iter2_reg <= icmp_ln66_reg_626;
                icmp_ln66_reg_626_pp0_iter3_reg <= icmp_ln66_reg_626_pp0_iter2_reg;
                icmp_ln66_reg_626_pp0_iter4_reg <= icmp_ln66_reg_626_pp0_iter3_reg;
                select_ln65_4_reg_644_pp0_iter2_reg <= select_ln65_4_reg_644;
                select_ln65_4_reg_644_pp0_iter3_reg <= select_ln65_4_reg_644_pp0_iter2_reg;
                select_ln65_4_reg_644_pp0_iter4_reg <= select_ln65_4_reg_644_pp0_iter3_reg;
                select_ln66_reg_652_pp0_iter3_reg <= select_ln66_reg_652;
                select_ln66_reg_652_pp0_iter4_reg <= select_ln66_reg_652_pp0_iter3_reg;
                select_ln66_reg_652_pp0_iter5_reg <= select_ln66_reg_652_pp0_iter4_reg;
                select_ln66_reg_652_pp0_iter6_reg <= select_ln66_reg_652_pp0_iter5_reg;
                temp_V_reg_702 <= temp_V_fu_451_p2;
                tmp_reg_713 <= temp_V_fu_451_p2(27 downto 27);
                trunc_ln717_3_reg_733 <= ret_V_fu_507_p2(45 downto 18);
                trunc_ln71_1_reg_657_pp0_iter3_reg <= trunc_ln71_1_reg_657;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln65_reg_622_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln712_reg_687 <= add_ln712_fu_413_p2;
                select_ln66_1_reg_682 <= select_ln66_1_fu_399_p3;
                trunc_ln71_reg_672 <= trunc_ln71_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                add_ln71_1_reg_728 <= grp_fu_543_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_reg_617 <= empty_fu_211_p1;
                icmp_ln65_reg_622 <= icmp_ln65_fu_224_p2;
                n2_2_reg_612 <= ap_sig_allocacmp_n2_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_253_reg_634 <= empty_253_fu_249_p1;
                icmp_ln66_reg_626 <= icmp_ln66_fu_244_p2;
                select_ln65_4_reg_644 <= select_ln65_4_fu_273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln65_4_reg_644_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln66_reg_626_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln65_reg_622_pp0_iter3_reg = ap_const_lv1_0))) then
                empty_254_reg_667 <= empty_254_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln65_4_reg_644_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln65_reg_622_pp0_iter3_reg = ap_const_lv1_0))) then
                empty_257_reg_677 <= empty_257_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln65_reg_622 = ap_const_lv1_0))) then
                select_ln66_reg_652 <= select_ln66_fu_321_p3;
                trunc_ln71_1_reg_657 <= trunc_ln71_1_fu_328_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln65_1_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten45_fu_106) + unsigned(ap_const_lv95_1));
    add_ln65_fu_238_p2 <= std_logic_vector(unsigned(nh_fu_102) + unsigned(ap_const_lv31_1));
    add_ln66_1_fu_288_p2 <= std_logic_vector(unsigned(indvar_flatten23_fu_98) + unsigned(ap_const_lv64_1));
    add_ln66_fu_379_p2 <= std_logic_vector(unsigned(select_ln65_fu_354_p3) + unsigned(ap_const_lv32_1));
    add_ln67_fu_332_p2 <= std_logic_vector(unsigned(select_ln66_fu_321_p3) + unsigned(ap_const_lv16_1));
    add_ln68_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln712_fu_447_p1) + unsigned(trunc_ln66_fu_443_p1));
    add_ln712_fu_413_p2 <= std_logic_vector(unsigned(trunc_ln65_2_fu_369_p1) + unsigned(trunc_ln71_1_reg_657_pp0_iter3_reg));
    all_scores_V_address1 <= zext_ln71_1_fu_523_p1(16 - 1 downto 0);

    all_scores_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= trunc_ln717_3_reg_733;

    all_scores_V_we1_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln65_fu_224_p2)
    begin
        if (((icmp_ln65_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, icmp_ln65_reg_622_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln65_reg_622_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_2_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln65_reg_622, ap_block_pp0_stage0, n2_fu_90, add_ln67_fu_332_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln65_reg_622 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_n2_2 <= add_ln67_fu_332_p2;
        else 
            ap_sig_allocacmp_n2_2 <= n2_fu_90;
        end if; 
    end process;

    empty_250_fu_346_p1 <= n1_fu_94(16 - 1 downto 0);
    empty_253_fu_249_p1 <= add_ln65_fu_238_p2(9 - 1 downto 0);
    empty_254_fu_361_p1 <= ap_const_lv9_64(8 - 1 downto 0);
    empty_255_fu_385_p1 <= add_ln66_fu_379_p2(16 - 1 downto 0);
    empty_256_fu_389_p1 <= add_ln66_fu_379_p2(9 - 1 downto 0);
    empty_257_fu_393_p2 <= std_logic_vector(unsigned(trunc_ln65_2_fu_369_p1) + unsigned(empty_256_fu_389_p1));
    empty_fu_211_p1 <= nh_fu_102(9 - 1 downto 0);
    grp_fu_527_p0 <= grp_fu_527_p00(16 - 1 downto 0);
    grp_fu_527_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_1_fu_261_p3),23));
    grp_fu_527_p1 <= ap_const_lv23_64(7 - 1 downto 0);
    grp_fu_535_p1 <= ap_const_lv9_64(7 - 1 downto 0);
    grp_fu_535_p2 <= n1_fu_94(9 - 1 downto 0);
    grp_fu_543_p2 <= ap_const_lv16_64(7 - 1 downto 0);
    grp_fu_550_p1 <= ap_const_lv45_CCCC(16 - 1 downto 0);
    icmp_ln1548_fu_471_p2 <= "1" when (signed(temp_V_reg_702) > signed(ap_const_lv28_0)) else "0";
    icmp_ln65_fu_224_p2 <= "1" when (indvar_flatten45_fu_106 = mul_ln65_1) else "0";
    icmp_ln66_fu_244_p2 <= "1" when (indvar_flatten23_fu_98 = mul_ln65) else "0";
    icmp_ln67_fu_219_p2 <= "1" when (n2_cast_fu_215_p1 = num_of_nodes) else "0";
    lhs_fu_492_p3 <= (select_ln69_fu_486_p3 & ap_const_lv18_0);
    min_V_fu_476_p3 <= 
        temp_V_reg_702 when (tmp_reg_713(0) = '1') else 
        ap_const_lv28_0;
    n2_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_n2_2),32));
    or_ln66_fu_317_p2 <= (select_ln65_4_reg_644 or icmp_ln66_reg_626);
    ret_V_fu_507_p2 <= std_logic_vector(unsigned(zext_ln1245_fu_500_p1) + unsigned(sext_ln712_fu_504_p1));
    scores_source_V_address0 <= select_ln66_2_cast_fu_434_p1(9 - 1 downto 0);

    scores_source_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            scores_source_V_ce0 <= ap_const_logic_1;
        else 
            scores_source_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scores_target_V_address0 <= zext_ln712_fu_439_p1(9 - 1 downto 0);

    scores_target_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            scores_target_V_ce0 <= ap_const_logic_1;
        else 
            scores_target_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln65_1_fu_261_p3 <= 
        trunc_ln65_fu_253_p1 when (icmp_ln66_fu_244_p2(0) = '1') else 
        trunc_ln65_1_fu_257_p1;
    select_ln65_2_fu_372_p3 <= 
        ap_const_lv16_0 when (icmp_ln66_reg_626_pp0_iter3_reg(0) = '1') else 
        empty_250_fu_346_p1;
    select_ln65_3_fu_423_p2 <= grp_fu_535_p3;
    select_ln65_3_fu_423_p3 <= 
        empty_254_reg_667 when (icmp_ln66_reg_626_pp0_iter4_reg(0) = '1') else 
        select_ln65_3_fu_423_p2;
    select_ln65_4_fu_273_p3 <= 
        icmp_ln67_1 when (icmp_ln66_fu_244_p2(0) = '1') else 
        icmp_ln67_fu_219_p2;
    select_ln65_5_fu_280_p3 <= 
        add_ln65_fu_238_p2 when (icmp_ln66_fu_244_p2(0) = '1') else 
        nh_fu_102;
    select_ln65_fu_354_p3 <= 
        ap_const_lv32_0 when (icmp_ln66_reg_626_pp0_iter3_reg(0) = '1') else 
        n1_fu_94;
    select_ln66_1_fu_399_p3 <= 
        empty_255_fu_385_p1 when (select_ln65_4_reg_644_pp0_iter3_reg(0) = '1') else 
        select_ln65_2_fu_372_p3;
    select_ln66_2_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_2_fu_428_p3),64));
    select_ln66_2_fu_428_p3 <= 
        empty_257_reg_677 when (select_ln65_4_reg_644_pp0_iter4_reg(0) = '1') else 
        select_ln65_3_fu_423_p3;
    select_ln66_3_fu_406_p3 <= 
        add_ln66_fu_379_p2 when (select_ln65_4_reg_644_pp0_iter3_reg(0) = '1') else 
        select_ln65_fu_354_p3;
    select_ln66_4_fu_294_p3 <= 
        ap_const_lv64_1 when (icmp_ln66_fu_244_p2(0) = '1') else 
        add_ln66_1_fu_288_p2;
    select_ln66_fu_321_p3 <= 
        ap_const_lv16_0 when (or_ln66_fu_317_p2(0) = '1') else 
        n2_2_reg_612;
    select_ln69_fu_486_p3 <= 
        add_ln68_reg_708_pp0_iter9_reg when (icmp_ln1548_reg_718_pp0_iter9_reg(0) = '1') else 
        ap_const_lv27_0;
        sext_ln712_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_550_p2),46));

    temp_V_fu_451_p2 <= std_logic_vector(unsigned(scores_target_V_q0) + unsigned(scores_source_V_q0));
    trunc_ln65_1_fu_257_p1 <= nh_fu_102(16 - 1 downto 0);
    trunc_ln65_2_fu_369_p0 <= grp_fu_527_p2;
    trunc_ln65_2_fu_369_p1 <= trunc_ln65_2_fu_369_p0(9 - 1 downto 0);
    trunc_ln65_fu_253_p1 <= add_ln65_fu_238_p2(16 - 1 downto 0);
    trunc_ln66_fu_443_p1 <= scores_source_V_q0(27 - 1 downto 0);
    trunc_ln712_fu_447_p1 <= scores_target_V_q0(27 - 1 downto 0);
    trunc_ln71_1_fu_328_p1 <= select_ln66_fu_321_p3(9 - 1 downto 0);
    trunc_ln71_fu_366_p0 <= grp_fu_527_p2;
    trunc_ln71_fu_366_p1 <= trunc_ln71_fu_366_p0(16 - 1 downto 0);
    zext_ln1245_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_492_p3),46));
    zext_ln712_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_reg_687),64));
    zext_ln71_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_1_reg_728_pp0_iter10_reg),64));
end behav;
