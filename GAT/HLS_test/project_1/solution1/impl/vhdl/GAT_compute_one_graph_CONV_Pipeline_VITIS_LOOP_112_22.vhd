-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_112_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_nodes_features_V_load : IN STD_LOGIC_VECTOR (27 downto 0);
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln1169_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln109_2 : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln111 : IN STD_LOGIC_VECTOR (12 downto 0);
    lhs_8_out : OUT STD_LOGIC_VECTOR (27 downto 0);
    lhs_8_out_ap_vld : OUT STD_LOGIC;
    all_attention_coefficients_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_attention_coefficients_V_ce0 : OUT STD_LOGIC;
    all_attention_coefficients_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    nodes_features_proj_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    nodes_features_proj_V_ce0 : OUT STD_LOGIC;
    nodes_features_proj_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_2684_p_din0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_2684_p_din1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_fu_2684_p_dout0 : IN STD_LOGIC_VECTOR (45 downto 0);
    grp_fu_2684_p_ce : OUT STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_112_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln112_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln112_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_291_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_291_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_291_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_291_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1169_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1169_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1171_fu_192_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1171_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_reg_315 : STD_LOGIC_VECTOR (27 downto 0);
    signal nodes_features_proj_V_load_reg_320 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1168_fu_224_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1171_fu_227_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_11_reg_335 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln1169_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1171_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_70 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n2_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_n2_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln112_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1169_fu_170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1171_2_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_cast_fu_184_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1171_fu_141_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_46_cast_fu_207_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1171_1_fu_214_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_5_fu_239_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_247_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_mul_28s_28s_46_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    lhs_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_70 <= out_nodes_features_V_load;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    lhs_fu_70 <= ret_V_fu_247_p2(45 downto 18);
                end if;
            end if; 
        end if;
    end process;

    n2_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n2_fu_74 <= add_ln112_fu_164_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_74 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_158_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1169_reg_295 <= add_ln1169_fu_174_p2;
                add_ln1171_reg_300 <= add_ln1171_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln112_reg_291 <= icmp_ln112_fu_158_p2;
                icmp_ln112_reg_291_pp0_iter1_reg <= icmp_ln112_reg_291;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln112_reg_291_pp0_iter2_reg <= icmp_ln112_reg_291_pp0_iter1_reg;
                icmp_ln112_reg_291_pp0_iter3_reg <= icmp_ln112_reg_291_pp0_iter2_reg;
                icmp_ln112_reg_291_pp0_iter4_reg <= icmp_ln112_reg_291_pp0_iter3_reg;
                nodes_features_proj_V_load_reg_320 <= nodes_features_proj_V_q0;
                r_V_11_reg_335 <= grp_fu_2684_p_dout0;
                r_V_reg_315 <= all_attention_coefficients_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln112_fu_164_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_3) + unsigned(ap_const_lv32_1));
    add_ln1169_fu_174_p2 <= std_logic_vector(unsigned(mul_ln1169_1) + unsigned(trunc_ln1169_fu_170_p1));
    add_ln1171_1_fu_214_p2 <= std_logic_vector(unsigned(tmp_46_cast_fu_207_p3) + unsigned(zext_ln111));
    add_ln1171_fu_192_p2 <= std_logic_vector(unsigned(tmp_44_cast_fu_184_p3) + unsigned(trunc_ln1171_fu_141_p1));
    all_attention_coefficients_V_address0 <= zext_ln1169_fu_203_p1(16 - 1 downto 0);

    all_attention_coefficients_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            all_attention_coefficients_V_ce0 <= ap_const_logic_1;
        else 
            all_attention_coefficients_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln112_fu_158_p2)
    begin
        if (((icmp_ln112_fu_158_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n2_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n2_3 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_n2_3 <= n2_fu_74;
        end if; 
    end process;

    grp_fu_2684_p_ce <= ap_const_logic_1;
    grp_fu_2684_p_din0 <= sext_ln1171_fu_227_p1(28 - 1 downto 0);
    grp_fu_2684_p_din1 <= sext_ln1168_fu_224_p1(28 - 1 downto 0);
    icmp_ln112_fu_158_p2 <= "1" when (ap_sig_allocacmp_n2_3 = num_of_nodes) else "0";
    lhs_5_fu_239_p3 <= (lhs_fu_70 & ap_const_lv18_0);
    lhs_8_out <= lhs_fu_70;

    lhs_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln112_reg_291_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln112_reg_291_pp0_iter4_reg = ap_const_lv1_1))) then 
            lhs_8_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    nodes_features_proj_V_address0 <= zext_ln1171_fu_219_p1(13 - 1 downto 0);

    nodes_features_proj_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nodes_features_proj_V_ce0 <= ap_const_logic_1;
        else 
            nodes_features_proj_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_247_p2 <= std_logic_vector(unsigned(lhs_5_fu_239_p3) + unsigned(r_V_11_reg_335));
        sext_ln1168_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_315),46));

        sext_ln1171_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(nodes_features_proj_V_load_reg_320),46));

    tmp_44_cast_fu_184_p3 <= (trunc_ln1171_2_fu_180_p1 & ap_const_lv2_0);
    tmp_46_cast_fu_207_p3 <= (add_ln1171_reg_300 & ap_const_lv4_0);
    trunc_ln1169_fu_170_p1 <= ap_sig_allocacmp_n2_3(16 - 1 downto 0);
    trunc_ln1171_2_fu_180_p1 <= ap_sig_allocacmp_n2_3(7 - 1 downto 0);
    trunc_ln1171_fu_141_p1 <= zext_ln109_2(9 - 1 downto 0);
    zext_ln1169_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_reg_295),64));
    zext_ln1171_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_1_fu_214_p2),64));
end behav;
