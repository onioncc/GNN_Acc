-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_compute_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_nodes_features_skip_concat_bias_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_nodes_features_skip_concat_bias_V_ce0 : OUT STD_LOGIC;
    out_nodes_features_skip_concat_bias_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    out_nodes_features_skip_concat_bias_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_nodes_features_skip_concat_bias_V_ce1 : OUT STD_LOGIC;
    out_nodes_features_skip_concat_bias_V_we1 : OUT STD_LOGIC;
    out_nodes_features_skip_concat_bias_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_308_p_ce : OUT STD_LOGIC;
    grp_exp_28_10_s_fu_308_p_start : OUT STD_LOGIC;
    grp_exp_28_10_s_fu_308_p_ready : IN STD_LOGIC;
    grp_exp_28_10_s_fu_308_p_done : IN STD_LOGIC;
    grp_exp_28_10_s_fu_308_p_idle : IN STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_compute_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_4C0 : STD_LOGIC_VECTOR (10 downto 0) := "10011000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv28_FFC0000 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln193_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln193_fu_160_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln193_reg_260 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln193_1_fu_168_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln193_1_reg_265 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal x_V_reg_276 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln1550_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1550_reg_281_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_exp_28_10_s_fu_97_ap_ready : STD_LOGIC;
    signal grp_exp_28_10_s_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1550_1_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dim_out_fu_68 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_dim_out_load : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln194_fu_176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal nd_fu_72 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_nd_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln193_1_fu_136_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln194_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln193_fu_148_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_197_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_204_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1550_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1550_fu_211_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_exp_28_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (27 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_28_10_s_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_28_10_s_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1550_fu_222_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_28_10_s_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_28_10_s_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_exp_28_10_s_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_out_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln193_fu_130_p2 = ap_const_lv1_0))) then 
                    dim_out_fu_68 <= add_ln194_fu_176_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    dim_out_fu_68 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln193_fu_130_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_76 <= add_ln193_1_fu_136_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_76 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    nd_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln193_fu_130_p2 = ap_const_lv1_0))) then 
                    nd_fu_72 <= select_ln193_1_fu_168_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    nd_fu_72 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1550_reg_281 <= icmp_ln1550_fu_222_p2;
                icmp_ln1550_reg_281_pp0_iter10_reg <= icmp_ln1550_reg_281_pp0_iter9_reg;
                icmp_ln1550_reg_281_pp0_iter11_reg <= icmp_ln1550_reg_281_pp0_iter10_reg;
                icmp_ln1550_reg_281_pp0_iter12_reg <= icmp_ln1550_reg_281_pp0_iter11_reg;
                icmp_ln1550_reg_281_pp0_iter13_reg <= icmp_ln1550_reg_281_pp0_iter12_reg;
                icmp_ln1550_reg_281_pp0_iter14_reg <= icmp_ln1550_reg_281_pp0_iter13_reg;
                icmp_ln1550_reg_281_pp0_iter15_reg <= icmp_ln1550_reg_281_pp0_iter14_reg;
                icmp_ln1550_reg_281_pp0_iter16_reg <= icmp_ln1550_reg_281_pp0_iter15_reg;
                icmp_ln1550_reg_281_pp0_iter17_reg <= icmp_ln1550_reg_281_pp0_iter16_reg;
                icmp_ln1550_reg_281_pp0_iter18_reg <= icmp_ln1550_reg_281_pp0_iter17_reg;
                icmp_ln1550_reg_281_pp0_iter19_reg <= icmp_ln1550_reg_281_pp0_iter18_reg;
                icmp_ln1550_reg_281_pp0_iter20_reg <= icmp_ln1550_reg_281_pp0_iter19_reg;
                icmp_ln1550_reg_281_pp0_iter3_reg <= icmp_ln1550_reg_281;
                icmp_ln1550_reg_281_pp0_iter4_reg <= icmp_ln1550_reg_281_pp0_iter3_reg;
                icmp_ln1550_reg_281_pp0_iter5_reg <= icmp_ln1550_reg_281_pp0_iter4_reg;
                icmp_ln1550_reg_281_pp0_iter6_reg <= icmp_ln1550_reg_281_pp0_iter5_reg;
                icmp_ln1550_reg_281_pp0_iter7_reg <= icmp_ln1550_reg_281_pp0_iter6_reg;
                icmp_ln1550_reg_281_pp0_iter8_reg <= icmp_ln1550_reg_281_pp0_iter7_reg;
                icmp_ln1550_reg_281_pp0_iter9_reg <= icmp_ln1550_reg_281_pp0_iter8_reg;
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter10_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter9_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter11_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter10_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter12_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter11_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter13_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter12_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter14_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter13_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter15_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter14_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter16_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter15_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter17_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter16_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter18_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter17_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter19_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter18_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter20_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter19_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter2_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter3_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter2_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter4_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter3_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter5_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter4_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter6_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter5_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter7_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter6_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter8_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter7_reg(11 downto 0);
                    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter9_reg(11 downto 0) <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter8_reg(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    out_nodes_features_skip_concat_bias_V_addr_reg_270(11 downto 0) <= zext_ln1550_1_fu_217_p1(13 - 1 downto 0)(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln193_fu_130_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln193_1_reg_265 <= select_ln193_1_fu_168_p3;
                select_ln193_reg_260 <= select_ln193_fu_160_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_V_reg_276 <= out_nodes_features_skip_concat_bias_V_q0;
            end if;
        end if;
    end process;
    out_nodes_features_skip_concat_bias_V_addr_reg_270(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter2_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter3_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter4_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter5_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter6_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter7_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter8_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter9_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter10_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter11_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter12_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter13_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter14_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter15_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter16_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter17_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter18_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter19_reg(12) <= '0';
    out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter20_reg(12) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1550_fu_211_p2 <= std_logic_vector(unsigned(tmp_cast_fu_204_p1) + unsigned(zext_ln1550_fu_208_p1));
    add_ln193_1_fu_136_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln193_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_nd_load) + unsigned(ap_const_lv5_1));
    add_ln194_fu_176_p2 <= std_logic_vector(unsigned(select_ln193_fu_160_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln193_fu_130_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln193_fu_130_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_dim_out_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, dim_out_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_dim_out_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_dim_out_load <= dim_out_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_76)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_nd_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nd_fu_72)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_nd_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_nd_load <= nd_fu_72;
        end if; 
    end process;

    grp_exp_28_10_s_fu_308_p_ce <= ap_const_logic_1;
    grp_exp_28_10_s_fu_308_p_din1 <= x_V_reg_276;
    grp_exp_28_10_s_fu_308_p_start <= grp_exp_28_10_s_fu_97_ap_start_reg;
    grp_exp_28_10_s_fu_97_ap_ready <= grp_exp_28_10_s_fu_308_p_ready;
    icmp_ln1550_fu_222_p2 <= "1" when (signed(out_nodes_features_skip_concat_bias_V_q0) < signed(ap_const_lv28_1)) else "0";
    icmp_ln193_fu_130_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_4C0) else "0";
    icmp_ln194_fu_154_p2 <= "1" when (ap_sig_allocacmp_dim_out_load = ap_const_lv7_40) else "0";
    out_nodes_features_skip_concat_bias_V_address0 <= zext_ln1550_1_fu_217_p1(13 - 1 downto 0);
    out_nodes_features_skip_concat_bias_V_address1 <= out_nodes_features_skip_concat_bias_V_addr_reg_270_pp0_iter20_reg;

    out_nodes_features_skip_concat_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_nodes_features_skip_concat_bias_V_ce0 <= ap_const_logic_1;
        else 
            out_nodes_features_skip_concat_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_nodes_features_skip_concat_bias_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_nodes_features_skip_concat_bias_V_ce1 <= ap_const_logic_1;
        else 
            out_nodes_features_skip_concat_bias_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_nodes_features_skip_concat_bias_V_d1 <= std_logic_vector(unsigned(grp_exp_28_10_s_fu_308_p_dout0) + unsigned(ap_const_lv28_FFC0000));

    out_nodes_features_skip_concat_bias_V_we1_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001, icmp_ln1550_reg_281_pp0_iter20_reg)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln1550_reg_281_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_nodes_features_skip_concat_bias_V_we1 <= ap_const_logic_1;
        else 
            out_nodes_features_skip_concat_bias_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln193_1_fu_168_p3 <= 
        add_ln193_fu_148_p2 when (icmp_ln194_fu_154_p2(0) = '1') else 
        ap_sig_allocacmp_nd_load;
    select_ln193_fu_160_p3 <= 
        ap_const_lv7_0 when (icmp_ln194_fu_154_p2(0) = '1') else 
        ap_sig_allocacmp_dim_out_load;
    tmp_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_197_p3),12));
    tmp_fu_197_p3 <= (select_ln193_1_reg_265 & ap_const_lv6_0);
    zext_ln1550_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1550_fu_211_p2),64));
    zext_ln1550_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln193_reg_260),12));
end behav;
