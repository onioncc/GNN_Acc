-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_132_23_VITIS_LOOP_133_24_VITIS_LOOP_134_25 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_out_features : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln132_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln132 : IN STD_LOGIC_VECTOR (63 downto 0);
    icmp_ln134_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    out_nodes_features_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_nodes_features_V_ce0 : OUT STD_LOGIC;
    out_nodes_features_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    out_nodes_features_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_nodes_features_V_ce1 : OUT STD_LOGIC;
    out_nodes_features_V_we1 : OUT STD_LOGIC;
    out_nodes_features_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    out_nodes_features_skip_concat_bias_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_nodes_features_skip_concat_bias_V_ce0 : OUT STD_LOGIC;
    out_nodes_features_skip_concat_bias_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_132_23_VITIS_LOOP_133_24_VITIS_LOOP_134_25 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln132_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln132_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_reg_434_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln133_fu_258_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln133_reg_442 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln133_reg_442_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln712_3_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln712_3_reg_449 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln712_2_fu_311_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln712_2_reg_454 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln712_6_fu_315_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln712_6_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_nodes_features_V_addr_reg_464 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_nodes_features_V_addr_reg_464_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_3_fu_369_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln712_3_reg_475 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln712_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln712_5_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fout_fu_74 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln134_fu_320_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_fout_3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal nh_fu_78 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln133_1_fu_266_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten129_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln133_2_fu_201_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal n1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln132_1_fu_292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten148_fu_90 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln132_1_fu_181_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln133_1_fu_195_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fout_3_cast_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln134_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln132_fu_234_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln132_2_fu_241_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln133_fu_247_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln132_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln712_fu_299_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_cast_fu_303_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_cast_fu_342_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_fu_349_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_cast_fu_335_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_7_fu_359_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    fout_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    fout_fu_74 <= ap_const_lv13_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    fout_fu_74 <= add_ln134_fu_320_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten129_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten129_fu_82 <= ap_const_lv64_0;
                elsif (((icmp_ln132_fu_176_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten129_fu_82 <= select_ln133_2_fu_201_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten148_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten148_fu_90 <= ap_const_lv96_0;
                elsif (((icmp_ln132_fu_176_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten148_fu_90 <= add_ln132_1_fu_181_p2;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    n1_fu_86 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    n1_fu_86 <= select_ln132_1_fu_292_p3;
                end if;
            end if; 
        end if;
    end process;

    nh_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    nh_fu_78 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln132_reg_430 = ap_const_lv1_0))) then 
                    nh_fu_78 <= select_ln133_1_fu_266_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln712_3_reg_475 <= add_ln712_3_fu_369_p2;
                add_ln712_6_reg_459 <= add_ln712_6_fu_315_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln133_reg_434_pp0_iter2_reg <= icmp_ln133_reg_434;
                out_nodes_features_V_addr_reg_464 <= zext_ln712_fu_354_p1(13 - 1 downto 0);
                out_nodes_features_V_addr_reg_464_pp0_iter5_reg <= out_nodes_features_V_addr_reg_464;
                select_ln133_reg_442_pp0_iter3_reg <= select_ln133_reg_442;
                trunc_ln712_2_reg_454 <= trunc_ln712_2_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln132_reg_430 <= icmp_ln132_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_176_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln133_reg_434 <= icmp_ln133_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln132_reg_430 = ap_const_lv1_0))) then
                select_ln133_reg_442 <= select_ln133_fu_258_p3;
                trunc_ln712_3_reg_449 <= trunc_ln712_3_fu_274_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln132_1_fu_181_p2 <= std_logic_vector(unsigned(indvar_flatten148_fu_90) + unsigned(ap_const_lv96_1));
    add_ln132_fu_286_p2 <= std_logic_vector(unsigned(n1_fu_86) + unsigned(ap_const_lv32_1));
    add_ln133_1_fu_195_p2 <= std_logic_vector(unsigned(indvar_flatten129_fu_82) + unsigned(ap_const_lv64_1));
    add_ln133_fu_247_p2 <= std_logic_vector(unsigned(select_ln132_fu_234_p3) + unsigned(ap_const_lv31_1));
    add_ln134_fu_320_p2 <= std_logic_vector(unsigned(select_ln133_reg_442) + unsigned(ap_const_lv13_1));
    add_ln712_3_fu_369_p2 <= std_logic_vector(unsigned(out_nodes_features_skip_concat_bias_V_q0) + unsigned(out_nodes_features_V_q0));
    add_ln712_6_fu_315_p2 <= std_logic_vector(unsigned(tmp_48_cast_fu_303_p3) + unsigned(trunc_ln712_3_reg_449));
    add_ln712_7_fu_359_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_335_p3) + unsigned(select_ln133_reg_442_pp0_iter3_reg));
    add_ln712_fu_349_p2 <= std_logic_vector(unsigned(tmp_51_cast_fu_342_p3) + unsigned(select_ln133_reg_442_pp0_iter3_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln132_fu_176_p2)
    begin
        if (((icmp_ln132_fu_176_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln132_reg_430)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln132_reg_430 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_fout_3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, fout_fu_74, add_ln134_fu_320_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_fout_3 <= add_ln134_fu_320_p2;
        else 
            ap_sig_allocacmp_fout_3 <= fout_fu_74;
        end if; 
    end process;

    fout_3_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_fout_3),32));
    icmp_ln132_fu_176_p2 <= "1" when (indvar_flatten148_fu_90 = mul_ln132_1) else "0";
    icmp_ln133_fu_190_p2 <= "1" when (indvar_flatten129_fu_82 = mul_ln132) else "0";
    icmp_ln134_fu_226_p2 <= "1" when (fout_3_cast_fu_222_p1 = num_out_features) else "0";
    or_ln133_fu_253_p2 <= (select_ln132_2_fu_241_p3 or icmp_ln133_reg_434);
    out_nodes_features_V_address0 <= zext_ln712_fu_354_p1(13 - 1 downto 0);
    out_nodes_features_V_address1 <= out_nodes_features_V_addr_reg_464_pp0_iter5_reg;

    out_nodes_features_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_nodes_features_V_ce0 <= ap_const_logic_1;
        else 
            out_nodes_features_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_nodes_features_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_nodes_features_V_ce1 <= ap_const_logic_1;
        else 
            out_nodes_features_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_nodes_features_V_d1 <= add_ln712_3_reg_475;

    out_nodes_features_V_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_nodes_features_V_we1 <= ap_const_logic_1;
        else 
            out_nodes_features_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    out_nodes_features_skip_concat_bias_V_address0 <= zext_ln712_5_fu_364_p1(13 - 1 downto 0);

    out_nodes_features_skip_concat_bias_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_nodes_features_skip_concat_bias_V_ce0 <= ap_const_logic_1;
        else 
            out_nodes_features_skip_concat_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln132_1_fu_292_p3 <= 
        add_ln132_fu_286_p2 when (icmp_ln133_reg_434_pp0_iter2_reg(0) = '1') else 
        n1_fu_86;
    select_ln132_2_fu_241_p3 <= 
        icmp_ln134_1 when (icmp_ln133_reg_434(0) = '1') else 
        icmp_ln134_fu_226_p2;
    select_ln132_fu_234_p3 <= 
        ap_const_lv31_0 when (icmp_ln133_reg_434(0) = '1') else 
        nh_fu_78;
    select_ln133_1_fu_266_p3 <= 
        add_ln133_fu_247_p2 when (select_ln132_2_fu_241_p3(0) = '1') else 
        select_ln132_fu_234_p3;
    select_ln133_2_fu_201_p3 <= 
        ap_const_lv64_1 when (icmp_ln133_fu_190_p2(0) = '1') else 
        add_ln133_1_fu_195_p2;
    select_ln133_fu_258_p3 <= 
        ap_const_lv13_0 when (or_ln133_fu_253_p2(0) = '1') else 
        ap_sig_allocacmp_fout_3;
    tmp_48_cast_fu_303_p3 <= (trunc_ln712_fu_299_p1 & ap_const_lv2_0);
    tmp_49_cast_fu_335_p3 <= (trunc_ln712_2_reg_454 & ap_const_lv6_0);
    tmp_51_cast_fu_342_p3 <= (add_ln712_6_reg_459 & ap_const_lv4_0);
    trunc_ln712_2_fu_311_p1 <= select_ln132_1_fu_292_p3(7 - 1 downto 0);
    trunc_ln712_3_fu_274_p1 <= select_ln133_1_fu_266_p3(9 - 1 downto 0);
    trunc_ln712_fu_299_p1 <= select_ln132_1_fu_292_p3(7 - 1 downto 0);
    zext_ln712_5_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_7_fu_359_p2),64));
    zext_ln712_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_fu_349_p2),64));
end behav;
