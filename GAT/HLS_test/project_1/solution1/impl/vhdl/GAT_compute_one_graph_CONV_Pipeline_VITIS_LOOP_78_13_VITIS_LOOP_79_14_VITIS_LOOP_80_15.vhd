-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_78_13_VITIS_LOOP_79_14_VITIS_LOOP_80_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln65_1 : IN STD_LOGIC_VECTOR (94 downto 0);
    mul_ln65 : IN STD_LOGIC_VECTOR (63 downto 0);
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln67_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    all_scores_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce0 : OUT STD_LOGIC;
    all_scores_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    all_scores_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    all_scores_V_ce1 : OUT STD_LOGIC;
    all_scores_V_we1 : OUT STD_LOGIC;
    all_scores_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    connectivity_mask_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    connectivity_mask_ce0 : OUT STD_LOGIC;
    connectivity_mask_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    attention_coefficients_sum_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    attention_coefficients_sum_V_ce0 : OUT STD_LOGIC;
    attention_coefficients_sum_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    attention_coefficients_sum_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    attention_coefficients_sum_V_ce1 : OUT STD_LOGIC;
    attention_coefficients_sum_V_we1 : OUT STD_LOGIC;
    attention_coefficients_sum_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_2688_p_din1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_2688_p_dout0 : IN STD_LOGIC_VECTOR (27 downto 0);
    grp_exp_28_10_s_fu_2688_p_start : OUT STD_LOGIC;
    grp_exp_28_10_s_fu_2688_p_ready : IN STD_LOGIC;
    grp_exp_28_10_s_fu_2688_p_done : IN STD_LOGIC;
    grp_exp_28_10_s_fu_2688_p_idle : IN STD_LOGIC );
end;


architecture behav of GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_78_13_VITIS_LOOP_79_14_VITIS_LOOP_80_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv95_0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv95_1 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln78_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln78_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln79_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal n2_1_load_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln78_3_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln78_3_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_1_fu_329_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln79_1_reg_518 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln81_fu_337_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln81_reg_523 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln84_1_fu_370_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln84_1_reg_528 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln84_2_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln84_2_reg_533 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln84_2_reg_533_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln84_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549 : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal attention_coefficients_sum_V_addr_reg_549_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln81_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_555_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal attention_coefficients_sum_V_load_reg_564 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_exp_28_10_s_fu_174_ap_ready : STD_LOGIC;
    signal grp_exp_28_10_s_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln81_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_1_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n1_1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_2_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten55_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln79_3_fu_246_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal nh_fu_94 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln78_1_fu_286_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten69_fu_98 : STD_LOGIC_VECTOR (94 downto 0);
    signal add_ln78_1_fu_223_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal add_ln79_1_fu_240_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_fu_273_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln78_fu_297_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln80_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln78_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln79_fu_325_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln78_2_fu_301_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln79_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln81_fu_389_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_420_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln84_1_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_413_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_427_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GAT_compute_one_graph_exp_28_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (27 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_16s_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_14s_7ns_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component GAT_compute_one_graph_mac_muladd_16ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_16s_7ns_16ns_16_4_1_U148 : component GAT_compute_one_graph_mac_muladd_16s_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_413_p0,
        din1 => grp_fu_413_p1,
        din2 => select_ln79_1_reg_518,
        ce => ap_const_logic_1,
        dout => grp_fu_413_p3);

    mac_muladd_14s_7ns_14ns_14_4_1_U149 : component GAT_compute_one_graph_mac_muladd_14s_7ns_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 7,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln81_reg_523,
        din1 => grp_fu_420_p1,
        din2 => trunc_ln84_1_reg_528,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p3);

    mac_muladd_16ns_7ns_16ns_16_4_1_U150 : component GAT_compute_one_graph_mac_muladd_16ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln84_reg_538,
        din1 => grp_fu_427_p1,
        din2 => trunc_ln84_2_reg_533_pp0_iter2_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p3);

    flow_control_loop_pipe_sequential_init_U : component GAT_compute_one_graph_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_28_10_s_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_28_10_s_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln81_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    grp_exp_28_10_s_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_28_10_s_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_exp_28_10_s_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten55_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten55_fu_90 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln78_fu_218_p2 = ap_const_lv1_0))) then 
                indvar_flatten55_fu_90 <= select_ln79_3_fu_246_p3;
            end if; 
        end if;
    end process;

    indvar_flatten69_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten69_fu_98 <= ap_const_lv95_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln78_fu_218_p2 = ap_const_lv1_0))) then 
                indvar_flatten69_fu_98 <= add_ln78_1_fu_223_p2;
            end if; 
        end if;
    end process;

    n1_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n1_1_fu_86 <= ap_const_lv32_0;
            elsif (((icmp_ln78_reg_490 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                n1_1_fu_86 <= select_ln79_2_fu_341_p3;
            end if; 
        end if;
    end process;

    n2_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n2_1_fu_82 <= ap_const_lv32_0;
                elsif (((icmp_ln78_reg_490 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    n2_1_fu_82 <= add_ln80_fu_378_p2;
                end if;
            end if; 
        end if;
    end process;

    nh_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                nh_fu_94 <= ap_const_lv31_0;
            elsif (((icmp_ln78_reg_490 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                nh_fu_94 <= select_ln78_1_fu_286_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln84_reg_538 <= grp_fu_413_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                attention_coefficients_sum_V_addr_reg_549 <= zext_ln84_fu_393_p1(9 - 1 downto 0);
                attention_coefficients_sum_V_addr_reg_549_pp0_iter3_reg <= attention_coefficients_sum_V_addr_reg_549;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter4_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter3_reg;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter5_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter4_reg;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter6_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter5_reg;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter7_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter6_reg;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter8_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter7_reg;
                attention_coefficients_sum_V_addr_reg_549_pp0_iter9_reg <= attention_coefficients_sum_V_addr_reg_549_pp0_iter8_reg;
                icmp_ln78_reg_490 <= icmp_ln78_fu_218_p2;
                icmp_ln81_reg_555 <= icmp_ln81_fu_397_p2;
                icmp_ln81_reg_555_pp0_iter3_reg <= icmp_ln81_reg_555;
                icmp_ln81_reg_555_pp0_iter4_reg <= icmp_ln81_reg_555_pp0_iter3_reg;
                icmp_ln81_reg_555_pp0_iter5_reg <= icmp_ln81_reg_555_pp0_iter4_reg;
                icmp_ln81_reg_555_pp0_iter6_reg <= icmp_ln81_reg_555_pp0_iter5_reg;
                icmp_ln81_reg_555_pp0_iter7_reg <= icmp_ln81_reg_555_pp0_iter6_reg;
                icmp_ln81_reg_555_pp0_iter8_reg <= icmp_ln81_reg_555_pp0_iter7_reg;
                icmp_ln81_reg_555_pp0_iter9_reg <= icmp_ln81_reg_555_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln81_reg_555_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                attention_coefficients_sum_V_load_reg_564 <= attention_coefficients_sum_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln78_fu_218_p2 = ap_const_lv1_0))) then
                icmp_ln79_reg_494 <= icmp_ln79_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_490 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                n2_1_load_reg_503 <= n2_1_fu_82;
                select_ln78_3_reg_513 <= select_ln78_3_fu_313_p3;
                select_ln79_1_reg_518 <= select_ln79_1_fu_329_p3;
                trunc_ln81_reg_523 <= trunc_ln81_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_490 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln84_1_reg_528 <= trunc_ln84_1_fu_370_p1;
                trunc_ln84_2_reg_533 <= trunc_ln84_2_fu_374_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln84_2_reg_533_pp0_iter2_reg <= trunc_ln84_2_reg_533;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln78_1_fu_223_p2 <= std_logic_vector(unsigned(indvar_flatten69_fu_98) + unsigned(ap_const_lv95_1));
    add_ln78_fu_273_p2 <= std_logic_vector(unsigned(nh_fu_94) + unsigned(ap_const_lv31_1));
    add_ln79_1_fu_240_p2 <= std_logic_vector(unsigned(indvar_flatten55_fu_90) + unsigned(ap_const_lv64_1));
    add_ln79_fu_319_p2 <= std_logic_vector(unsigned(select_ln78_fu_279_p3) + unsigned(ap_const_lv32_1));
    add_ln80_fu_378_p2 <= std_logic_vector(unsigned(select_ln79_fu_363_p3) + unsigned(ap_const_lv32_1));
    all_scores_V_address0 <= zext_ln84_1_fu_403_p1(16 - 1 downto 0);
    all_scores_V_address1 <= zext_ln84_1_fu_403_p1(16 - 1 downto 0);

    all_scores_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            all_scores_V_ce0 <= ap_const_logic_1;
        else 
            all_scores_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    all_scores_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            all_scores_V_ce1 <= ap_const_logic_1;
        else 
            all_scores_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    all_scores_V_d1 <= ap_const_lv28_0;

    all_scores_V_we1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln81_reg_555)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln81_reg_555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            all_scores_V_we1 <= ap_const_logic_1;
        else 
            all_scores_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln78_reg_490)
    begin
        if (((icmp_ln78_reg_490 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    attention_coefficients_sum_V_address0 <= attention_coefficients_sum_V_addr_reg_549_pp0_iter8_reg;
    attention_coefficients_sum_V_address1 <= attention_coefficients_sum_V_addr_reg_549_pp0_iter9_reg;

    attention_coefficients_sum_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            attention_coefficients_sum_V_ce0 <= ap_const_logic_1;
        else 
            attention_coefficients_sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    attention_coefficients_sum_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            attention_coefficients_sum_V_ce1 <= ap_const_logic_1;
        else 
            attention_coefficients_sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    attention_coefficients_sum_V_d1 <= std_logic_vector(unsigned(attention_coefficients_sum_V_load_reg_564) + unsigned(grp_exp_28_10_s_fu_2688_p_dout0));

    attention_coefficients_sum_V_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln81_reg_555_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln81_reg_555_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            attention_coefficients_sum_V_we1 <= ap_const_logic_1;
        else 
            attention_coefficients_sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    connectivity_mask_address0 <= zext_ln81_fu_389_p1(14 - 1 downto 0);

    connectivity_mask_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            connectivity_mask_ce0 <= ap_const_logic_1;
        else 
            connectivity_mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_28_10_s_fu_174_ap_ready <= grp_exp_28_10_s_fu_2688_p_ready;
    grp_exp_28_10_s_fu_2688_p_din1 <= all_scores_V_q0;
    grp_exp_28_10_s_fu_2688_p_start <= grp_exp_28_10_s_fu_174_ap_start_reg;
    grp_fu_413_p0 <= select_ln78_1_fu_286_p3(16 - 1 downto 0);
    grp_fu_413_p1 <= ap_const_lv16_64(7 - 1 downto 0);
    grp_fu_420_p1 <= ap_const_lv14_64(7 - 1 downto 0);
    grp_fu_427_p1 <= ap_const_lv16_64(7 - 1 downto 0);
    icmp_ln78_fu_218_p2 <= "1" when (indvar_flatten69_fu_98 = mul_ln65_1) else "0";
    icmp_ln79_fu_232_p2 <= "1" when (indvar_flatten55_fu_90 = mul_ln65) else "0";
    icmp_ln80_fu_308_p2 <= "1" when (n2_1_fu_82 = num_of_nodes) else "0";
    icmp_ln81_fu_397_p2 <= "1" when (connectivity_mask_q0 = ap_const_lv32_80000000) else "0";
    or_ln79_fu_359_p2 <= (select_ln78_3_reg_513 or icmp_ln79_reg_494);
    select_ln78_1_fu_286_p3 <= 
        add_ln78_fu_273_p2 when (icmp_ln79_reg_494(0) = '1') else 
        nh_fu_94;
    select_ln78_2_fu_301_p3 <= 
        ap_const_lv16_0 when (icmp_ln79_reg_494(0) = '1') else 
        trunc_ln78_fu_297_p1;
    select_ln78_3_fu_313_p3 <= 
        icmp_ln67_1 when (icmp_ln79_reg_494(0) = '1') else 
        icmp_ln80_fu_308_p2;
    select_ln78_fu_279_p3 <= 
        ap_const_lv32_0 when (icmp_ln79_reg_494(0) = '1') else 
        n1_1_fu_86;
    select_ln79_1_fu_329_p3 <= 
        trunc_ln79_fu_325_p1 when (select_ln78_3_fu_313_p3(0) = '1') else 
        select_ln78_2_fu_301_p3;
    select_ln79_2_fu_341_p3 <= 
        add_ln79_fu_319_p2 when (select_ln78_3_fu_313_p3(0) = '1') else 
        select_ln78_fu_279_p3;
    select_ln79_3_fu_246_p3 <= 
        ap_const_lv64_1 when (icmp_ln79_fu_232_p2(0) = '1') else 
        add_ln79_1_fu_240_p2;
    select_ln79_fu_363_p3 <= 
        ap_const_lv32_0 when (or_ln79_fu_359_p2(0) = '1') else 
        n2_1_load_reg_503;
    trunc_ln78_fu_297_p1 <= n1_1_fu_86(16 - 1 downto 0);
    trunc_ln79_fu_325_p1 <= add_ln79_fu_319_p2(16 - 1 downto 0);
    trunc_ln81_fu_337_p1 <= select_ln79_1_fu_329_p3(14 - 1 downto 0);
    trunc_ln84_1_fu_370_p1 <= select_ln79_fu_363_p3(14 - 1 downto 0);
    trunc_ln84_2_fu_374_p1 <= select_ln79_fu_363_p3(16 - 1 downto 0);
    zext_ln81_fu_389_p0 <= grp_fu_420_p3;
    zext_ln81_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln81_fu_389_p0),64));
    zext_ln84_1_fu_403_p0 <= grp_fu_427_p3;
    zext_ln84_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln84_1_fu_403_p0),64));
    zext_ln84_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_reg_538),64));
end behav;
