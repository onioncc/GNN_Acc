// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_166_32_VITIS_LOOP_167_33 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul,
        bound,
        num_out_features,
        out_nodes_features_V_address0,
        out_nodes_features_V_ce0,
        out_nodes_features_V_q0,
        out_nodes_features_skip_concat_bias_V_address1,
        out_nodes_features_skip_concat_bias_V_ce1,
        out_nodes_features_skip_concat_bias_V_we1,
        out_nodes_features_skip_concat_bias_V_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mul;
input  [62:0] bound;
input  [31:0] num_out_features;
output  [12:0] out_nodes_features_V_address0;
output   out_nodes_features_V_ce0;
input  [27:0] out_nodes_features_V_q0;
output  [12:0] out_nodes_features_skip_concat_bias_V_address1;
output   out_nodes_features_skip_concat_bias_V_ce1;
output   out_nodes_features_skip_concat_bias_V_we1;
output  [27:0] out_nodes_features_skip_concat_bias_V_d1;

reg ap_idle;
reg out_nodes_features_V_ce0;
reg out_nodes_features_skip_concat_bias_V_ce1;
reg out_nodes_features_skip_concat_bias_V_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln166_fu_155_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [12:0] dim_out_1_reg_324;
wire   [0:0] icmp_ln167_fu_150_p2;
reg   [0:0] icmp_ln167_reg_329;
reg   [0:0] icmp_ln167_reg_329_pp0_iter2_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter3_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter4_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter5_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter6_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter7_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter8_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter9_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter10_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter11_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter12_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter13_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter14_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter15_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter16_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter17_reg;
reg   [0:0] icmp_ln167_reg_329_pp0_iter18_reg;
wire   [12:0] select_ln166_fu_171_p3;
reg   [12:0] select_ln166_reg_339;
reg   [12:0] select_ln166_reg_339_pp0_iter3_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter4_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter5_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter6_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter7_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter8_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter9_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter10_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter11_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter12_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter13_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter14_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter15_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter16_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter17_reg;
reg   [12:0] select_ln166_reg_339_pp0_iter18_reg;
wire   [31:0] zext_ln168_fu_177_p1;
wire   [12:0] add_ln168_fu_242_p2;
reg   [12:0] add_ln168_reg_350;
reg   [12:0] add_ln168_reg_350_pp0_iter20_reg;
wire   [8:0] add_ln168_1_fu_251_p2;
reg   [8:0] add_ln168_1_reg_355;
wire   [12:0] grp_fu_186_p2;
reg   [12:0] srem_ln168_reg_360;
wire   [63:0] zext_ln168_2_fu_278_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln168_1_fu_283_p1;
reg   [12:0] dim_out_fu_64;
wire   [12:0] add_ln167_fu_191_p2;
reg   [12:0] ap_sig_allocacmp_dim_out_1;
wire    ap_loop_init;
reg   [30:0] nd_fu_68;
wire   [30:0] select_ln166_1_fu_211_p3;
reg   [62:0] indvar_flatten174_fu_72;
wire   [62:0] add_ln166_1_fu_160_p2;
wire   [31:0] dim_out_2_cast_fu_146_p1;
wire   [13:0] grp_fu_181_p0;
wire   [13:0] grp_fu_186_p0;
wire   [30:0] add_ln166_fu_205_p2;
wire   [6:0] trunc_ln168_fu_218_p1;
wire   [6:0] trunc_ln168_1_fu_230_p1;
wire   [12:0] tmp_62_cast_fu_234_p3;
wire   [8:0] grp_fu_181_p2;
wire   [8:0] tmp_61_cast_fu_222_p3;
wire   [8:0] trunc_ln168_2_fu_247_p1;
wire   [12:0] tmp_64_cast_fu_262_p3;
wire   [12:0] trunc_ln168_3_fu_269_p1;
wire   [12:0] add_ln168_2_fu_272_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_done_reg = 1'b0;
end

GAT_compute_one_graph_sdiv_14ns_32ns_9_18_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 9 ))
sdiv_14ns_32ns_9_18_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(num_out_features),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

GAT_compute_one_graph_srem_14ns_32ns_13_18_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 13 ))
srem_14ns_32ns_13_18_1_U202(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_186_p0),
    .din1(num_out_features),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

GAT_compute_one_graph_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dim_out_fu_64 <= 13'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            dim_out_fu_64 <= add_ln167_fu_191_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten174_fu_72 <= 63'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln166_fu_155_p2 == 1'd0))) begin
            indvar_flatten174_fu_72 <= add_ln166_1_fu_160_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            nd_fu_68 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter19 == 1'b1)) begin
            nd_fu_68 <= select_ln166_1_fu_211_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln168_1_reg_355 <= add_ln168_1_fu_251_p2;
        add_ln168_reg_350 <= add_ln168_fu_242_p2;
        add_ln168_reg_350_pp0_iter20_reg <= add_ln168_reg_350;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln167_reg_329_pp0_iter10_reg <= icmp_ln167_reg_329_pp0_iter9_reg;
        icmp_ln167_reg_329_pp0_iter11_reg <= icmp_ln167_reg_329_pp0_iter10_reg;
        icmp_ln167_reg_329_pp0_iter12_reg <= icmp_ln167_reg_329_pp0_iter11_reg;
        icmp_ln167_reg_329_pp0_iter13_reg <= icmp_ln167_reg_329_pp0_iter12_reg;
        icmp_ln167_reg_329_pp0_iter14_reg <= icmp_ln167_reg_329_pp0_iter13_reg;
        icmp_ln167_reg_329_pp0_iter15_reg <= icmp_ln167_reg_329_pp0_iter14_reg;
        icmp_ln167_reg_329_pp0_iter16_reg <= icmp_ln167_reg_329_pp0_iter15_reg;
        icmp_ln167_reg_329_pp0_iter17_reg <= icmp_ln167_reg_329_pp0_iter16_reg;
        icmp_ln167_reg_329_pp0_iter18_reg <= icmp_ln167_reg_329_pp0_iter17_reg;
        icmp_ln167_reg_329_pp0_iter2_reg <= icmp_ln167_reg_329;
        icmp_ln167_reg_329_pp0_iter3_reg <= icmp_ln167_reg_329_pp0_iter2_reg;
        icmp_ln167_reg_329_pp0_iter4_reg <= icmp_ln167_reg_329_pp0_iter3_reg;
        icmp_ln167_reg_329_pp0_iter5_reg <= icmp_ln167_reg_329_pp0_iter4_reg;
        icmp_ln167_reg_329_pp0_iter6_reg <= icmp_ln167_reg_329_pp0_iter5_reg;
        icmp_ln167_reg_329_pp0_iter7_reg <= icmp_ln167_reg_329_pp0_iter6_reg;
        icmp_ln167_reg_329_pp0_iter8_reg <= icmp_ln167_reg_329_pp0_iter7_reg;
        icmp_ln167_reg_329_pp0_iter9_reg <= icmp_ln167_reg_329_pp0_iter8_reg;
        select_ln166_reg_339 <= select_ln166_fu_171_p3;
        select_ln166_reg_339_pp0_iter10_reg <= select_ln166_reg_339_pp0_iter9_reg;
        select_ln166_reg_339_pp0_iter11_reg <= select_ln166_reg_339_pp0_iter10_reg;
        select_ln166_reg_339_pp0_iter12_reg <= select_ln166_reg_339_pp0_iter11_reg;
        select_ln166_reg_339_pp0_iter13_reg <= select_ln166_reg_339_pp0_iter12_reg;
        select_ln166_reg_339_pp0_iter14_reg <= select_ln166_reg_339_pp0_iter13_reg;
        select_ln166_reg_339_pp0_iter15_reg <= select_ln166_reg_339_pp0_iter14_reg;
        select_ln166_reg_339_pp0_iter16_reg <= select_ln166_reg_339_pp0_iter15_reg;
        select_ln166_reg_339_pp0_iter17_reg <= select_ln166_reg_339_pp0_iter16_reg;
        select_ln166_reg_339_pp0_iter18_reg <= select_ln166_reg_339_pp0_iter17_reg;
        select_ln166_reg_339_pp0_iter3_reg <= select_ln166_reg_339;
        select_ln166_reg_339_pp0_iter4_reg <= select_ln166_reg_339_pp0_iter3_reg;
        select_ln166_reg_339_pp0_iter5_reg <= select_ln166_reg_339_pp0_iter4_reg;
        select_ln166_reg_339_pp0_iter6_reg <= select_ln166_reg_339_pp0_iter5_reg;
        select_ln166_reg_339_pp0_iter7_reg <= select_ln166_reg_339_pp0_iter6_reg;
        select_ln166_reg_339_pp0_iter8_reg <= select_ln166_reg_339_pp0_iter7_reg;
        select_ln166_reg_339_pp0_iter9_reg <= select_ln166_reg_339_pp0_iter8_reg;
        srem_ln168_reg_360 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        dim_out_1_reg_324 <= ap_sig_allocacmp_dim_out_1;
        icmp_ln167_reg_329 <= icmp_ln167_fu_150_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln166_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_dim_out_1 = add_ln167_fu_191_p2;
    end else begin
        ap_sig_allocacmp_dim_out_1 = dim_out_fu_64;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_nodes_features_V_ce0 = 1'b1;
    end else begin
        out_nodes_features_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_nodes_features_skip_concat_bias_V_ce1 = 1'b1;
    end else begin
        out_nodes_features_skip_concat_bias_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_nodes_features_skip_concat_bias_V_we1 = 1'b1;
    end else begin
        out_nodes_features_skip_concat_bias_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln166_1_fu_160_p2 = (indvar_flatten174_fu_72 + 63'd1);

assign add_ln166_fu_205_p2 = (nd_fu_68 + 31'd1);

assign add_ln167_fu_191_p2 = (select_ln166_fu_171_p3 + 13'd1);

assign add_ln168_1_fu_251_p2 = (tmp_61_cast_fu_222_p3 + trunc_ln168_2_fu_247_p1);

assign add_ln168_2_fu_272_p2 = (tmp_64_cast_fu_262_p3 + trunc_ln168_3_fu_269_p1);

assign add_ln168_fu_242_p2 = (tmp_62_cast_fu_234_p3 + select_ln166_reg_339_pp0_iter18_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign dim_out_2_cast_fu_146_p1 = ap_sig_allocacmp_dim_out_1;

assign grp_fu_181_p0 = zext_ln168_fu_177_p1;

assign grp_fu_186_p0 = zext_ln168_fu_177_p1;

assign icmp_ln166_fu_155_p2 = ((indvar_flatten174_fu_72 == bound) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_150_p2 = ((dim_out_2_cast_fu_146_p1 == mul) ? 1'b1 : 1'b0);

assign out_nodes_features_V_address0 = zext_ln168_2_fu_278_p1;

assign out_nodes_features_skip_concat_bias_V_address1 = zext_ln168_1_fu_283_p1;

assign out_nodes_features_skip_concat_bias_V_d1 = out_nodes_features_V_q0;

assign select_ln166_1_fu_211_p3 = ((icmp_ln167_reg_329_pp0_iter18_reg[0:0] == 1'b1) ? add_ln166_fu_205_p2 : nd_fu_68);

assign select_ln166_fu_171_p3 = ((icmp_ln167_reg_329[0:0] == 1'b1) ? 13'd0 : dim_out_1_reg_324);

assign tmp_61_cast_fu_222_p3 = {{trunc_ln168_fu_218_p1}, {2'd0}};

assign tmp_62_cast_fu_234_p3 = {{trunc_ln168_1_fu_230_p1}, {6'd0}};

assign tmp_64_cast_fu_262_p3 = {{add_ln168_1_reg_355}, {4'd0}};

assign trunc_ln168_1_fu_230_p1 = select_ln166_1_fu_211_p3[6:0];

assign trunc_ln168_2_fu_247_p1 = grp_fu_181_p2[8:0];

assign trunc_ln168_3_fu_269_p1 = srem_ln168_reg_360[12:0];

assign trunc_ln168_fu_218_p1 = select_ln166_1_fu_211_p3[6:0];

assign zext_ln168_1_fu_283_p1 = add_ln168_reg_350_pp0_iter20_reg;

assign zext_ln168_2_fu_278_p1 = add_ln168_2_fu_272_p2;

assign zext_ln168_fu_177_p1 = select_ln166_fu_171_p3;

endmodule //GAT_compute_one_graph_CONV_Pipeline_VITIS_LOOP_166_32_VITIS_LOOP_167_33
