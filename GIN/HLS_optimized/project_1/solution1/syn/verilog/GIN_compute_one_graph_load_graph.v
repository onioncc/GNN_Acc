// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_load_graph (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        node_feature_in,
        edge_list_in,
        edge_attr_in,
        edge_list_address1,
        edge_list_ce1,
        edge_list_we1,
        edge_list_d1
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_pp0_stage0 = 25'd128;
parameter    ap_ST_fsm_state11 = 25'd256;
parameter    ap_ST_fsm_state12 = 25'd512;
parameter    ap_ST_fsm_state13 = 25'd1024;
parameter    ap_ST_fsm_state14 = 25'd2048;
parameter    ap_ST_fsm_state15 = 25'd4096;
parameter    ap_ST_fsm_state16 = 25'd8192;
parameter    ap_ST_fsm_state17 = 25'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 25'd32768;
parameter    ap_ST_fsm_state21 = 25'd65536;
parameter    ap_ST_fsm_state22 = 25'd131072;
parameter    ap_ST_fsm_state23 = 25'd262144;
parameter    ap_ST_fsm_state24 = 25'd524288;
parameter    ap_ST_fsm_state25 = 25'd1048576;
parameter    ap_ST_fsm_state26 = 25'd2097152;
parameter    ap_ST_fsm_state27 = 25'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 25'd8388608;
parameter    ap_ST_fsm_state31 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [63:0] node_feature_in;
input  [63:0] edge_list_in;
input  [63:0] edge_attr_in;
output  [9:0] edge_list_address1;
output   edge_list_ce1;
output   edge_list_we1;
output  [31:0] edge_list_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg[31:0] m_axi_mem_ARLEN;
reg m_axi_mem_RREADY;
reg edge_list_ce1;
reg edge_list_we1;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] node_feature_address1;
reg    node_feature_ce1;
reg    node_feature_we1;
wire   [8:0] edge_attr_0_address1;
reg    edge_attr_0_ce1;
reg    edge_attr_0_we1;
wire   [8:0] edge_attr_1_address1;
reg    edge_attr_1_ce1;
reg    edge_attr_1_we1;
wire   [8:0] edge_attr_2_address1;
reg    edge_attr_2_ce1;
reg    edge_attr_2_we1;
reg    mem_blk_n_AR;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln318_reg_476;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln322_reg_496;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln328_reg_533;
reg   [7:0] i_reg_251;
reg   [7:0] i_reg_251_pp0_iter1_reg;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] indvar_flatten_reg_263;
reg   [5:0] e_reg_274;
reg   [1:0] i_2_reg_285;
reg   [6:0] i_1_reg_296;
reg   [6:0] i_1_reg_296_pp2_iter1_reg;
wire    ap_block_state28_pp2_stage0_iter0;
reg    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_state7;
wire   [7:0] add_ln318_fu_329_p2;
reg   [7:0] add_ln318_reg_471;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln318_fu_335_p2;
reg   [0:0] icmp_ln318_reg_476_pp0_iter1_reg;
reg   [31:0] mem_addr_read_reg_480;
wire   [6:0] add_ln322_1_fu_366_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln322_fu_372_p2;
wire   [1:0] select_ln322_fu_390_p3;
reg   [1:0] select_ln322_reg_500;
reg   [1:0] select_ln322_reg_500_pp1_iter1_reg;
wire   [5:0] select_ln322_1_fu_398_p3;
reg   [5:0] select_ln322_1_reg_504;
reg   [5:0] select_ln322_1_reg_504_pp1_iter1_reg;
wire   [1:0] add_ln323_fu_406_p2;
reg   [31:0] mem_addr_1_read_reg_515;
wire   [6:0] add_ln328_fu_438_p2;
reg   [6:0] add_ln328_reg_528;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln328_fu_444_p2;
reg   [0:0] icmp_ln328_reg_533_pp2_iter1_reg;
reg   [31:0] mem_addr_2_read_reg_537;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state27;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter2;
reg   [7:0] ap_phi_mux_i_phi_fu_255_p4;
reg   [5:0] ap_phi_mux_e_phi_fu_278_p4;
reg   [6:0] ap_phi_mux_i_1_phi_fu_300_p4;
wire   [63:0] i_cast_fu_341_p1;
wire   [63:0] zext_ln322_fu_412_p1;
wire   [63:0] i_1_cast_fu_450_p1;
wire  signed [63:0] sext_ln318_fu_318_p1;
wire  signed [63:0] sext_ln322_fu_355_p1;
wire  signed [63:0] sext_ln328_fu_427_p1;
wire   [61:0] trunc_ln_fu_308_p4;
wire   [61:0] trunc_ln1_fu_346_p4;
wire   [0:0] icmp_ln323_fu_384_p2;
wire   [5:0] add_ln322_fu_378_p2;
wire   [61:0] trunc_ln2_fu_418_p4;
wire    ap_CS_fsm_state31;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
end

GIN_compute_one_graph_load_graph_node_feature #(
    .DataWidth( 32 ),
    .AddressRange( 1800 ),
    .AddressWidth( 11 ))
node_feature_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(node_feature_address1),
    .ce1(node_feature_ce1),
    .we1(node_feature_we1),
    .d1(mem_addr_read_reg_480)
);

GIN_compute_one_graph_load_graph_edge_attr_0 #(
    .DataWidth( 32 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
edge_attr_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(edge_attr_0_address1),
    .ce1(edge_attr_0_ce1),
    .we1(edge_attr_0_we1),
    .d1(mem_addr_1_read_reg_515)
);

GIN_compute_one_graph_load_graph_edge_attr_0 #(
    .DataWidth( 32 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
edge_attr_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(edge_attr_1_address1),
    .ce1(edge_attr_1_ce1),
    .we1(edge_attr_1_we1),
    .d1(mem_addr_1_read_reg_515)
);

GIN_compute_one_graph_load_graph_edge_attr_0 #(
    .DataWidth( 32 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
edge_attr_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(edge_attr_2_address1),
    .ce1(edge_attr_2_ce1),
    .we1(edge_attr_2_we1),
    .d1(mem_addr_1_read_reg_515)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        e_reg_274 <= select_ln322_1_reg_504;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        e_reg_274 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_1_reg_296 <= 7'd0;
    end else if (((icmp_ln328_reg_533 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_reg_296 <= add_ln328_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_372_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_285 <= add_ln323_fu_406_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_2_reg_285 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_251 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln318_reg_476 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_251 <= add_ln318_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_372_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_263 <= add_ln322_1_fu_366_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten_reg_263 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln318_reg_471 <= add_ln318_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln328_reg_528 <= add_ln328_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_reg_296_pp2_iter1_reg <= i_1_reg_296;
        icmp_ln328_reg_533 <= icmp_ln328_fu_444_p2;
        icmp_ln328_reg_533_pp2_iter1_reg <= icmp_ln328_reg_533;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_251_pp0_iter1_reg <= i_reg_251;
        icmp_ln318_reg_476 <= icmp_ln318_fu_335_p2;
        icmp_ln318_reg_476_pp0_iter1_reg <= icmp_ln318_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln322_reg_496 <= icmp_ln322_fu_372_p2;
        select_ln322_1_reg_504_pp1_iter1_reg <= select_ln322_1_reg_504;
        select_ln322_reg_500_pp1_iter1_reg <= select_ln322_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln322_reg_496 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mem_addr_1_read_reg_515 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln328_reg_533 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mem_addr_2_read_reg_537 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln318_reg_476 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mem_addr_read_reg_480 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_372_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln322_1_reg_504 <= select_ln322_1_fu_398_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln322_reg_500 <= select_ln322_fu_390_p3;
    end
end

always @ (*) begin
    if ((icmp_ln318_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln322_fu_372_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln328_fu_444_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_e_phi_fu_278_p4 = select_ln322_1_reg_504;
    end else begin
        ap_phi_mux_e_phi_fu_278_p4 = e_reg_274;
    end
end

always @ (*) begin
    if (((icmp_ln328_reg_533 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_1_phi_fu_300_p4 = add_ln328_reg_528;
    end else begin
        ap_phi_mux_i_1_phi_fu_300_p4 = i_1_reg_296;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln318_reg_476 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_255_p4 = add_ln318_reg_471;
    end else begin
        ap_phi_mux_i_phi_fu_255_p4 = i_reg_251;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_0_ce1 = 1'b1;
    end else begin
        edge_attr_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln322_reg_500_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_0_we1 = 1'b1;
    end else begin
        edge_attr_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_1_ce1 = 1'b1;
    end else begin
        edge_attr_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (select_ln322_reg_500_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_1_we1 = 1'b1;
    end else begin
        edge_attr_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_2_ce1 = 1'b1;
    end else begin
        edge_attr_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln322_reg_500_pp1_iter1_reg == 2'd0) & ~(select_ln322_reg_500_pp1_iter1_reg == 2'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_2_we1 = 1'b1;
    end else begin
        edge_attr_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln328_reg_533_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_list_we1 = 1'b1;
    end else begin
        edge_list_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_mem_ARADDR = sext_ln328_fu_427_p1;
    end else if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_mem_ARADDR = sext_ln322_fu_355_p1;
    end else if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_mem_ARADDR = sext_ln318_fu_318_p1;
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_mem_ARLEN = 32'd80;
    end else if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_mem_ARLEN = 32'd120;
    end else if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_mem_ARLEN = 32'd171;
    end else begin
        m_axi_mem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | (~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln328_reg_533 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln318_reg_476 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln328_reg_533 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln318_reg_476 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        node_feature_ce1 = 1'b1;
    end else begin
        node_feature_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln318_reg_476_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        node_feature_we1 = 1'b1;
    end else begin
        node_feature_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln318_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln318_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln322_fu_372_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln322_fu_372_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln328_fu_444_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln328_fu_444_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_fu_329_p2 = (ap_phi_mux_i_phi_fu_255_p4 + 8'd1);

assign add_ln322_1_fu_366_p2 = (indvar_flatten_reg_263 + 7'd1);

assign add_ln322_fu_378_p2 = (ap_phi_mux_e_phi_fu_278_p4 + 6'd1);

assign add_ln323_fu_406_p2 = (select_ln322_fu_390_p3 + 2'd1);

assign add_ln328_fu_438_p2 = (ap_phi_mux_i_1_phi_fu_300_p4 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln318_reg_476 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln318_reg_476 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln322_reg_496 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln328_reg_533 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln328_reg_533 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln322_reg_496 == 1'd0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp2_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln328_reg_533 == 1'd0));
end

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln318_reg_476 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign edge_attr_0_address1 = zext_ln322_fu_412_p1;

assign edge_attr_1_address1 = zext_ln322_fu_412_p1;

assign edge_attr_2_address1 = zext_ln322_fu_412_p1;

assign edge_list_address1 = i_1_cast_fu_450_p1;

assign edge_list_d1 = mem_addr_2_read_reg_537;

assign i_1_cast_fu_450_p1 = i_1_reg_296_pp2_iter1_reg;

assign i_cast_fu_341_p1 = i_reg_251_pp0_iter1_reg;

assign icmp_ln318_fu_335_p2 = ((ap_phi_mux_i_phi_fu_255_p4 == 8'd171) ? 1'b1 : 1'b0);

assign icmp_ln322_fu_372_p2 = ((indvar_flatten_reg_263 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_384_p2 = ((i_2_reg_285 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln328_fu_444_p2 = ((ap_phi_mux_i_1_phi_fu_300_p4 == 7'd80) ? 1'b1 : 1'b0);

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 32'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign node_feature_address1 = i_cast_fu_341_p1;

assign select_ln322_1_fu_398_p3 = ((icmp_ln323_fu_384_p2[0:0] == 1'b1) ? add_ln322_fu_378_p2 : ap_phi_mux_e_phi_fu_278_p4);

assign select_ln322_fu_390_p3 = ((icmp_ln323_fu_384_p2[0:0] == 1'b1) ? 2'd0 : i_2_reg_285);

assign sext_ln318_fu_318_p1 = $signed(trunc_ln_fu_308_p4);

assign sext_ln322_fu_355_p1 = $signed(trunc_ln1_fu_346_p4);

assign sext_ln328_fu_427_p1 = $signed(trunc_ln2_fu_418_p4);

assign trunc_ln1_fu_346_p4 = {{edge_attr_in[63:2]}};

assign trunc_ln2_fu_418_p4 = {{edge_list_in[63:2]}};

assign trunc_ln_fu_308_p4 = {{node_feature_in[63:2]}};

assign zext_ln322_fu_412_p1 = select_ln322_1_reg_504_pp1_iter1_reg;

endmodule //GIN_compute_one_graph_load_graph
