-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_edge_embedding_and_message_passing is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    message_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message_V_ce0 : OUT STD_LOGIC;
    message_V_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    message_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message_V_ce1 : OUT STD_LOGIC;
    message_V_we1 : OUT STD_LOGIC;
    message_V_d1 : OUT STD_LOGIC_VECTOR (27 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_0_ce0 : OUT STD_LOGIC;
    node_embedding_V_0_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_1_ce0 : OUT STD_LOGIC;
    node_embedding_V_1_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_2_ce0 : OUT STD_LOGIC;
    node_embedding_V_2_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_3_ce0 : OUT STD_LOGIC;
    node_embedding_V_3_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_4_ce0 : OUT STD_LOGIC;
    node_embedding_V_4_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_5_ce0 : OUT STD_LOGIC;
    node_embedding_V_5_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_6_ce0 : OUT STD_LOGIC;
    node_embedding_V_6_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_7_ce0 : OUT STD_LOGIC;
    node_embedding_V_7_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_8_ce0 : OUT STD_LOGIC;
    node_embedding_V_8_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_9_ce0 : OUT STD_LOGIC;
    node_embedding_V_9_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_10_ce0 : OUT STD_LOGIC;
    node_embedding_V_10_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_11_ce0 : OUT STD_LOGIC;
    node_embedding_V_11_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_12_ce0 : OUT STD_LOGIC;
    node_embedding_V_12_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_13_ce0 : OUT STD_LOGIC;
    node_embedding_V_13_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_14_ce0 : OUT STD_LOGIC;
    node_embedding_V_14_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_15_ce0 : OUT STD_LOGIC;
    node_embedding_V_15_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_16_ce0 : OUT STD_LOGIC;
    node_embedding_V_16_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_17_ce0 : OUT STD_LOGIC;
    node_embedding_V_17_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_18_ce0 : OUT STD_LOGIC;
    node_embedding_V_18_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_19_ce0 : OUT STD_LOGIC;
    node_embedding_V_19_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_20_ce0 : OUT STD_LOGIC;
    node_embedding_V_20_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_21_ce0 : OUT STD_LOGIC;
    node_embedding_V_21_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_22_ce0 : OUT STD_LOGIC;
    node_embedding_V_22_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_23_ce0 : OUT STD_LOGIC;
    node_embedding_V_23_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_24_ce0 : OUT STD_LOGIC;
    node_embedding_V_24_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_25_ce0 : OUT STD_LOGIC;
    node_embedding_V_25_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_26_ce0 : OUT STD_LOGIC;
    node_embedding_V_26_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_27_ce0 : OUT STD_LOGIC;
    node_embedding_V_27_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_28_ce0 : OUT STD_LOGIC;
    node_embedding_V_28_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_29_ce0 : OUT STD_LOGIC;
    node_embedding_V_29_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_30_ce0 : OUT STD_LOGIC;
    node_embedding_V_30_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_31_ce0 : OUT STD_LOGIC;
    node_embedding_V_31_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_32_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_32_ce0 : OUT STD_LOGIC;
    node_embedding_V_32_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_33_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_33_ce0 : OUT STD_LOGIC;
    node_embedding_V_33_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_34_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_34_ce0 : OUT STD_LOGIC;
    node_embedding_V_34_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_35_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_35_ce0 : OUT STD_LOGIC;
    node_embedding_V_35_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_36_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_36_ce0 : OUT STD_LOGIC;
    node_embedding_V_36_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_37_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_37_ce0 : OUT STD_LOGIC;
    node_embedding_V_37_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_38_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_38_ce0 : OUT STD_LOGIC;
    node_embedding_V_38_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_39_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_39_ce0 : OUT STD_LOGIC;
    node_embedding_V_39_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_40_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_40_ce0 : OUT STD_LOGIC;
    node_embedding_V_40_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_41_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_41_ce0 : OUT STD_LOGIC;
    node_embedding_V_41_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_42_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_42_ce0 : OUT STD_LOGIC;
    node_embedding_V_42_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_43_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_43_ce0 : OUT STD_LOGIC;
    node_embedding_V_43_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_44_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_44_ce0 : OUT STD_LOGIC;
    node_embedding_V_44_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_45_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_45_ce0 : OUT STD_LOGIC;
    node_embedding_V_45_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_46_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_46_ce0 : OUT STD_LOGIC;
    node_embedding_V_46_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_47_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_47_ce0 : OUT STD_LOGIC;
    node_embedding_V_47_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_48_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_48_ce0 : OUT STD_LOGIC;
    node_embedding_V_48_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_49_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_49_ce0 : OUT STD_LOGIC;
    node_embedding_V_49_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_50_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_50_ce0 : OUT STD_LOGIC;
    node_embedding_V_50_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_51_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_51_ce0 : OUT STD_LOGIC;
    node_embedding_V_51_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_52_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_52_ce0 : OUT STD_LOGIC;
    node_embedding_V_52_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_53_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_53_ce0 : OUT STD_LOGIC;
    node_embedding_V_53_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_54_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_54_ce0 : OUT STD_LOGIC;
    node_embedding_V_54_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_55_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_55_ce0 : OUT STD_LOGIC;
    node_embedding_V_55_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_56_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_56_ce0 : OUT STD_LOGIC;
    node_embedding_V_56_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_57_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_57_ce0 : OUT STD_LOGIC;
    node_embedding_V_57_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_58_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_58_ce0 : OUT STD_LOGIC;
    node_embedding_V_58_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_59_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_59_ce0 : OUT STD_LOGIC;
    node_embedding_V_59_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_60_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_60_ce0 : OUT STD_LOGIC;
    node_embedding_V_60_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_61_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_61_ce0 : OUT STD_LOGIC;
    node_embedding_V_61_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_62_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_62_ce0 : OUT STD_LOGIC;
    node_embedding_V_62_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_63_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_63_ce0 : OUT STD_LOGIC;
    node_embedding_V_63_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_64_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_64_ce0 : OUT STD_LOGIC;
    node_embedding_V_64_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_65_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_65_ce0 : OUT STD_LOGIC;
    node_embedding_V_65_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_66_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_66_ce0 : OUT STD_LOGIC;
    node_embedding_V_66_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_67_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_67_ce0 : OUT STD_LOGIC;
    node_embedding_V_67_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_68_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_68_ce0 : OUT STD_LOGIC;
    node_embedding_V_68_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_69_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_69_ce0 : OUT STD_LOGIC;
    node_embedding_V_69_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_70_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_70_ce0 : OUT STD_LOGIC;
    node_embedding_V_70_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_71_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_71_ce0 : OUT STD_LOGIC;
    node_embedding_V_71_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_72_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_72_ce0 : OUT STD_LOGIC;
    node_embedding_V_72_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_73_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_73_ce0 : OUT STD_LOGIC;
    node_embedding_V_73_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_74_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_74_ce0 : OUT STD_LOGIC;
    node_embedding_V_74_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_75_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_75_ce0 : OUT STD_LOGIC;
    node_embedding_V_75_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_76_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_76_ce0 : OUT STD_LOGIC;
    node_embedding_V_76_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_77_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_77_ce0 : OUT STD_LOGIC;
    node_embedding_V_77_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_78_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_78_ce0 : OUT STD_LOGIC;
    node_embedding_V_78_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_79_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_79_ce0 : OUT STD_LOGIC;
    node_embedding_V_79_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_80_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_80_ce0 : OUT STD_LOGIC;
    node_embedding_V_80_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_81_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_81_ce0 : OUT STD_LOGIC;
    node_embedding_V_81_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_82_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_82_ce0 : OUT STD_LOGIC;
    node_embedding_V_82_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_83_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_83_ce0 : OUT STD_LOGIC;
    node_embedding_V_83_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_84_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_84_ce0 : OUT STD_LOGIC;
    node_embedding_V_84_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_85_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_85_ce0 : OUT STD_LOGIC;
    node_embedding_V_85_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_86_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_86_ce0 : OUT STD_LOGIC;
    node_embedding_V_86_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_87_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_87_ce0 : OUT STD_LOGIC;
    node_embedding_V_87_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_88_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_88_ce0 : OUT STD_LOGIC;
    node_embedding_V_88_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_89_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_89_ce0 : OUT STD_LOGIC;
    node_embedding_V_89_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_90_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_90_ce0 : OUT STD_LOGIC;
    node_embedding_V_90_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_91_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_91_ce0 : OUT STD_LOGIC;
    node_embedding_V_91_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_92_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_92_ce0 : OUT STD_LOGIC;
    node_embedding_V_92_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_93_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_93_ce0 : OUT STD_LOGIC;
    node_embedding_V_93_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_94_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_94_ce0 : OUT STD_LOGIC;
    node_embedding_V_94_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_95_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_95_ce0 : OUT STD_LOGIC;
    node_embedding_V_95_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_96_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_96_ce0 : OUT STD_LOGIC;
    node_embedding_V_96_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_97_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_97_ce0 : OUT STD_LOGIC;
    node_embedding_V_97_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_98_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_98_ce0 : OUT STD_LOGIC;
    node_embedding_V_98_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    node_embedding_V_99_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    node_embedding_V_99_ce0 : OUT STD_LOGIC;
    node_embedding_V_99_q0 : IN STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_edge_embedding_and_message_passing is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_76C : STD_LOGIC_VECTOR (10 downto 0) := "11101101100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FA0 : STD_LOGIC_VECTOR (11 downto 0) := "111110100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_1654 : STD_LOGIC_VECTOR (11 downto 0);
    signal e_reg_1665 : STD_LOGIC_VECTOR (5 downto 0);
    signal dim_reg_1676 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_45_fu_1687_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln158_1_fu_1704_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal shl_ln_fu_1710_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_2181 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_2181_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_2181_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln158_fu_1718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_2186 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_2186_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_2186_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_2186_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_2186_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_2190 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_2190_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_2190_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_2190_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln158_fu_1736_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_reg_2195 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_reg_2195_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_reg_2195_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_reg_2195_pp1_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_reg_2195_pp1_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln159_mid1_fu_1744_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln159_mid1_reg_2201 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln159_mid1_reg_2201_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln159_mid1_reg_2201_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln158_4_fu_1771_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln162_fu_1779_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal message_V_addr_1_reg_2741 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter4_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal empty_reg_1643 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2107_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast1_fu_1699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_fu_1766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln159_fu_1789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln159_1_fu_1793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_1_fu_1815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_1_fu_1919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_2152_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln158_fu_1724_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln158_1_fu_1752_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln158_fu_1760_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln158_fu_1800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln158_1_fu_1804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln158_3_fu_1808_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2159_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal msg_V_fu_1923_p102 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_2132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_fu_2128_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal msg_V_1_fu_2140_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln174_fu_2148_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_2159_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2159_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_2159_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mux_1007_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        din3 : IN STD_LOGIC_VECTOR (27 downto 0);
        din4 : IN STD_LOGIC_VECTOR (27 downto 0);
        din5 : IN STD_LOGIC_VECTOR (27 downto 0);
        din6 : IN STD_LOGIC_VECTOR (27 downto 0);
        din7 : IN STD_LOGIC_VECTOR (27 downto 0);
        din8 : IN STD_LOGIC_VECTOR (27 downto 0);
        din9 : IN STD_LOGIC_VECTOR (27 downto 0);
        din10 : IN STD_LOGIC_VECTOR (27 downto 0);
        din11 : IN STD_LOGIC_VECTOR (27 downto 0);
        din12 : IN STD_LOGIC_VECTOR (27 downto 0);
        din13 : IN STD_LOGIC_VECTOR (27 downto 0);
        din14 : IN STD_LOGIC_VECTOR (27 downto 0);
        din15 : IN STD_LOGIC_VECTOR (27 downto 0);
        din16 : IN STD_LOGIC_VECTOR (27 downto 0);
        din17 : IN STD_LOGIC_VECTOR (27 downto 0);
        din18 : IN STD_LOGIC_VECTOR (27 downto 0);
        din19 : IN STD_LOGIC_VECTOR (27 downto 0);
        din20 : IN STD_LOGIC_VECTOR (27 downto 0);
        din21 : IN STD_LOGIC_VECTOR (27 downto 0);
        din22 : IN STD_LOGIC_VECTOR (27 downto 0);
        din23 : IN STD_LOGIC_VECTOR (27 downto 0);
        din24 : IN STD_LOGIC_VECTOR (27 downto 0);
        din25 : IN STD_LOGIC_VECTOR (27 downto 0);
        din26 : IN STD_LOGIC_VECTOR (27 downto 0);
        din27 : IN STD_LOGIC_VECTOR (27 downto 0);
        din28 : IN STD_LOGIC_VECTOR (27 downto 0);
        din29 : IN STD_LOGIC_VECTOR (27 downto 0);
        din30 : IN STD_LOGIC_VECTOR (27 downto 0);
        din31 : IN STD_LOGIC_VECTOR (27 downto 0);
        din32 : IN STD_LOGIC_VECTOR (27 downto 0);
        din33 : IN STD_LOGIC_VECTOR (27 downto 0);
        din34 : IN STD_LOGIC_VECTOR (27 downto 0);
        din35 : IN STD_LOGIC_VECTOR (27 downto 0);
        din36 : IN STD_LOGIC_VECTOR (27 downto 0);
        din37 : IN STD_LOGIC_VECTOR (27 downto 0);
        din38 : IN STD_LOGIC_VECTOR (27 downto 0);
        din39 : IN STD_LOGIC_VECTOR (27 downto 0);
        din40 : IN STD_LOGIC_VECTOR (27 downto 0);
        din41 : IN STD_LOGIC_VECTOR (27 downto 0);
        din42 : IN STD_LOGIC_VECTOR (27 downto 0);
        din43 : IN STD_LOGIC_VECTOR (27 downto 0);
        din44 : IN STD_LOGIC_VECTOR (27 downto 0);
        din45 : IN STD_LOGIC_VECTOR (27 downto 0);
        din46 : IN STD_LOGIC_VECTOR (27 downto 0);
        din47 : IN STD_LOGIC_VECTOR (27 downto 0);
        din48 : IN STD_LOGIC_VECTOR (27 downto 0);
        din49 : IN STD_LOGIC_VECTOR (27 downto 0);
        din50 : IN STD_LOGIC_VECTOR (27 downto 0);
        din51 : IN STD_LOGIC_VECTOR (27 downto 0);
        din52 : IN STD_LOGIC_VECTOR (27 downto 0);
        din53 : IN STD_LOGIC_VECTOR (27 downto 0);
        din54 : IN STD_LOGIC_VECTOR (27 downto 0);
        din55 : IN STD_LOGIC_VECTOR (27 downto 0);
        din56 : IN STD_LOGIC_VECTOR (27 downto 0);
        din57 : IN STD_LOGIC_VECTOR (27 downto 0);
        din58 : IN STD_LOGIC_VECTOR (27 downto 0);
        din59 : IN STD_LOGIC_VECTOR (27 downto 0);
        din60 : IN STD_LOGIC_VECTOR (27 downto 0);
        din61 : IN STD_LOGIC_VECTOR (27 downto 0);
        din62 : IN STD_LOGIC_VECTOR (27 downto 0);
        din63 : IN STD_LOGIC_VECTOR (27 downto 0);
        din64 : IN STD_LOGIC_VECTOR (27 downto 0);
        din65 : IN STD_LOGIC_VECTOR (27 downto 0);
        din66 : IN STD_LOGIC_VECTOR (27 downto 0);
        din67 : IN STD_LOGIC_VECTOR (27 downto 0);
        din68 : IN STD_LOGIC_VECTOR (27 downto 0);
        din69 : IN STD_LOGIC_VECTOR (27 downto 0);
        din70 : IN STD_LOGIC_VECTOR (27 downto 0);
        din71 : IN STD_LOGIC_VECTOR (27 downto 0);
        din72 : IN STD_LOGIC_VECTOR (27 downto 0);
        din73 : IN STD_LOGIC_VECTOR (27 downto 0);
        din74 : IN STD_LOGIC_VECTOR (27 downto 0);
        din75 : IN STD_LOGIC_VECTOR (27 downto 0);
        din76 : IN STD_LOGIC_VECTOR (27 downto 0);
        din77 : IN STD_LOGIC_VECTOR (27 downto 0);
        din78 : IN STD_LOGIC_VECTOR (27 downto 0);
        din79 : IN STD_LOGIC_VECTOR (27 downto 0);
        din80 : IN STD_LOGIC_VECTOR (27 downto 0);
        din81 : IN STD_LOGIC_VECTOR (27 downto 0);
        din82 : IN STD_LOGIC_VECTOR (27 downto 0);
        din83 : IN STD_LOGIC_VECTOR (27 downto 0);
        din84 : IN STD_LOGIC_VECTOR (27 downto 0);
        din85 : IN STD_LOGIC_VECTOR (27 downto 0);
        din86 : IN STD_LOGIC_VECTOR (27 downto 0);
        din87 : IN STD_LOGIC_VECTOR (27 downto 0);
        din88 : IN STD_LOGIC_VECTOR (27 downto 0);
        din89 : IN STD_LOGIC_VECTOR (27 downto 0);
        din90 : IN STD_LOGIC_VECTOR (27 downto 0);
        din91 : IN STD_LOGIC_VECTOR (27 downto 0);
        din92 : IN STD_LOGIC_VECTOR (27 downto 0);
        din93 : IN STD_LOGIC_VECTOR (27 downto 0);
        din94 : IN STD_LOGIC_VECTOR (27 downto 0);
        din95 : IN STD_LOGIC_VECTOR (27 downto 0);
        din96 : IN STD_LOGIC_VECTOR (27 downto 0);
        din97 : IN STD_LOGIC_VECTOR (27 downto 0);
        din98 : IN STD_LOGIC_VECTOR (27 downto 0);
        din99 : IN STD_LOGIC_VECTOR (27 downto 0);
        din100 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_15s_8ns_7ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mux_1007_28_1_1_U108 : component GIN_compute_one_graph_mux_1007_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 28,
        din4_WIDTH => 28,
        din5_WIDTH => 28,
        din6_WIDTH => 28,
        din7_WIDTH => 28,
        din8_WIDTH => 28,
        din9_WIDTH => 28,
        din10_WIDTH => 28,
        din11_WIDTH => 28,
        din12_WIDTH => 28,
        din13_WIDTH => 28,
        din14_WIDTH => 28,
        din15_WIDTH => 28,
        din16_WIDTH => 28,
        din17_WIDTH => 28,
        din18_WIDTH => 28,
        din19_WIDTH => 28,
        din20_WIDTH => 28,
        din21_WIDTH => 28,
        din22_WIDTH => 28,
        din23_WIDTH => 28,
        din24_WIDTH => 28,
        din25_WIDTH => 28,
        din26_WIDTH => 28,
        din27_WIDTH => 28,
        din28_WIDTH => 28,
        din29_WIDTH => 28,
        din30_WIDTH => 28,
        din31_WIDTH => 28,
        din32_WIDTH => 28,
        din33_WIDTH => 28,
        din34_WIDTH => 28,
        din35_WIDTH => 28,
        din36_WIDTH => 28,
        din37_WIDTH => 28,
        din38_WIDTH => 28,
        din39_WIDTH => 28,
        din40_WIDTH => 28,
        din41_WIDTH => 28,
        din42_WIDTH => 28,
        din43_WIDTH => 28,
        din44_WIDTH => 28,
        din45_WIDTH => 28,
        din46_WIDTH => 28,
        din47_WIDTH => 28,
        din48_WIDTH => 28,
        din49_WIDTH => 28,
        din50_WIDTH => 28,
        din51_WIDTH => 28,
        din52_WIDTH => 28,
        din53_WIDTH => 28,
        din54_WIDTH => 28,
        din55_WIDTH => 28,
        din56_WIDTH => 28,
        din57_WIDTH => 28,
        din58_WIDTH => 28,
        din59_WIDTH => 28,
        din60_WIDTH => 28,
        din61_WIDTH => 28,
        din62_WIDTH => 28,
        din63_WIDTH => 28,
        din64_WIDTH => 28,
        din65_WIDTH => 28,
        din66_WIDTH => 28,
        din67_WIDTH => 28,
        din68_WIDTH => 28,
        din69_WIDTH => 28,
        din70_WIDTH => 28,
        din71_WIDTH => 28,
        din72_WIDTH => 28,
        din73_WIDTH => 28,
        din74_WIDTH => 28,
        din75_WIDTH => 28,
        din76_WIDTH => 28,
        din77_WIDTH => 28,
        din78_WIDTH => 28,
        din79_WIDTH => 28,
        din80_WIDTH => 28,
        din81_WIDTH => 28,
        din82_WIDTH => 28,
        din83_WIDTH => 28,
        din84_WIDTH => 28,
        din85_WIDTH => 28,
        din86_WIDTH => 28,
        din87_WIDTH => 28,
        din88_WIDTH => 28,
        din89_WIDTH => 28,
        din90_WIDTH => 28,
        din91_WIDTH => 28,
        din92_WIDTH => 28,
        din93_WIDTH => 28,
        din94_WIDTH => 28,
        din95_WIDTH => 28,
        din96_WIDTH => 28,
        din97_WIDTH => 28,
        din98_WIDTH => 28,
        din99_WIDTH => 28,
        din100_WIDTH => 7,
        dout_WIDTH => 28)
    port map (
        din0 => node_embedding_V_0_q0,
        din1 => node_embedding_V_1_q0,
        din2 => node_embedding_V_2_q0,
        din3 => node_embedding_V_3_q0,
        din4 => node_embedding_V_4_q0,
        din5 => node_embedding_V_5_q0,
        din6 => node_embedding_V_6_q0,
        din7 => node_embedding_V_7_q0,
        din8 => node_embedding_V_8_q0,
        din9 => node_embedding_V_9_q0,
        din10 => node_embedding_V_10_q0,
        din11 => node_embedding_V_11_q0,
        din12 => node_embedding_V_12_q0,
        din13 => node_embedding_V_13_q0,
        din14 => node_embedding_V_14_q0,
        din15 => node_embedding_V_15_q0,
        din16 => node_embedding_V_16_q0,
        din17 => node_embedding_V_17_q0,
        din18 => node_embedding_V_18_q0,
        din19 => node_embedding_V_19_q0,
        din20 => node_embedding_V_20_q0,
        din21 => node_embedding_V_21_q0,
        din22 => node_embedding_V_22_q0,
        din23 => node_embedding_V_23_q0,
        din24 => node_embedding_V_24_q0,
        din25 => node_embedding_V_25_q0,
        din26 => node_embedding_V_26_q0,
        din27 => node_embedding_V_27_q0,
        din28 => node_embedding_V_28_q0,
        din29 => node_embedding_V_29_q0,
        din30 => node_embedding_V_30_q0,
        din31 => node_embedding_V_31_q0,
        din32 => node_embedding_V_32_q0,
        din33 => node_embedding_V_33_q0,
        din34 => node_embedding_V_34_q0,
        din35 => node_embedding_V_35_q0,
        din36 => node_embedding_V_36_q0,
        din37 => node_embedding_V_37_q0,
        din38 => node_embedding_V_38_q0,
        din39 => node_embedding_V_39_q0,
        din40 => node_embedding_V_40_q0,
        din41 => node_embedding_V_41_q0,
        din42 => node_embedding_V_42_q0,
        din43 => node_embedding_V_43_q0,
        din44 => node_embedding_V_44_q0,
        din45 => node_embedding_V_45_q0,
        din46 => node_embedding_V_46_q0,
        din47 => node_embedding_V_47_q0,
        din48 => node_embedding_V_48_q0,
        din49 => node_embedding_V_49_q0,
        din50 => node_embedding_V_50_q0,
        din51 => node_embedding_V_51_q0,
        din52 => node_embedding_V_52_q0,
        din53 => node_embedding_V_53_q0,
        din54 => node_embedding_V_54_q0,
        din55 => node_embedding_V_55_q0,
        din56 => node_embedding_V_56_q0,
        din57 => node_embedding_V_57_q0,
        din58 => node_embedding_V_58_q0,
        din59 => node_embedding_V_59_q0,
        din60 => node_embedding_V_60_q0,
        din61 => node_embedding_V_61_q0,
        din62 => node_embedding_V_62_q0,
        din63 => node_embedding_V_63_q0,
        din64 => node_embedding_V_64_q0,
        din65 => node_embedding_V_65_q0,
        din66 => node_embedding_V_66_q0,
        din67 => node_embedding_V_67_q0,
        din68 => node_embedding_V_68_q0,
        din69 => node_embedding_V_69_q0,
        din70 => node_embedding_V_70_q0,
        din71 => node_embedding_V_71_q0,
        din72 => node_embedding_V_72_q0,
        din73 => node_embedding_V_73_q0,
        din74 => node_embedding_V_74_q0,
        din75 => node_embedding_V_75_q0,
        din76 => node_embedding_V_76_q0,
        din77 => node_embedding_V_77_q0,
        din78 => node_embedding_V_78_q0,
        din79 => node_embedding_V_79_q0,
        din80 => node_embedding_V_80_q0,
        din81 => node_embedding_V_81_q0,
        din82 => node_embedding_V_82_q0,
        din83 => node_embedding_V_83_q0,
        din84 => node_embedding_V_84_q0,
        din85 => node_embedding_V_85_q0,
        din86 => node_embedding_V_86_q0,
        din87 => node_embedding_V_87_q0,
        din88 => node_embedding_V_88_q0,
        din89 => node_embedding_V_89_q0,
        din90 => node_embedding_V_90_q0,
        din91 => node_embedding_V_91_q0,
        din92 => node_embedding_V_92_q0,
        din93 => node_embedding_V_93_q0,
        din94 => node_embedding_V_94_q0,
        din95 => node_embedding_V_95_q0,
        din96 => node_embedding_V_96_q0,
        din97 => node_embedding_V_97_q0,
        din98 => node_embedding_V_98_q0,
        din99 => node_embedding_V_99_q0,
        din100 => select_ln158_reg_2195_pp1_iter4_reg,
        dout => msg_V_fu_1923_p102);

    mac_muladd_15s_8ns_7ns_15_4_1_U109 : component GIN_compute_one_graph_mac_muladd_15s_8ns_7ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2159_p0,
        din1 => grp_fu_2159_p1,
        din2 => grp_fu_2159_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2159_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter4_state8)))) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter4_state8))) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_reg_1676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                dim_reg_1676 <= ap_const_lv7_0;
            elsif (((icmp_ln158_fu_1718_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                dim_reg_1676 <= add_ln162_fu_1779_p2;
            end if; 
        end if;
    end process;

    e_reg_1665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                e_reg_1665 <= ap_const_lv6_0;
            elsif (((icmp_ln158_fu_1718_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                e_reg_1665 <= select_ln158_4_fu_1771_p3;
            end if; 
        end if;
    end process;

    empty_reg_1643_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2107_fu_1693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_1643 <= empty_45_fu_1687_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_1643 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_1654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_1654 <= ap_const_lv12_0;
            elsif (((icmp_ln158_fu_1718_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_1654 <= add_ln158_1_fu_1704_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln158_reg_2186 <= icmp_ln158_fu_1718_p2;
                icmp_ln158_reg_2186_pp1_iter1_reg <= icmp_ln158_reg_2186;
                icmp_ln162_reg_2190_pp1_iter1_reg <= icmp_ln162_reg_2190;
                select_ln158_reg_2195_pp1_iter1_reg <= select_ln158_reg_2195;
                    shl_ln159_mid1_reg_2201_pp1_iter1_reg(6 downto 1) <= shl_ln159_mid1_reg_2201(6 downto 1);
                    shl_ln_reg_2181(6 downto 1) <= shl_ln_fu_1710_p3(6 downto 1);
                    shl_ln_reg_2181_pp1_iter1_reg(6 downto 1) <= shl_ln_reg_2181(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln158_reg_2186_pp1_iter2_reg <= icmp_ln158_reg_2186_pp1_iter1_reg;
                icmp_ln158_reg_2186_pp1_iter3_reg <= icmp_ln158_reg_2186_pp1_iter2_reg;
                icmp_ln158_reg_2186_pp1_iter4_reg <= icmp_ln158_reg_2186_pp1_iter3_reg;
                icmp_ln162_reg_2190_pp1_iter2_reg <= icmp_ln162_reg_2190_pp1_iter1_reg;
                icmp_ln162_reg_2190_pp1_iter3_reg <= icmp_ln162_reg_2190_pp1_iter2_reg;
                select_ln158_reg_2195_pp1_iter2_reg <= select_ln158_reg_2195_pp1_iter1_reg;
                select_ln158_reg_2195_pp1_iter3_reg <= select_ln158_reg_2195_pp1_iter2_reg;
                select_ln158_reg_2195_pp1_iter4_reg <= select_ln158_reg_2195_pp1_iter3_reg;
                    shl_ln159_mid1_reg_2201_pp1_iter2_reg(6 downto 1) <= shl_ln159_mid1_reg_2201_pp1_iter1_reg(6 downto 1);
                    shl_ln_reg_2181_pp1_iter2_reg(6 downto 1) <= shl_ln_reg_2181_pp1_iter1_reg(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_fu_1718_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln162_reg_2190 <= icmp_ln162_fu_1730_p2;
                select_ln158_reg_2195 <= select_ln158_fu_1736_p3;
                    shl_ln159_mid1_reg_2201(6 downto 1) <= shl_ln159_mid1_fu_1744_p3(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln158_reg_2186_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                message_V_addr_1_reg_2741 <= zext_ln703_1_fu_1919_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_2181(0) <= '0';
    shl_ln_reg_2181_pp1_iter1_reg(0) <= '0';
    shl_ln_reg_2181_pp1_iter2_reg(0) <= '0';
    shl_ln159_mid1_reg_2201(0) <= '0';
    shl_ln159_mid1_reg_2201_pp1_iter1_reg(0) <= '0';
    shl_ln159_mid1_reg_2201_pp1_iter2_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, exitcond2107_fu_1693_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2107_fu_1693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln158_1_fu_1704_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_1654) + unsigned(ap_const_lv12_1));
    add_ln158_fu_1724_p2 <= std_logic_vector(unsigned(e_reg_1665) + unsigned(ap_const_lv6_1));
    add_ln162_fu_1779_p2 <= std_logic_vector(unsigned(select_ln158_fu_1736_p3) + unsigned(ap_const_lv7_1));
    add_ln703_fu_2152_p2 <= std_logic_vector(unsigned(message_V_q0) + unsigned(zext_ln174_fu_2148_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter4_state8_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter4_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter4_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln158_fu_1718_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((icmp_ln158_fu_1718_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_address0_assign_proc : process(icmp_ln158_reg_2186_pp1_iter2_reg, icmp_ln162_reg_2190_pp1_iter2_reg, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, zext_ln159_fu_1789_p1, zext_ln159_1_fu_1793_p1)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then
            if (((icmp_ln162_reg_2190_pp1_iter2_reg = ap_const_lv1_1) and (icmp_ln158_reg_2186_pp1_iter2_reg = ap_const_lv1_0))) then 
                edge_list_address0 <= zext_ln159_1_fu_1793_p1(10 - 1 downto 0);
            elsif ((icmp_ln162_reg_2190_pp1_iter2_reg = ap_const_lv1_0)) then 
                edge_list_address0 <= zext_ln159_fu_1789_p1(10 - 1 downto 0);
            else 
                edge_list_address0 <= "XXXXXXXXXX";
            end if;
        else 
            edge_list_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    edge_list_address1 <= zext_ln158_fu_1766_p1(10 - 1 downto 0);

    edge_list_ce0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln158_reg_2186_pp1_iter2_reg, icmp_ln162_reg_2190_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln162_reg_2190_pp1_iter2_reg = ap_const_lv1_1) and (icmp_ln158_reg_2186_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln162_reg_2190_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            edge_list_ce0 <= ap_const_logic_1;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            edge_list_ce1 <= ap_const_logic_1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_45_fu_1687_p2 <= std_logic_vector(unsigned(empty_reg_1643) + unsigned(ap_const_lv11_1));
    exitcond2107_fu_1693_p2 <= "1" when (empty_reg_1643 = ap_const_lv11_76C) else "0";
    grp_fu_2159_p0 <= edge_list_q1(15 - 1 downto 0);
    grp_fu_2159_p1 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_2159_p2 <= grp_fu_2159_p20(7 - 1 downto 0);
    grp_fu_2159_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln158_reg_2195_pp1_iter2_reg),15));
    icmp_ln158_fu_1718_p2 <= "1" when (indvar_flatten_reg_1654 = ap_const_lv12_FA0) else "0";
    icmp_ln162_fu_1730_p2 <= "1" when (dim_reg_1676 = ap_const_lv7_64) else "0";
    message_V_address0 <= zext_ln703_1_fu_1919_p1(15 - 1 downto 0);

    message_V_address1_assign_proc : process(ap_CS_fsm_state2, message_V_addr_1_reg_2741, ap_enable_reg_pp1_iter5, p_cast1_fu_1699_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            message_V_address1 <= message_V_addr_1_reg_2741;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_V_address1 <= p_cast1_fu_1699_p1(15 - 1 downto 0);
        else 
            message_V_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    message_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            message_V_ce0 <= ap_const_logic_1;
        else 
            message_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            message_V_ce1 <= ap_const_logic_1;
        else 
            message_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, add_ln703_fu_2152_p2)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            message_V_d1 <= add_ln703_fu_2152_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_V_d1 <= ap_const_lv28_0;
        else 
            message_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    message_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln158_reg_2186_pp1_iter4_reg, ap_enable_reg_pp1_iter5, exitcond2107_fu_1693_p2)
    begin
        if ((((exitcond2107_fu_1693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln158_reg_2186_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            message_V_we1 <= ap_const_logic_1;
        else 
            message_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_1_fu_2140_p3 <= 
        ap_const_lv27_0 when (tmp_fu_2132_p3(0) = '1') else 
        trunc_ln174_fu_2128_p1;
    node_embedding_V_0_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_0_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_10_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_10_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_10_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_11_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_11_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_11_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_12_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_12_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_12_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_13_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_13_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_13_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_14_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_14_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_14_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_15_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_15_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_15_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_16_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_16_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_16_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_17_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_17_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_17_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_18_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_18_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_18_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_19_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_19_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_19_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_1_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_1_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_20_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_20_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_20_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_21_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_21_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_21_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_22_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_22_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_22_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_23_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_23_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_23_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_24_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_24_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_24_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_25_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_25_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_25_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_26_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_26_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_26_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_27_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_27_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_27_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_28_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_28_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_28_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_29_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_29_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_29_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_2_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_2_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_30_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_30_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_30_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_31_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_31_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_31_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_32_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_32_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_32_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_33_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_33_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_33_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_34_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_34_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_34_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_35_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_35_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_35_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_36_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_36_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_36_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_37_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_37_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_37_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_38_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_38_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_38_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_39_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_39_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_39_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_3_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_3_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_40_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_40_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_40_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_41_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_41_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_41_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_42_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_42_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_42_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_43_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_43_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_43_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_44_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_44_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_44_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_45_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_45_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_45_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_46_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_46_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_46_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_47_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_47_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_47_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_48_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_48_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_48_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_48_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_49_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_49_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_49_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_49_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_4_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_4_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_4_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_50_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_50_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_50_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_50_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_51_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_51_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_51_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_51_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_52_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_52_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_52_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_52_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_53_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_53_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_53_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_53_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_54_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_54_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_54_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_55_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_55_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_55_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_55_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_56_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_56_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_56_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_56_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_57_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_57_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_57_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_57_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_58_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_58_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_58_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_58_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_59_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_59_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_59_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_59_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_5_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_5_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_5_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_60_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_60_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_60_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_60_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_61_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_61_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_61_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_61_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_62_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_62_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_62_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_62_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_63_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_63_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_63_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_63_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_64_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_64_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_64_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_64_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_65_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_65_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_65_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_65_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_66_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_66_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_66_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_66_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_67_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_67_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_67_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_67_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_68_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_68_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_68_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_68_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_69_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_69_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_69_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_69_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_6_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_6_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_6_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_70_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_70_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_70_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_70_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_71_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_71_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_71_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_71_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_72_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_72_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_72_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_72_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_73_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_73_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_73_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_73_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_74_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_74_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_74_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_74_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_75_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_75_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_75_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_75_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_76_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_76_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_76_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_76_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_77_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_77_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_77_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_77_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_78_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_78_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_78_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_78_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_79_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_79_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_79_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_79_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_7_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_7_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_7_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_80_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_80_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_80_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_80_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_81_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_81_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_81_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_81_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_82_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_82_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_82_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_82_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_83_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_83_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_83_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_83_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_84_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_84_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_84_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_84_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_85_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_85_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_85_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_85_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_86_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_86_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_86_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_86_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_87_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_87_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_87_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_87_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_88_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_88_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_88_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_88_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_89_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_89_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_89_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_89_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_8_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_8_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_8_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_90_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_90_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_90_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_90_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_91_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_91_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_91_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_91_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_92_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_92_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_92_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_92_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_93_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_93_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_93_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_93_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_94_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_94_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_94_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_94_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_95_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_95_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_95_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_95_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_96_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_96_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_96_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_96_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_97_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_97_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_97_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_97_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_98_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_98_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_98_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_98_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_99_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_99_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_99_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_99_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_9_address0 <= zext_ln158_1_fu_1815_p1(8 - 1 downto 0);

    node_embedding_V_9_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            node_embedding_V_9_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln158_fu_1760_p2 <= (select_ln158_1_fu_1752_p3 or ap_const_lv7_1);
    p_cast1_fu_1699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1643),64));
    select_ln158_1_fu_1752_p3 <= 
        shl_ln159_mid1_fu_1744_p3 when (icmp_ln162_fu_1730_p2(0) = '1') else 
        shl_ln_fu_1710_p3;
    select_ln158_3_fu_1808_p3 <= 
        trunc_ln158_fu_1800_p1 when (icmp_ln162_reg_2190_pp1_iter3_reg(0) = '1') else 
        trunc_ln158_1_fu_1804_p1;
    select_ln158_4_fu_1771_p3 <= 
        add_ln158_fu_1724_p2 when (icmp_ln162_fu_1730_p2(0) = '1') else 
        e_reg_1665;
    select_ln158_fu_1736_p3 <= 
        ap_const_lv7_0 when (icmp_ln162_fu_1730_p2(0) = '1') else 
        dim_reg_1676;
    shl_ln159_mid1_fu_1744_p3 <= (add_ln158_fu_1724_p2 & ap_const_lv1_0);
    shl_ln_fu_1710_p3 <= (e_reg_1665 & ap_const_lv1_0);
    tmp_fu_2132_p3 <= msg_V_fu_1923_p102(27 downto 27);
    trunc_ln158_1_fu_1804_p1 <= edge_list_q0(8 - 1 downto 0);
    trunc_ln158_fu_1800_p1 <= edge_list_q0(8 - 1 downto 0);
    trunc_ln174_fu_2128_p1 <= msg_V_fu_1923_p102(27 - 1 downto 0);
    zext_ln158_1_fu_1815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln158_3_fu_1808_p3),64));
    zext_ln158_fu_1766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln158_fu_1760_p2),64));
    zext_ln159_1_fu_1793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln159_mid1_reg_2201_pp1_iter2_reg),64));
    zext_ln159_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_2181_pp1_iter2_reg),64));
    zext_ln174_fu_2148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msg_V_1_fu_2140_p3),28));
    zext_ln703_1_fu_1919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2159_p3),64));
end behav;
