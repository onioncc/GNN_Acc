-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_prepare_degree_neighbor_table is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    degree_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce0 : OUT STD_LOGIC;
    degree_table_we0 : OUT STD_LOGIC;
    degree_table_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    degree_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    degree_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce1 : OUT STD_LOGIC;
    degree_table_we1 : OUT STD_LOGIC;
    degree_table_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    degree_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_we0 : OUT STD_LOGIC;
    neighbor_table_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    neighbor_table_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    neighbor_table_ce1 : OUT STD_LOGIC;
    neighbor_table_we1 : OUT STD_LOGIC;
    neighbor_table_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of GIN_compute_one_graph_prepare_degree_neighbor_table is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal e_reg_241 : STD_LOGIC_VECTOR (5 downto 0);
    signal e_1_reg_264 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln498_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln502_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln502_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln502_reg_750_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal degree_table_addr_1_reg_759 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_cmp_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln510_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln510_reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln509_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp7_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp7_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln509_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln513_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state11_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln513_fu_549_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln513_reg_812 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal trunc_ln515_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln515_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_cmp13_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp13_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal degree_table_addr_6_reg_832 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_cmp17_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp17_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal n_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln498_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_e_1_phi_fu_268_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal n_cast_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln503_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln506_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln510_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln510_1_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln510_2_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln514_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln515_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln518_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal zext_ln519_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln521_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln522_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg10_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg9_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln523_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg4_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg3_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln510_2_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln506_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_315_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln506_fu_332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_336_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln503_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln506_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal reuse_select_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2_fu_411_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln510_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_1_cast1_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln510_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln510_1_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reuse_select8_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln510_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln510_3_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln3_fu_525_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln515_fu_538_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln518_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln4_fu_567_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln514_fu_555_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln518_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln518_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln519_fu_601_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_idx_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_idx_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln519_fu_650_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln518_1_fu_636_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln521_fu_654_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln522_fu_665_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state12);
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    e_1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                e_1_reg_264 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
                e_1_reg_264 <= add_ln513_reg_812;
            end if; 
        end if;
    end process;

    e_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                e_reg_241 <= ap_const_lv6_0;
            elsif (((icmp_ln502_fu_309_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                e_reg_241 <= add_ln502_fu_303_p2;
            end if; 
        end if;
    end process;

    n_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_1_reg_252 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_1_reg_252 <= add_ln509_fu_460_p2;
            end if; 
        end if;
    end process;

    n_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_reg_230 <= ap_const_lv6_0;
            elsif (((icmp_ln498_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_reg_230 <= add_ln498_fu_276_p2;
            end if; 
        end if;
    end process;

    reuse_addr_reg10_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reuse_addr_reg10_fu_82 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
                reuse_addr_reg10_fu_82 <= zext_ln519_fu_607_p1;
            end if; 
        end if;
    end process;

    reuse_addr_reg4_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_addr_reg4_fu_90 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reuse_addr_reg4_fu_90 <= sext_ln510_2_fu_494_p1;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reuse_addr_reg_fu_98 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((icmp_ln502_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                reuse_addr_reg_fu_98 <= zext_ln506_fu_350_p1;
            end if; 
        end if;
    end process;

    reuse_reg3_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reuse_reg3_fu_94 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reuse_reg3_fu_94 <= add_ln510_2_fu_482_p2;
            end if; 
        end if;
    end process;

    reuse_reg9_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reuse_reg9_fu_86 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
                reuse_reg9_fu_86 <= add_ln523_fu_681_p2;
            end if; 
        end if;
    end process;

    reuse_reg_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reuse_reg_fu_102 <= ap_const_lv32_0;
            elsif (((icmp_ln502_reg_750_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                reuse_reg_fu_102 <= add_ln506_fu_379_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                add_ln513_reg_812 <= add_ln513_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then
                addr_cmp13_reg_827 <= addr_cmp13_fu_595_p2;
                addr_cmp17_reg_838 <= addr_cmp17_fu_615_p2;
                degree_table_addr_6_reg_832 <= zext_ln519_fu_607_p1(10 - 1 downto 0);
                trunc_ln515_reg_817 <= trunc_ln515_fu_559_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln509_fu_401_p2 = ap_const_lv1_0))) then
                addr_cmp7_reg_788 <= addr_cmp7_fu_454_p2;
                sub_ln510_reg_773 <= sub_ln510_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln502_reg_750 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                addr_cmp_reg_765 <= addr_cmp_fu_358_p2;
                degree_table_addr_1_reg_759 <= zext_ln506_fu_350_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln502_reg_750 <= icmp_ln502_fu_309_p2;
                icmp_ln502_reg_750_pp1_iter1_reg <= icmp_ln502_reg_750;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln513_reg_798 <= icmp_ln513_fu_519_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln502_fu_309_p2, ap_CS_fsm_state8, icmp_ln509_fu_401_p2, icmp_ln513_reg_798, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp3_stage1_subdone, icmp_ln498_fu_282_p2, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln498_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln502_fu_309_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln502_fu_309_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln509_fu_401_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln513_reg_798 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln513_reg_798 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln498_fu_276_p2 <= std_logic_vector(unsigned(n_reg_230) + unsigned(ap_const_lv6_1));
    add_ln502_fu_303_p2 <= std_logic_vector(unsigned(e_reg_241) + unsigned(ap_const_lv6_1));
    add_ln506_fu_379_p2 <= std_logic_vector(unsigned(reuse_select_fu_372_p3) + unsigned(ap_const_lv32_1));
    add_ln509_fu_460_p2 <= std_logic_vector(unsigned(n_1_reg_252) + unsigned(ap_const_lv5_1));
    add_ln510_1_fu_440_p2 <= std_logic_vector(unsigned(sub_ln510_fu_423_p2) + unsigned(ap_const_lv8_FE));
    add_ln510_2_fu_482_p2 <= std_logic_vector(unsigned(reuse_select8_fu_475_p3) + unsigned(shl_ln510_fu_466_p2));
    add_ln510_3_fu_489_p2 <= std_logic_vector(unsigned(sub_ln510_reg_773) + unsigned(ap_const_lv8_1));
    add_ln510_fu_429_p2 <= std_logic_vector(unsigned(sub_ln510_fu_423_p2) + unsigned(ap_const_lv8_FD));
    add_ln513_fu_549_p2 <= std_logic_vector(unsigned(e_1_reg_264) + unsigned(ap_const_lv6_1));
    add_ln518_fu_581_p2 <= std_logic_vector(unsigned(sub_ln518_fu_575_p2) + unsigned(ap_const_lv10_1));
    add_ln519_fu_601_p2 <= std_logic_vector(unsigned(sub_ln518_fu_575_p2) + unsigned(ap_const_lv10_2));
    add_ln521_fu_654_p2 <= std_logic_vector(unsigned(trunc_ln519_fu_650_p1) + unsigned(trunc_ln518_1_fu_636_p1));
    add_ln522_fu_665_p2 <= std_logic_vector(unsigned(add_ln521_fu_654_p2) + unsigned(ap_const_lv13_1));
    add_ln523_fu_681_p2 <= std_logic_vector(unsigned(offset_idx_fu_643_p3) + unsigned(ap_const_lv32_2));
    addr_cmp13_fu_595_p2 <= "1" when (reuse_addr_reg10_fu_82 = zext_ln518_fu_587_p1) else "0";
    addr_cmp17_fu_615_p2 <= "1" when (reuse_addr_reg10_fu_82 = zext_ln519_fu_607_p1) else "0";
    addr_cmp7_fu_454_p2 <= "1" when (reuse_addr_reg4_fu_90 = sext_ln510_1_fu_446_p1) else "0";
    addr_cmp_fu_358_p2 <= "1" when (reuse_addr_reg_fu_98 = zext_ln506_fu_350_p1) else "0";
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln502_fu_309_p2)
    begin
        if ((icmp_ln502_fu_309_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state12_assign_proc : process(icmp_ln513_reg_798)
    begin
        if ((icmp_ln513_reg_798 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_e_1_phi_fu_268_p4_assign_proc : process(e_1_reg_264, icmp_ln513_reg_798, ap_CS_fsm_pp3_stage0, add_ln513_reg_812, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
            ap_phi_mux_e_1_phi_fu_268_p4 <= add_ln513_reg_812;
        else 
            ap_phi_mux_e_1_phi_fu_268_p4 <= e_1_reg_264;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_address0_assign_proc : process(ap_CS_fsm_state2, degree_table_addr_1_reg_759, ap_CS_fsm_state8, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, degree_table_addr_6_reg_832, ap_enable_reg_pp1_iter2, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, n_cast_fu_288_p1, ap_block_pp1_stage0, sext_ln510_fu_435_p1, zext_ln518_fu_587_p1, ap_block_pp3_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            degree_table_address0 <= degree_table_addr_6_reg_832;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            degree_table_address0 <= zext_ln518_fu_587_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            degree_table_address0 <= sext_ln510_fu_435_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            degree_table_address0 <= degree_table_addr_1_reg_759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            degree_table_address0 <= n_cast_fu_288_p1(10 - 1 downto 0);
        else 
            degree_table_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    degree_table_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln506_fu_350_p1, sext_ln510_1_fu_446_p1, sext_ln510_2_fu_494_p1, ap_block_pp3_stage1, zext_ln519_fu_607_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            degree_table_address1 <= zext_ln519_fu_607_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            degree_table_address1 <= sext_ln510_2_fu_494_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            degree_table_address1 <= sext_ln510_1_fu_446_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            degree_table_address1 <= zext_ln506_fu_350_p1(10 - 1 downto 0);
        else 
            degree_table_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    degree_table_ce0_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            degree_table_ce0 <= ap_const_logic_1;
        else 
            degree_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            degree_table_ce1 <= ap_const_logic_1;
        else 
            degree_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp1_stage0, add_ln523_fu_681_p2, add_ln506_fu_379_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            degree_table_d0 <= add_ln523_fu_681_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            degree_table_d0 <= add_ln506_fu_379_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            degree_table_d0 <= ap_const_lv32_0;
        else 
            degree_table_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    degree_table_d1 <= std_logic_vector(unsigned(reuse_select8_fu_475_p3) + unsigned(shl_ln510_fu_466_p2));

    degree_table_we0_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln502_reg_750_pp1_iter1_reg, icmp_ln513_reg_798, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp3_iter1, icmp_ln498_fu_282_p2)
    begin
        if ((((icmp_ln502_reg_750_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln498_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0)))) then 
            degree_table_we0 <= ap_const_logic_1;
        else 
            degree_table_we0 <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            degree_table_we1 <= ap_const_logic_1;
        else 
            degree_table_we1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln503_fu_323_p1, ap_block_pp1_stage0, zext_ln515_fu_544_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            edge_list_address0 <= zext_ln515_fu_544_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            edge_list_address0 <= zext_ln503_fu_323_p1(10 - 1 downto 0);
        else 
            edge_list_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    edge_list_address1 <= zext_ln514_fu_533_p1(10 - 1 downto 0);

    edge_list_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            edge_list_ce0 <= ap_const_logic_1;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            edge_list_ce1 <= ap_const_logic_1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln498_fu_282_p2 <= "1" when (n_reg_230 = ap_const_lv6_39) else "0";
    icmp_ln502_fu_309_p2 <= "1" when (e_reg_241 = ap_const_lv6_28) else "0";
    icmp_ln509_fu_401_p2 <= "1" when (n_1_reg_252 = ap_const_lv5_13) else "0";
    icmp_ln513_fu_519_p2 <= "1" when (ap_phi_mux_e_1_phi_fu_268_p4 = ap_const_lv6_28) else "0";
    n_1_cast1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_1_reg_252),8));
    n_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_230),64));
    neighbor_table_address0 <= zext_ln522_fu_671_p1(13 - 1 downto 0);
    neighbor_table_address1 <= zext_ln521_fu_660_p1(13 - 1 downto 0);

    neighbor_table_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    neighbor_table_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            neighbor_table_ce1 <= ap_const_logic_1;
        else 
            neighbor_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_table_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_1_reg_264),8));
    neighbor_table_d1 <= trunc_ln515_reg_817;

    neighbor_table_we0_assign_proc : process(icmp_ln513_reg_798, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
            neighbor_table_we0 <= ap_const_logic_1;
        else 
            neighbor_table_we0 <= ap_const_logic_0;
        end if; 
    end process;


    neighbor_table_we1_assign_proc : process(icmp_ln513_reg_798, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln513_reg_798 = ap_const_lv1_0))) then 
            neighbor_table_we1 <= ap_const_logic_1;
        else 
            neighbor_table_we1 <= ap_const_logic_0;
        end if; 
    end process;

    offset_idx_fu_643_p3 <= 
        reuse_reg9_fu_86 when (addr_cmp17_reg_838(0) = '1') else 
        degree_table_q1;
    or_ln515_fu_538_p2 <= (shl_ln3_fu_525_p3 or ap_const_lv7_1);
    reuse_select8_fu_475_p3 <= 
        reuse_reg3_fu_94 when (addr_cmp7_reg_788(0) = '1') else 
        degree_table_q1;
    reuse_select_fu_372_p3 <= 
        reuse_reg_fu_102 when (addr_cmp_reg_765(0) = '1') else 
        degree_table_q1;
        sext_ln510_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln510_1_fu_440_p2),64));

        sext_ln510_2_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln510_3_fu_489_p2),64));

        sext_ln510_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln510_fu_429_p2),64));

    shl_ln1_fu_336_p3 <= (trunc_ln506_fu_332_p1 & ap_const_lv2_0);
    shl_ln2_fu_411_p3 <= (n_1_reg_252 & ap_const_lv2_0);
    shl_ln3_fu_525_p3 <= (ap_phi_mux_e_1_phi_fu_268_p4 & ap_const_lv1_0);
    shl_ln4_fu_567_p3 <= (trunc_ln518_fu_563_p1 & ap_const_lv2_0);
    shl_ln510_fu_466_p2 <= std_logic_vector(shift_left(unsigned(degree_table_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln_fu_315_p3 <= (e_reg_241 & ap_const_lv1_0);
    start_idx_fu_629_p3 <= 
        reuse_reg9_fu_86 when (addr_cmp13_reg_827(0) = '1') else 
        degree_table_q0;
    sub_ln506_fu_344_p2 <= std_logic_vector(unsigned(shl_ln1_fu_336_p3) - unsigned(trunc_ln503_fu_328_p1));
    sub_ln510_fu_423_p2 <= std_logic_vector(unsigned(zext_ln510_fu_419_p1) - unsigned(n_1_cast1_fu_407_p1));
    sub_ln518_fu_575_p2 <= std_logic_vector(unsigned(shl_ln4_fu_567_p3) - unsigned(trunc_ln514_fu_555_p1));
    trunc_ln503_fu_328_p1 <= edge_list_q0(10 - 1 downto 0);
    trunc_ln506_fu_332_p1 <= edge_list_q0(8 - 1 downto 0);
    trunc_ln514_fu_555_p1 <= edge_list_q1(10 - 1 downto 0);
    trunc_ln515_fu_559_p1 <= edge_list_q0(8 - 1 downto 0);
    trunc_ln518_1_fu_636_p1 <= start_idx_fu_629_p3(13 - 1 downto 0);
    trunc_ln518_fu_563_p1 <= edge_list_q1(8 - 1 downto 0);
    trunc_ln519_fu_650_p1 <= offset_idx_fu_643_p3(13 - 1 downto 0);
    zext_ln503_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_315_p3),64));
    zext_ln506_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln506_fu_344_p2),64));
    zext_ln510_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_411_p3),8));
    zext_ln514_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_525_p3),64));
    zext_ln515_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln515_fu_538_p2),64));
    zext_ln518_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln518_fu_581_p2),64));
    zext_ln519_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln519_fu_601_p2),64));
    zext_ln521_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln521_fu_654_p2),64));
    zext_ln522_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln522_fu_665_p2),64));
end behav;
