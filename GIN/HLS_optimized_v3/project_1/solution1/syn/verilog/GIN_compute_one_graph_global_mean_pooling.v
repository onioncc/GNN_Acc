// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_global_mean_pooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_embedding_V_address0,
        node_embedding_V_ce0,
        node_embedding_V_q0,
        node_embedding_V_address1,
        node_embedding_V_ce1,
        node_embedding_V_q1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_pp0_stage1 = 12'd4;
parameter    ap_ST_fsm_pp0_stage2 = 12'd8;
parameter    ap_ST_fsm_pp0_stage3 = 12'd16;
parameter    ap_ST_fsm_pp0_stage4 = 12'd32;
parameter    ap_ST_fsm_pp0_stage5 = 12'd64;
parameter    ap_ST_fsm_pp0_stage6 = 12'd128;
parameter    ap_ST_fsm_pp0_stage7 = 12'd256;
parameter    ap_ST_fsm_pp0_stage8 = 12'd512;
parameter    ap_ST_fsm_pp0_stage9 = 12'd1024;
parameter    ap_ST_fsm_state14 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] node_embedding_V_address0;
output   node_embedding_V_ce0;
input  [31:0] node_embedding_V_q0;
output  [14:0] node_embedding_V_address1;
output   node_embedding_V_ce1;
input  [31:0] node_embedding_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] node_embedding_V_address0;
reg node_embedding_V_ce0;
reg[14:0] node_embedding_V_address1;
reg node_embedding_V_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] graph_embedding_V_address1;
reg    graph_embedding_V_ce1;
reg    graph_embedding_V_we1;
wire   [31:0] graph_embedding_V_d1;
reg   [6:0] dim_reg_266;
reg   [31:0] reg_278;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state13_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln391_reg_708;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] reg_283;
reg   [31:0] reg_287;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg   [31:0] reg_291;
wire   [0:0] icmp_ln391_fu_301_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln391_reg_708_pp0_iter1_reg;
wire   [63:0] dim_cast_fu_307_p1;
reg   [63:0] dim_cast_reg_712;
reg   [63:0] dim_cast_reg_712_pp0_iter1_reg;
wire   [7:0] zext_ln703_5_fu_312_p1;
reg   [7:0] zext_ln703_5_reg_717;
wire   [8:0] zext_ln703_3_fu_327_p1;
reg   [8:0] zext_ln703_3_reg_733;
wire   [9:0] zext_ln703_4_fu_353_p1;
reg   [9:0] zext_ln703_4_reg_749;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] add_ln703_2_fu_394_p2;
reg   [31:0] add_ln703_2_reg_767;
wire   [6:0] add_ln391_fu_448_p2;
reg   [6:0] add_ln391_reg_792;
wire   [10:0] zext_ln703_fu_454_p1;
reg   [10:0] zext_ln703_reg_797;
wire   [31:0] add_ln703_6_fu_492_p2;
reg   [31:0] add_ln703_6_reg_815;
wire   [31:0] add_ln703_8_fu_518_p2;
reg   [31:0] add_ln703_8_reg_830;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] add_ln703_10_fu_550_p2;
reg   [31:0] add_ln703_10_reg_845;
wire  signed [31:0] add_ln703_17_fu_630_p2;
reg  signed [31:0] add_ln703_17_reg_865;
reg   [0:0] tmp_2_reg_870;
wire    ap_block_pp0_stage5_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage9_subdone;
reg   [6:0] ap_phi_mux_dim_phi_fu_270_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln703_6_fu_322_p1;
wire   [63:0] zext_ln703_7_fu_337_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln703_8_fu_348_p1;
wire   [63:0] zext_ln703_9_fu_366_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln703_10_fu_377_p1;
wire   [63:0] zext_ln703_11_fu_405_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln703_12_fu_415_p1;
wire   [63:0] zext_ln703_13_fu_429_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln703_14_fu_443_p1;
wire   [63:0] zext_ln703_15_fu_464_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln703_16_fu_475_p1;
wire   [63:0] zext_ln703_17_fu_503_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln703_18_fu_513_p1;
wire   [63:0] zext_ln703_19_fu_529_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln703_20_fu_539_p1;
wire   [63:0] zext_ln703_21_fu_565_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln703_22_fu_579_p1;
wire   [63:0] zext_ln703_23_fu_593_p1;
wire    ap_block_pp0_stage9;
wire   [7:0] add_ln703_18_fu_316_p2;
wire   [8:0] add_ln703_19_fu_331_p2;
wire   [8:0] add_ln703_20_fu_342_p2;
wire   [7:0] add_ln703_21_fu_357_p2;
wire  signed [8:0] sext_ln703_fu_362_p1;
wire   [9:0] add_ln703_22_fu_371_p2;
wire   [31:0] add_ln703_1_fu_388_p2;
wire   [31:0] add_ln703_fu_382_p2;
wire   [9:0] add_ln703_23_fu_400_p2;
wire   [9:0] add_ln703_24_fu_410_p2;
wire   [8:0] add_ln703_25_fu_420_p2;
wire  signed [9:0] sext_ln703_1_fu_425_p1;
wire   [7:0] add_ln703_26_fu_434_p2;
wire  signed [9:0] sext_ln703_2_fu_439_p1;
wire   [10:0] add_ln703_27_fu_458_p2;
wire   [10:0] add_ln703_28_fu_469_p2;
wire   [31:0] add_ln703_4_fu_480_p2;
wire   [31:0] add_ln703_5_fu_486_p2;
wire   [31:0] grp_fu_295_p2;
wire   [10:0] add_ln703_29_fu_498_p2;
wire   [10:0] add_ln703_30_fu_508_p2;
wire   [10:0] add_ln703_31_fu_524_p2;
wire   [10:0] add_ln703_32_fu_534_p2;
wire   [31:0] add_ln703_9_fu_544_p2;
wire   [9:0] add_ln703_33_fu_556_p2;
wire  signed [10:0] sext_ln703_3_fu_561_p1;
wire   [9:0] add_ln703_34_fu_570_p2;
wire  signed [10:0] sext_ln703_4_fu_575_p1;
wire   [8:0] add_ln703_35_fu_584_p2;
wire  signed [10:0] sext_ln703_5_fu_589_p1;
wire   [31:0] add_ln703_13_fu_606_p2;
wire   [31:0] add_ln703_14_fu_612_p2;
wire   [31:0] add_ln703_15_fu_618_p2;
wire   [31:0] add_ln703_11_fu_602_p2;
wire   [31:0] add_ln703_16_fu_624_p2;
wire   [31:0] add_ln703_7_fu_598_p2;
wire   [33:0] mul_ln1148_fu_647_p1;
wire   [64:0] mul_ln1148_fu_647_p2;
wire   [64:0] sub_ln1148_fu_653_p2;
wire   [27:0] tmp_3_fu_659_p4;
wire   [27:0] tmp_fu_673_p4;
wire  signed [31:0] sext_ln1148_1_fu_669_p1;
wire  signed [31:0] sext_ln1148_2_fu_683_p1;
wire   [31:0] select_ln1148_fu_687_p3;
wire   [31:0] sub_ln1148_1_fu_694_p2;
wire    ap_CS_fsm_state14;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

GIN_compute_one_graph_global_mean_pooling_graph_embedding_V #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
graph_embedding_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(graph_embedding_V_address1),
    .ce1(graph_embedding_V_ce1),
    .we1(graph_embedding_V_we1),
    .d1(graph_embedding_V_d1)
);

GIN_compute_one_graph_mul_32s_34ns_65_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_1_1_U557(
    .din0(add_ln703_17_reg_865),
    .din1(mul_ln1148_fu_647_p1),
    .dout(mul_ln1148_fu_647_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_condition_pp0_exit_iter0_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dim_reg_266 <= add_ln391_reg_792;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dim_reg_266 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_278 <= node_embedding_V_q0;
    end else if ((((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_278 <= node_embedding_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln391_reg_792 <= add_ln391_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln703_10_reg_845 <= add_ln703_10_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln703_17_reg_865 <= add_ln703_17_fu_630_p2;
        tmp_2_reg_870 <= add_ln703_17_fu_630_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln703_2_reg_767 <= add_ln703_2_fu_394_p2;
        zext_ln703_4_reg_749[6 : 0] <= zext_ln703_4_fu_353_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln703_6_reg_815 <= add_ln703_6_fu_492_p2;
        zext_ln703_reg_797[6 : 0] <= zext_ln703_fu_454_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln703_8_reg_830 <= add_ln703_8_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln391_fu_301_p2 == 1'd0))) begin
        dim_cast_reg_712[6 : 0] <= dim_cast_fu_307_p1[6 : 0];
        zext_ln703_5_reg_717[6 : 0] <= zext_ln703_5_fu_312_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dim_cast_reg_712_pp0_iter1_reg[6 : 0] <= dim_cast_reg_712[6 : 0];
        icmp_ln391_reg_708 <= icmp_ln391_fu_301_p2;
        icmp_ln391_reg_708_pp0_iter1_reg <= icmp_ln391_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_283 <= node_embedding_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_287 <= node_embedding_V_q1;
        reg_291 <= node_embedding_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln703_3_reg_733[6 : 0] <= zext_ln703_3_fu_327_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln391_reg_708 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln391_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_dim_phi_fu_270_p4 = add_ln391_reg_792;
    end else begin
        ap_phi_mux_dim_phi_fu_270_p4 = dim_reg_266;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        graph_embedding_V_ce1 = 1'b1;
    end else begin
        graph_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln391_reg_708_pp0_iter1_reg == 1'd0))) begin
        graph_embedding_V_we1 = 1'b1;
    end else begin
        graph_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            node_embedding_V_address0 = zext_ln703_23_fu_593_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            node_embedding_V_address0 = zext_ln703_22_fu_579_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            node_embedding_V_address0 = zext_ln703_20_fu_539_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            node_embedding_V_address0 = zext_ln703_18_fu_513_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            node_embedding_V_address0 = zext_ln703_16_fu_475_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            node_embedding_V_address0 = zext_ln703_14_fu_443_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            node_embedding_V_address0 = zext_ln703_12_fu_415_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            node_embedding_V_address0 = zext_ln703_10_fu_377_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            node_embedding_V_address0 = zext_ln703_8_fu_348_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            node_embedding_V_address0 = zext_ln703_6_fu_322_p1;
        end else begin
            node_embedding_V_address0 = 'bx;
        end
    end else begin
        node_embedding_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            node_embedding_V_address1 = zext_ln703_21_fu_565_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            node_embedding_V_address1 = zext_ln703_19_fu_529_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            node_embedding_V_address1 = zext_ln703_17_fu_503_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            node_embedding_V_address1 = zext_ln703_15_fu_464_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            node_embedding_V_address1 = zext_ln703_13_fu_429_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            node_embedding_V_address1 = zext_ln703_11_fu_405_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            node_embedding_V_address1 = zext_ln703_9_fu_366_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            node_embedding_V_address1 = zext_ln703_7_fu_337_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            node_embedding_V_address1 = dim_cast_fu_307_p1;
        end else begin
            node_embedding_V_address1 = 'bx;
        end
    end else begin
        node_embedding_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        node_embedding_V_ce0 = 1'b1;
    end else begin
        node_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        node_embedding_V_ce1 = 1'b1;
    end else begin
        node_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((icmp_ln391_reg_708 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((icmp_ln391_reg_708 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln391_fu_448_p2 = (dim_reg_266 + 7'd1);

assign add_ln703_10_fu_550_p2 = (add_ln703_9_fu_544_p2 + reg_278);

assign add_ln703_11_fu_602_p2 = (add_ln703_10_reg_845 + add_ln703_8_reg_830);

assign add_ln703_13_fu_606_p2 = (reg_291 + node_embedding_V_q0);

assign add_ln703_14_fu_612_p2 = (add_ln703_13_fu_606_p2 + reg_287);

assign add_ln703_15_fu_618_p2 = (add_ln703_14_fu_612_p2 + grp_fu_295_p2);

assign add_ln703_16_fu_624_p2 = (add_ln703_15_fu_618_p2 + add_ln703_11_fu_602_p2);

assign add_ln703_17_fu_630_p2 = (add_ln703_16_fu_624_p2 + add_ln703_7_fu_598_p2);

assign add_ln703_18_fu_316_p2 = (zext_ln703_5_fu_312_p1 + 8'd100);

assign add_ln703_19_fu_331_p2 = (zext_ln703_3_fu_327_p1 + 9'd200);

assign add_ln703_1_fu_388_p2 = (node_embedding_V_q1 + node_embedding_V_q0);

assign add_ln703_20_fu_342_p2 = ($signed(zext_ln703_3_fu_327_p1) + $signed(9'd300));

assign add_ln703_21_fu_357_p2 = ($signed(zext_ln703_5_reg_717) + $signed(8'd144));

assign add_ln703_22_fu_371_p2 = (zext_ln703_4_fu_353_p1 + 10'd500);

assign add_ln703_23_fu_400_p2 = ($signed(zext_ln703_4_reg_749) + $signed(10'd600));

assign add_ln703_24_fu_410_p2 = ($signed(zext_ln703_4_reg_749) + $signed(10'd700));

assign add_ln703_25_fu_420_p2 = ($signed(zext_ln703_3_reg_733) + $signed(9'd288));

assign add_ln703_26_fu_434_p2 = ($signed(zext_ln703_5_reg_717) + $signed(8'd132));

assign add_ln703_27_fu_458_p2 = (zext_ln703_fu_454_p1 + 11'd1000);

assign add_ln703_28_fu_469_p2 = ($signed(zext_ln703_fu_454_p1) + $signed(11'd1100));

assign add_ln703_29_fu_498_p2 = ($signed(zext_ln703_reg_797) + $signed(11'd1200));

assign add_ln703_2_fu_394_p2 = (add_ln703_1_fu_388_p2 + add_ln703_fu_382_p2);

assign add_ln703_30_fu_508_p2 = ($signed(zext_ln703_reg_797) + $signed(11'd1300));

assign add_ln703_31_fu_524_p2 = ($signed(zext_ln703_reg_797) + $signed(11'd1400));

assign add_ln703_32_fu_534_p2 = ($signed(zext_ln703_reg_797) + $signed(11'd1500));

assign add_ln703_33_fu_556_p2 = ($signed(zext_ln703_4_reg_749) + $signed(10'd576));

assign add_ln703_34_fu_570_p2 = ($signed(zext_ln703_4_reg_749) + $signed(10'd676));

assign add_ln703_35_fu_584_p2 = ($signed(zext_ln703_3_reg_733) + $signed(9'd264));

assign add_ln703_4_fu_480_p2 = (reg_291 + node_embedding_V_q1);

assign add_ln703_5_fu_486_p2 = (add_ln703_4_fu_480_p2 + reg_287);

assign add_ln703_6_fu_492_p2 = (add_ln703_5_fu_486_p2 + grp_fu_295_p2);

assign add_ln703_7_fu_598_p2 = (add_ln703_6_reg_815 + add_ln703_2_reg_767);

assign add_ln703_8_fu_518_p2 = (reg_278 + node_embedding_V_q1);

assign add_ln703_9_fu_544_p2 = (node_embedding_V_q1 + node_embedding_V_q0);

assign add_ln703_fu_382_p2 = (reg_283 + reg_278);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dim_cast_fu_307_p1 = ap_phi_mux_dim_phi_fu_270_p4;

assign graph_embedding_V_address1 = dim_cast_reg_712_pp0_iter1_reg;

assign graph_embedding_V_d1 = ((tmp_2_reg_870[0:0] == 1'b1) ? sub_ln1148_1_fu_694_p2 : sext_ln1148_2_fu_683_p1);

assign grp_fu_295_p2 = (reg_278 + reg_283);

assign icmp_ln391_fu_301_p2 = ((ap_phi_mux_dim_phi_fu_270_p4 == 7'd100) ? 1'b1 : 1'b0);

assign mul_ln1148_fu_647_p1 = 65'd7233629131;

assign select_ln1148_fu_687_p3 = ((tmp_2_reg_870[0:0] == 1'b1) ? sext_ln1148_1_fu_669_p1 : sext_ln1148_2_fu_683_p1);

assign sext_ln1148_1_fu_669_p1 = $signed(tmp_3_fu_659_p4);

assign sext_ln1148_2_fu_683_p1 = $signed(tmp_fu_673_p4);

assign sext_ln703_1_fu_425_p1 = $signed(add_ln703_25_fu_420_p2);

assign sext_ln703_2_fu_439_p1 = $signed(add_ln703_26_fu_434_p2);

assign sext_ln703_3_fu_561_p1 = $signed(add_ln703_33_fu_556_p2);

assign sext_ln703_4_fu_575_p1 = $signed(add_ln703_34_fu_570_p2);

assign sext_ln703_5_fu_589_p1 = $signed(add_ln703_35_fu_584_p2);

assign sext_ln703_fu_362_p1 = $signed(add_ln703_21_fu_357_p2);

assign sub_ln1148_1_fu_694_p2 = (32'd0 - select_ln1148_fu_687_p3);

assign sub_ln1148_fu_653_p2 = (65'd0 - mul_ln1148_fu_647_p2);

assign tmp_3_fu_659_p4 = {{sub_ln1148_fu_653_p2[64:37]}};

assign tmp_fu_673_p4 = {{mul_ln1148_fu_647_p2[64:37]}};

assign zext_ln703_10_fu_377_p1 = add_ln703_22_fu_371_p2;

assign zext_ln703_11_fu_405_p1 = add_ln703_23_fu_400_p2;

assign zext_ln703_12_fu_415_p1 = add_ln703_24_fu_410_p2;

assign zext_ln703_13_fu_429_p1 = $unsigned(sext_ln703_1_fu_425_p1);

assign zext_ln703_14_fu_443_p1 = $unsigned(sext_ln703_2_fu_439_p1);

assign zext_ln703_15_fu_464_p1 = add_ln703_27_fu_458_p2;

assign zext_ln703_16_fu_475_p1 = add_ln703_28_fu_469_p2;

assign zext_ln703_17_fu_503_p1 = add_ln703_29_fu_498_p2;

assign zext_ln703_18_fu_513_p1 = add_ln703_30_fu_508_p2;

assign zext_ln703_19_fu_529_p1 = add_ln703_31_fu_524_p2;

assign zext_ln703_20_fu_539_p1 = add_ln703_32_fu_534_p2;

assign zext_ln703_21_fu_565_p1 = $unsigned(sext_ln703_3_fu_561_p1);

assign zext_ln703_22_fu_579_p1 = $unsigned(sext_ln703_4_fu_575_p1);

assign zext_ln703_23_fu_593_p1 = $unsigned(sext_ln703_5_fu_589_p1);

assign zext_ln703_3_fu_327_p1 = dim_reg_266;

assign zext_ln703_4_fu_353_p1 = dim_reg_266;

assign zext_ln703_5_fu_312_p1 = ap_phi_mux_dim_phi_fu_270_p4;

assign zext_ln703_6_fu_322_p1 = add_ln703_18_fu_316_p2;

assign zext_ln703_7_fu_337_p1 = add_ln703_19_fu_331_p2;

assign zext_ln703_8_fu_348_p1 = add_ln703_20_fu_342_p2;

assign zext_ln703_9_fu_366_p1 = $unsigned(sext_ln703_fu_362_p1);

assign zext_ln703_fu_454_p1 = dim_reg_266;

always @ (posedge ap_clk) begin
    dim_cast_reg_712[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    dim_cast_reg_712_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln703_5_reg_717[7] <= 1'b0;
    zext_ln703_3_reg_733[8:7] <= 2'b00;
    zext_ln703_4_reg_749[9:7] <= 3'b000;
    zext_ln703_reg_797[10:7] <= 4'b0000;
end

endmodule //GIN_compute_one_graph_global_mean_pooling
