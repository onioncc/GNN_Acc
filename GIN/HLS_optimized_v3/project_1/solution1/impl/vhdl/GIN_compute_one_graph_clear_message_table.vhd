-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_clear_message_table is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    message_tb_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message_tb_ce1 : OUT STD_LOGIC;
    message_tb_we1 : OUT STD_LOGIC;
    message_tb_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_clear_message_table is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln226_fu_46_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln226_reg_58 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_clear_message_table_one_node_fu_38_ap_start : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_ap_done : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_ap_idle : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_ap_ready : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_message_tb_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_clear_message_table_one_node_fu_38_message_tb_ce1 : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_message_tb_we1 : STD_LOGIC;
    signal grp_clear_message_table_one_node_fu_38_message_tb_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_26 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_clear_message_table_one_node_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln226_fu_52_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_clear_message_table_one_node IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        message_tb_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        message_tb_ce1 : OUT STD_LOGIC;
        message_tb_we1 : OUT STD_LOGIC;
        message_tb_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        message_tb_offset : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_clear_message_table_one_node_fu_38 : component GIN_compute_one_graph_clear_message_table_one_node
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_clear_message_table_one_node_fu_38_ap_start,
        ap_done => grp_clear_message_table_one_node_fu_38_ap_done,
        ap_idle => grp_clear_message_table_one_node_fu_38_ap_idle,
        ap_ready => grp_clear_message_table_one_node_fu_38_ap_ready,
        message_tb_address1 => grp_clear_message_table_one_node_fu_38_message_tb_address1,
        message_tb_ce1 => grp_clear_message_table_one_node_fu_38_message_tb_ce1,
        message_tb_we1 => grp_clear_message_table_one_node_fu_38_message_tb_we1,
        message_tb_d1 => grp_clear_message_table_one_node_fu_38_message_tb_d1,
        message_tb_offset => n_reg_26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_clear_message_table_one_node_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clear_message_table_one_node_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln226_fu_52_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_clear_message_table_one_node_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clear_message_table_one_node_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_clear_message_table_one_node_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_reg_26_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_reg_26 <= ap_const_lv5_0;
            elsif (((grp_clear_message_table_one_node_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                n_reg_26 <= add_ln226_reg_58;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln226_reg_58 <= add_ln226_fu_46_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_clear_message_table_one_node_fu_38_ap_done, ap_CS_fsm_state3, icmp_ln226_fu_52_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln226_fu_52_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_clear_message_table_one_node_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln226_fu_46_p2 <= std_logic_vector(unsigned(n_reg_26) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln226_fu_52_p2)
    begin
        if ((((icmp_ln226_fu_52_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln226_fu_52_p2)
    begin
        if (((icmp_ln226_fu_52_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_clear_message_table_one_node_fu_38_ap_start <= grp_clear_message_table_one_node_fu_38_ap_start_reg;
    icmp_ln226_fu_52_p2 <= "1" when (n_reg_26 = ap_const_lv5_13) else "0";
    message_tb_address1 <= grp_clear_message_table_one_node_fu_38_message_tb_address1;
    message_tb_ce1 <= grp_clear_message_table_one_node_fu_38_message_tb_ce1;
    message_tb_d1 <= grp_clear_message_table_one_node_fu_38_message_tb_d1;
    message_tb_we1 <= grp_clear_message_table_one_node_fu_38_message_tb_we1;
end behav;
