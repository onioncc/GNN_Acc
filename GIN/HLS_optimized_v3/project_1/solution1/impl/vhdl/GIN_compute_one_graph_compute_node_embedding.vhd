-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_node_embedding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    node_embedding_V_ce1 : OUT STD_LOGIC;
    node_embedding_V_we1 : OUT STD_LOGIC;
    node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    degree_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce0 : OUT STD_LOGIC;
    degree_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    degree_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce1 : OUT STD_LOGIC;
    degree_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message1_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message1_V_ce0 : OUT STD_LOGIC;
    message1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message1_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message1_V_ce1 : OUT STD_LOGIC;
    message1_V_we1 : OUT STD_LOGIC;
    message1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_node_embedding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_fu_90_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln278_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln278_fu_97_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln278_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal nd_1_fu_101_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal emb_vec1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal emb_vec1_V_ce0 : STD_LOGIC;
    signal emb_vec1_V_we0 : STD_LOGIC;
    signal emb_vec1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal emb_vec2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal emb_vec2_V_ce0 : STD_LOGIC;
    signal emb_vec2_V_we0 : STD_LOGIC;
    signal emb_vec2_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_ap_start : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_ap_done : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_ap_idle : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_ap_ready : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_emb_vec_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_emb_vec_ce0 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_emb_vec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_nd_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_message_tb_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_message_tb_ce0 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_message_tb_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_message_tb_ce1 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_message_tb_we1 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_message_tb_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_degree_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_degree_table_ce0 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_degree_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_degree_table_ce1 : STD_LOGIC;
    signal grp_message_passing_one_node_vec_fu_60_neighbor_table_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_message_passing_one_node_vec_fu_60_neighbor_table_ce0 : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_ap_start : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_ap_done : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_ap_idle : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_ap_ready : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_nd : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_one_node_embedding_fu_73_emb_vec_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_one_node_embedding_fu_73_emb_vec_ce0 : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_emb_vec_we0 : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_emb_vec_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_one_node_embedding_fu_73_node_embedding_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_one_node_embedding_fu_73_node_embedding_V_ce1 : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_node_embedding_V_we1 : STD_LOGIC;
    signal grp_one_node_embedding_fu_73_node_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nd_reg_48 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_message_passing_one_node_vec_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_one_node_embedding_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_message_passing_one_node_vec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        emb_vec_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        emb_vec_ce0 : OUT STD_LOGIC;
        emb_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nd_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        message_tb_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        message_tb_ce0 : OUT STD_LOGIC;
        message_tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_tb_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        message_tb_ce1 : OUT STD_LOGIC;
        message_tb_we1 : OUT STD_LOGIC;
        message_tb_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        degree_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        degree_table_ce0 : OUT STD_LOGIC;
        degree_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        degree_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        degree_table_ce1 : OUT STD_LOGIC;
        degree_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        neighbor_table_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        neighbor_table_ce0 : OUT STD_LOGIC;
        neighbor_table_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component GIN_compute_one_graph_one_node_embedding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nd : IN STD_LOGIC_VECTOR (4 downto 0);
        emb_vec_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        emb_vec_ce0 : OUT STD_LOGIC;
        emb_vec_we0 : OUT STD_LOGIC;
        emb_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        node_embedding_V_ce1 : OUT STD_LOGIC;
        node_embedding_V_we1 : OUT STD_LOGIC;
        node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_node_embedding_emb_vec1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    emb_vec1_V_U : component GIN_compute_one_graph_compute_node_embedding_emb_vec1_V
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => emb_vec1_V_address0,
        ce0 => emb_vec1_V_ce0,
        we0 => emb_vec1_V_we0,
        d0 => grp_one_node_embedding_fu_73_emb_vec_d0,
        q0 => emb_vec1_V_q0);

    emb_vec2_V_U : component GIN_compute_one_graph_compute_node_embedding_emb_vec1_V
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => emb_vec2_V_address0,
        ce0 => emb_vec2_V_ce0,
        we0 => emb_vec2_V_we0,
        d0 => grp_one_node_embedding_fu_73_emb_vec_d0,
        q0 => emb_vec2_V_q0);

    grp_message_passing_one_node_vec_fu_60 : component GIN_compute_one_graph_message_passing_one_node_vec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_message_passing_one_node_vec_fu_60_ap_start,
        ap_done => grp_message_passing_one_node_vec_fu_60_ap_done,
        ap_idle => grp_message_passing_one_node_vec_fu_60_ap_idle,
        ap_ready => grp_message_passing_one_node_vec_fu_60_ap_ready,
        emb_vec_address0 => grp_message_passing_one_node_vec_fu_60_emb_vec_address0,
        emb_vec_ce0 => grp_message_passing_one_node_vec_fu_60_emb_vec_ce0,
        emb_vec_q0 => grp_message_passing_one_node_vec_fu_60_emb_vec_q0,
        nd_offset => grp_message_passing_one_node_vec_fu_60_nd_offset,
        message_tb_address0 => grp_message_passing_one_node_vec_fu_60_message_tb_address0,
        message_tb_ce0 => grp_message_passing_one_node_vec_fu_60_message_tb_ce0,
        message_tb_q0 => message1_V_q0,
        message_tb_address1 => grp_message_passing_one_node_vec_fu_60_message_tb_address1,
        message_tb_ce1 => grp_message_passing_one_node_vec_fu_60_message_tb_ce1,
        message_tb_we1 => grp_message_passing_one_node_vec_fu_60_message_tb_we1,
        message_tb_d1 => grp_message_passing_one_node_vec_fu_60_message_tb_d1,
        degree_table_address0 => grp_message_passing_one_node_vec_fu_60_degree_table_address0,
        degree_table_ce0 => grp_message_passing_one_node_vec_fu_60_degree_table_ce0,
        degree_table_q0 => degree_table_q0,
        degree_table_address1 => grp_message_passing_one_node_vec_fu_60_degree_table_address1,
        degree_table_ce1 => grp_message_passing_one_node_vec_fu_60_degree_table_ce1,
        degree_table_q1 => degree_table_q1,
        neighbor_table_address0 => grp_message_passing_one_node_vec_fu_60_neighbor_table_address0,
        neighbor_table_ce0 => grp_message_passing_one_node_vec_fu_60_neighbor_table_ce0,
        neighbor_table_q0 => neighbor_table_q0);

    grp_one_node_embedding_fu_73 : component GIN_compute_one_graph_one_node_embedding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_one_node_embedding_fu_73_ap_start,
        ap_done => grp_one_node_embedding_fu_73_ap_done,
        ap_idle => grp_one_node_embedding_fu_73_ap_idle,
        ap_ready => grp_one_node_embedding_fu_73_ap_ready,
        nd => grp_one_node_embedding_fu_73_nd,
        emb_vec_address0 => grp_one_node_embedding_fu_73_emb_vec_address0,
        emb_vec_ce0 => grp_one_node_embedding_fu_73_emb_vec_ce0,
        emb_vec_we0 => grp_one_node_embedding_fu_73_emb_vec_we0,
        emb_vec_d0 => grp_one_node_embedding_fu_73_emb_vec_d0,
        node_embedding_V_address1 => grp_one_node_embedding_fu_73_node_embedding_V_address1,
        node_embedding_V_ce1 => grp_one_node_embedding_fu_73_node_embedding_V_ce1,
        node_embedding_V_we1 => grp_one_node_embedding_fu_73_node_embedding_V_we1,
        node_embedding_V_d1 => grp_one_node_embedding_fu_73_node_embedding_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_message_passing_one_node_vec_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_message_passing_one_node_vec_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln278_fu_84_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln278_fu_97_p1 = ap_const_lv1_1) and (icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln278_fu_97_p1 = ap_const_lv1_0) and (icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_message_passing_one_node_vec_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_message_passing_one_node_vec_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_message_passing_one_node_vec_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_one_node_embedding_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_one_node_embedding_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((trunc_ln278_fu_97_p1 = ap_const_lv1_1) and (icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln278_fu_97_p1 = ap_const_lv1_0) and (icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_one_node_embedding_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_one_node_embedding_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_one_node_embedding_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    nd_reg_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                nd_reg_48 <= nd_1_fu_101_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_one_node_embedding_fu_73_ap_done = ap_const_logic_1))) then 
                nd_reg_48 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sub_reg_110 <= sub_fu_90_p2;
                trunc_ln278_reg_115 <= trunc_ln278_fu_97_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln278_fu_84_p2, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_ap_done, grp_one_node_embedding_fu_73_ap_done, ap_CS_fsm_state2, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_one_node_embedding_fu_73_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln278_fu_84_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_message_passing_one_node_vec_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state4_on_subcall_done_assign_proc : process(trunc_ln278_reg_115, grp_message_passing_one_node_vec_fu_60_ap_done, grp_one_node_embedding_fu_73_ap_done)
    begin
                ap_block_state4_on_subcall_done <= (((trunc_ln278_reg_115 = ap_const_lv1_1) and (grp_one_node_embedding_fu_73_ap_done = ap_const_logic_0)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (grp_one_node_embedding_fu_73_ap_done = ap_const_logic_0)) or ((grp_message_passing_one_node_vec_fu_60_ap_done = ap_const_logic_0) and (trunc_ln278_reg_115 = ap_const_lv1_1)) or ((grp_message_passing_one_node_vec_fu_60_ap_done = ap_const_logic_0) and (trunc_ln278_reg_115 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_message_passing_one_node_vec_fu_60_ap_done, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_message_passing_one_node_vec_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_message_passing_one_node_vec_fu_60_ap_done, ap_CS_fsm_state5)
    begin
        if (((grp_message_passing_one_node_vec_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    degree_table_address0 <= grp_message_passing_one_node_vec_fu_60_degree_table_address0;
    degree_table_address1 <= grp_message_passing_one_node_vec_fu_60_degree_table_address1;

    degree_table_ce0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_degree_table_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            degree_table_ce0 <= grp_message_passing_one_node_vec_fu_60_degree_table_ce0;
        else 
            degree_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_ce1_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_degree_table_ce1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            degree_table_ce1 <= grp_message_passing_one_node_vec_fu_60_degree_table_ce1;
        else 
            degree_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    emb_vec1_V_address0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_emb_vec_address0, grp_one_node_embedding_fu_73_emb_vec_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            emb_vec1_V_address0 <= grp_one_node_embedding_fu_73_emb_vec_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            emb_vec1_V_address0 <= grp_message_passing_one_node_vec_fu_60_emb_vec_address0;
        else 
            emb_vec1_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    emb_vec1_V_ce0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_emb_vec_ce0, grp_one_node_embedding_fu_73_emb_vec_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            emb_vec1_V_ce0 <= grp_one_node_embedding_fu_73_emb_vec_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            emb_vec1_V_ce0 <= grp_message_passing_one_node_vec_fu_60_emb_vec_ce0;
        else 
            emb_vec1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    emb_vec1_V_we0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_one_node_embedding_fu_73_emb_vec_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            emb_vec1_V_we0 <= grp_one_node_embedding_fu_73_emb_vec_we0;
        else 
            emb_vec1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    emb_vec2_V_address0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_emb_vec_address0, grp_one_node_embedding_fu_73_emb_vec_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((trunc_ln278_reg_115 = ap_const_lv1_1)) then 
                emb_vec2_V_address0 <= grp_one_node_embedding_fu_73_emb_vec_address0;
            elsif ((trunc_ln278_reg_115 = ap_const_lv1_0)) then 
                emb_vec2_V_address0 <= grp_message_passing_one_node_vec_fu_60_emb_vec_address0;
            else 
                emb_vec2_V_address0 <= "XXXXXXX";
            end if;
        else 
            emb_vec2_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    emb_vec2_V_ce0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_emb_vec_ce0, grp_one_node_embedding_fu_73_emb_vec_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((trunc_ln278_reg_115 = ap_const_lv1_1)) then 
                emb_vec2_V_ce0 <= grp_one_node_embedding_fu_73_emb_vec_ce0;
            elsif ((trunc_ln278_reg_115 = ap_const_lv1_0)) then 
                emb_vec2_V_ce0 <= grp_message_passing_one_node_vec_fu_60_emb_vec_ce0;
            else 
                emb_vec2_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            emb_vec2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    emb_vec2_V_we0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_one_node_embedding_fu_73_emb_vec_we0)
    begin
        if (((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            emb_vec2_V_we0 <= grp_one_node_embedding_fu_73_emb_vec_we0;
        else 
            emb_vec2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_message_passing_one_node_vec_fu_60_ap_start <= grp_message_passing_one_node_vec_fu_60_ap_start_reg;

    grp_message_passing_one_node_vec_fu_60_emb_vec_q0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, emb_vec1_V_q0, emb_vec2_V_q0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_message_passing_one_node_vec_fu_60_emb_vec_q0 <= emb_vec1_V_q0;
        elsif (((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_message_passing_one_node_vec_fu_60_emb_vec_q0 <= emb_vec2_V_q0;
        else 
            grp_message_passing_one_node_vec_fu_60_emb_vec_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_message_passing_one_node_vec_fu_60_nd_offset_assign_proc : process(sub_reg_110, trunc_ln278_reg_115, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_message_passing_one_node_vec_fu_60_nd_offset <= ap_const_lv5_12;
        elsif ((((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_message_passing_one_node_vec_fu_60_nd_offset <= sub_reg_110;
        else 
            grp_message_passing_one_node_vec_fu_60_nd_offset <= "XXXXX";
        end if; 
    end process;

    grp_one_node_embedding_fu_73_ap_start <= grp_one_node_embedding_fu_73_ap_start_reg;

    grp_one_node_embedding_fu_73_nd_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, nd_reg_48, ap_CS_fsm_state2)
    begin
        if ((((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_one_node_embedding_fu_73_nd <= nd_reg_48;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_one_node_embedding_fu_73_nd <= ap_const_lv5_0;
        else 
            grp_one_node_embedding_fu_73_nd <= "XXXXX";
        end if; 
    end process;

    icmp_ln278_fu_84_p2 <= "1" when (nd_reg_48 = ap_const_lv5_13) else "0";
    message1_V_address0 <= grp_message_passing_one_node_vec_fu_60_message_tb_address0;
    message1_V_address1 <= grp_message_passing_one_node_vec_fu_60_message_tb_address1;

    message1_V_ce0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_message_tb_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            message1_V_ce0 <= grp_message_passing_one_node_vec_fu_60_message_tb_ce0;
        else 
            message1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message1_V_ce1_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_message_tb_ce1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            message1_V_ce1 <= grp_message_passing_one_node_vec_fu_60_message_tb_ce1;
        else 
            message1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    message1_V_d1 <= grp_message_passing_one_node_vec_fu_60_message_tb_d1;

    message1_V_we1_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_message_tb_we1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            message1_V_we1 <= grp_message_passing_one_node_vec_fu_60_message_tb_we1;
        else 
            message1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    nd_1_fu_101_p2 <= std_logic_vector(unsigned(nd_reg_48) + unsigned(ap_const_lv5_1));
    neighbor_table_address0 <= grp_message_passing_one_node_vec_fu_60_neighbor_table_address0;

    neighbor_table_ce0_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_message_passing_one_node_vec_fu_60_neighbor_table_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            neighbor_table_ce0 <= grp_message_passing_one_node_vec_fu_60_neighbor_table_ce0;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_address1 <= grp_one_node_embedding_fu_73_node_embedding_V_address1;

    node_embedding_V_ce1_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_one_node_embedding_fu_73_node_embedding_V_ce1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            node_embedding_V_ce1 <= grp_one_node_embedding_fu_73_node_embedding_V_ce1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_d1 <= grp_one_node_embedding_fu_73_node_embedding_V_d1;

    node_embedding_V_we1_assign_proc : process(trunc_ln278_reg_115, ap_CS_fsm_state4, grp_one_node_embedding_fu_73_node_embedding_V_we1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((trunc_ln278_reg_115 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((trunc_ln278_reg_115 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            node_embedding_V_we1 <= grp_one_node_embedding_fu_73_node_embedding_V_we1;
        else 
            node_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_fu_90_p2 <= std_logic_vector(unsigned(nd_reg_48) + unsigned(ap_const_lv5_1F));
    trunc_ln278_fu_97_p1 <= nd_reg_48(1 - 1 downto 0);
end behav;
