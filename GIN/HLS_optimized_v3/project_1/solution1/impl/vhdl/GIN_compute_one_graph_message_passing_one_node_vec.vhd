-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_message_passing_one_node_vec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    emb_vec_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    emb_vec_ce0 : OUT STD_LOGIC;
    emb_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nd_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    message_tb_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message_tb_ce0 : OUT STD_LOGIC;
    message_tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_tb_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    message_tb_ce1 : OUT STD_LOGIC;
    message_tb_we1 : OUT STD_LOGIC;
    message_tb_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    degree_table_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce0 : OUT STD_LOGIC;
    degree_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    degree_table_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    degree_table_ce1 : OUT STD_LOGIC;
    degree_table_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    neighbor_table_ce0 : OUT STD_LOGIC;
    neighbor_table_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of GIN_compute_one_graph_message_passing_one_node_vec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv39_64 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001100100";
    constant ap_const_lv39_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_158 : STD_LOGIC_VECTOR (38 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal dim_reg_180 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln186_fu_229_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln186_reg_395 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound_fu_237_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal bound_reg_400 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln186_2_fu_243_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln186_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_410_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_410_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_410_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln186_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln186_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln186_reg_414_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln186_reg_414_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln186_reg_414_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln186_2_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln192_fu_324_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal message_tb_addr_reg_445 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal sext_ln183_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln184_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln703_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln192_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_195_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln183_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal nd_offset_cast1_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln183_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln184_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln189_fu_249_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln192_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln186_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln189_1_fu_286_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln189_mid1_fu_290_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln5_fu_253_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln186_1_fu_298_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln186_1_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_376_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln204_fu_345_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal msg_V_1_fu_357_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln204_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_237_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_376_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_376_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_32ns_8ns_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_8ns_8ns_7ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_32ns_8ns_39_1_1_U20 : component GIN_compute_one_graph_mul_32ns_8ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 39)
    port map (
        din0 => bound_fu_237_p0,
        din1 => bound_fu_237_p1,
        dout => bound_fu_237_p2);

    mac_muladd_8ns_8ns_7ns_15_4_1_U21 : component GIN_compute_one_graph_mac_muladd_8ns_8ns_7ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_376_p0,
        din1 => grp_fu_376_p1,
        din2 => grp_fu_376_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dim_reg_180 <= add_ln192_fu_324_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                dim_reg_180 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_169 <= select_ln186_2_fu_316_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_169 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_158 <= add_ln186_2_fu_243_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_158 <= ap_const_lv39_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_400 <= bound_fu_237_p2;
                trunc_ln186_reg_395 <= trunc_ln186_fu_229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln186_reg_410 <= icmp_ln186_fu_261_p2;
                icmp_ln186_reg_410_pp0_iter1_reg <= icmp_ln186_reg_410;
                select_ln186_reg_414_pp0_iter1_reg <= select_ln186_reg_414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln186_reg_410_pp0_iter2_reg <= icmp_ln186_reg_410_pp0_iter1_reg;
                icmp_ln186_reg_410_pp0_iter3_reg <= icmp_ln186_reg_410_pp0_iter2_reg;
                icmp_ln186_reg_410_pp0_iter4_reg <= icmp_ln186_reg_410_pp0_iter3_reg;
                select_ln186_reg_414_pp0_iter2_reg <= select_ln186_reg_414_pp0_iter1_reg;
                select_ln186_reg_414_pp0_iter3_reg <= select_ln186_reg_414_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln186_reg_410_pp0_iter3_reg = ap_const_lv1_0))) then
                message_tb_addr_reg_445 <= zext_ln703_2_fu_341_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln186_reg_414 <= select_ln186_fu_278_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln186_fu_261_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln186_fu_261_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln186_fu_261_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln184_fu_218_p2 <= std_logic_vector(signed(sub_ln183_fu_207_p2) + signed(ap_const_lv8_1));
    add_ln186_1_fu_306_p2 <= std_logic_vector(unsigned(select_ln186_1_fu_298_p3) + unsigned(trunc_ln186_reg_395));
    add_ln186_2_fu_243_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_158) + unsigned(ap_const_lv39_1));
    add_ln186_fu_266_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv32_1));
    add_ln192_fu_324_p2 <= std_logic_vector(unsigned(select_ln186_fu_278_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln186_fu_261_p2)
    begin
        if ((icmp_ln186_fu_261_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_237_p0 <= bound_fu_237_p00(32 - 1 downto 0);
    bound_fu_237_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(degree_table_q1),39));
    bound_fu_237_p1 <= ap_const_lv39_64(8 - 1 downto 0);
    degree_table_address0 <= sext_ln184_fu_224_p1(10 - 1 downto 0);
    degree_table_address1 <= sext_ln183_fu_213_p1(10 - 1 downto 0);

    degree_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            degree_table_ce0 <= ap_const_logic_1;
        else 
            degree_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    degree_table_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            degree_table_ce1 <= ap_const_logic_1;
        else 
            degree_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    emb_vec_address0 <= zext_ln192_fu_337_p1(7 - 1 downto 0);

    emb_vec_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            emb_vec_ce0 <= ap_const_logic_1;
        else 
            emb_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_376_p0 <= grp_fu_376_p00(8 - 1 downto 0);
    grp_fu_376_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neighbor_table_q0),15));
    grp_fu_376_p1 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_376_p2 <= grp_fu_376_p20(7 - 1 downto 0);
    grp_fu_376_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln186_reg_414_pp0_iter2_reg),15));
    icmp_ln186_fu_261_p2 <= "1" when (indvar_flatten_reg_158 = bound_reg_400) else "0";
    icmp_ln192_fu_272_p2 <= "1" when (dim_reg_180 = ap_const_lv7_64) else "0";
    message_tb_address0 <= zext_ln703_2_fu_341_p1(15 - 1 downto 0);
    message_tb_address1 <= message_tb_addr_reg_445;

    message_tb_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            message_tb_ce0 <= ap_const_logic_1;
        else 
            message_tb_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_tb_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            message_tb_ce1 <= ap_const_logic_1;
        else 
            message_tb_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    message_tb_d1 <= std_logic_vector(unsigned(message_tb_q0) + unsigned(zext_ln204_fu_365_p1));

    message_tb_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln186_reg_410_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln186_reg_410_pp0_iter4_reg = ap_const_lv1_0))) then 
            message_tb_we1 <= ap_const_logic_1;
        else 
            message_tb_we1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_1_fu_357_p3 <= 
        ap_const_lv31_0 when (tmp_fu_349_p3(0) = '1') else 
        trunc_ln204_fu_345_p1;
    nd_offset_cast1_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nd_offset),8));
    neighbor_table_address0 <= zext_ln186_fu_311_p1(13 - 1 downto 0);

    neighbor_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            neighbor_table_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln186_1_fu_298_p3 <= 
        shl_ln189_mid1_fu_290_p3 when (icmp_ln192_fu_272_p2(0) = '1') else 
        shl_ln5_fu_253_p3;
    select_ln186_2_fu_316_p3 <= 
        add_ln186_fu_266_p2 when (icmp_ln192_fu_272_p2(0) = '1') else 
        i_reg_169;
    select_ln186_fu_278_p3 <= 
        ap_const_lv7_0 when (icmp_ln192_fu_272_p2(0) = '1') else 
        dim_reg_180;
        sext_ln183_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln183_fu_207_p2),64));

        sext_ln184_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln184_fu_218_p2),64));

    shl_ln189_mid1_fu_290_p3 <= (trunc_ln189_1_fu_286_p1 & ap_const_lv1_0);
    shl_ln5_fu_253_p3 <= (trunc_ln189_fu_249_p1 & ap_const_lv1_0);
    shl_ln_fu_195_p3 <= (nd_offset & ap_const_lv2_0);
    sub_ln183_fu_207_p2 <= std_logic_vector(unsigned(zext_ln183_fu_203_p1) - unsigned(nd_offset_cast1_fu_191_p1));
    tmp_fu_349_p3 <= emb_vec_q0(31 downto 31);
    trunc_ln186_fu_229_p1 <= degree_table_q0(13 - 1 downto 0);
    trunc_ln189_1_fu_286_p1 <= add_ln186_fu_266_p2(12 - 1 downto 0);
    trunc_ln189_fu_249_p1 <= i_reg_169(12 - 1 downto 0);
    trunc_ln204_fu_345_p1 <= emb_vec_q0(31 - 1 downto 0);
    zext_ln183_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_195_p3),8));
    zext_ln186_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln186_1_fu_306_p2),64));
    zext_ln192_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln186_reg_414_pp0_iter3_reg),64));
    zext_ln204_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msg_V_1_fu_357_p3),32));
    zext_ln703_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_376_p3),64));
end behav;
