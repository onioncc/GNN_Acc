// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_message_passing_one_node_vec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        emb_vec_address0,
        emb_vec_ce0,
        emb_vec_q0,
        nd_offset,
        message_tb_address0,
        message_tb_ce0,
        message_tb_q0,
        message_tb_address1,
        message_tb_ce1,
        message_tb_we1,
        message_tb_d1,
        degree_table_address0,
        degree_table_ce0,
        degree_table_q0,
        degree_table_address1,
        degree_table_ce1,
        degree_table_q1,
        neighbor_table_address0,
        neighbor_table_ce0,
        neighbor_table_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] emb_vec_address0;
output   emb_vec_ce0;
input  [31:0] emb_vec_q0;
input  [4:0] nd_offset;
output  [14:0] message_tb_address0;
output   message_tb_ce0;
input  [31:0] message_tb_q0;
output  [14:0] message_tb_address1;
output   message_tb_ce1;
output   message_tb_we1;
output  [31:0] message_tb_d1;
output  [9:0] degree_table_address0;
output   degree_table_ce0;
input  [31:0] degree_table_q0;
output  [9:0] degree_table_address1;
output   degree_table_ce1;
input  [31:0] degree_table_q1;
output  [12:0] neighbor_table_address0;
output   neighbor_table_ce0;
input  [7:0] neighbor_table_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg emb_vec_ce0;
reg message_tb_ce0;
reg message_tb_ce1;
reg message_tb_we1;
reg degree_table_ce0;
reg degree_table_ce1;
reg neighbor_table_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [38:0] indvar_flatten_reg_158;
reg   [31:0] i_reg_169;
reg   [6:0] dim_reg_180;
wire   [12:0] trunc_ln186_fu_229_p1;
reg   [12:0] trunc_ln186_reg_395;
wire    ap_CS_fsm_state2;
wire   [38:0] bound_fu_237_p2;
reg   [38:0] bound_reg_400;
wire   [38:0] add_ln186_2_fu_243_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln186_fu_261_p2;
reg   [0:0] icmp_ln186_reg_410;
reg   [0:0] icmp_ln186_reg_410_pp0_iter1_reg;
reg   [0:0] icmp_ln186_reg_410_pp0_iter2_reg;
reg   [0:0] icmp_ln186_reg_410_pp0_iter3_reg;
reg   [0:0] icmp_ln186_reg_410_pp0_iter4_reg;
wire   [6:0] select_ln186_fu_278_p3;
reg   [6:0] select_ln186_reg_414;
reg   [6:0] select_ln186_reg_414_pp0_iter1_reg;
reg   [6:0] select_ln186_reg_414_pp0_iter2_reg;
reg   [6:0] select_ln186_reg_414_pp0_iter3_reg;
wire   [31:0] select_ln186_2_fu_316_p3;
wire   [6:0] add_ln192_fu_324_p2;
reg   [14:0] message_tb_addr_reg_445;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire  signed [63:0] sext_ln183_fu_213_p1;
wire  signed [63:0] sext_ln184_fu_224_p1;
wire   [63:0] zext_ln186_fu_311_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln703_2_fu_341_p1;
wire   [63:0] zext_ln192_fu_337_p1;
wire   [6:0] shl_ln_fu_195_p3;
wire   [7:0] zext_ln183_fu_203_p1;
wire   [7:0] nd_offset_cast1_fu_191_p1;
wire  signed [7:0] sub_ln183_fu_207_p2;
wire   [7:0] add_ln184_fu_218_p2;
wire   [31:0] bound_fu_237_p0;
wire   [7:0] bound_fu_237_p1;
wire   [11:0] trunc_ln189_fu_249_p1;
wire   [0:0] icmp_ln192_fu_272_p2;
wire   [31:0] add_ln186_fu_266_p2;
wire   [11:0] trunc_ln189_1_fu_286_p1;
wire   [12:0] shl_ln189_mid1_fu_290_p3;
wire   [12:0] shl_ln5_fu_253_p3;
wire   [12:0] select_ln186_1_fu_298_p3;
wire   [12:0] add_ln186_1_fu_306_p2;
wire   [14:0] grp_fu_376_p3;
wire   [0:0] tmp_fu_349_p3;
wire   [30:0] trunc_ln204_fu_345_p1;
wire   [30:0] msg_V_1_fu_357_p3;
wire   [31:0] zext_ln204_fu_365_p1;
wire   [7:0] grp_fu_376_p0;
wire   [7:0] grp_fu_376_p1;
wire   [6:0] grp_fu_376_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [38:0] bound_fu_237_p00;
wire   [14:0] grp_fu_376_p00;
wire   [14:0] grp_fu_376_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

GIN_compute_one_graph_mul_32ns_8ns_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 39 ))
mul_32ns_8ns_39_1_1_U20(
    .din0(bound_fu_237_p0),
    .din1(bound_fu_237_p1),
    .dout(bound_fu_237_p2)
);

GIN_compute_one_graph_mac_muladd_8ns_8ns_7ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_8ns_7ns_15_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_376_p0),
    .din1(grp_fu_376_p1),
    .din2(grp_fu_376_p2),
    .ce(1'b1),
    .dout(grp_fu_376_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dim_reg_180 <= add_ln192_fu_324_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dim_reg_180 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_169 <= select_ln186_2_fu_316_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_169 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_158 <= add_ln186_2_fu_243_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_158 <= 39'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_400 <= bound_fu_237_p2;
        trunc_ln186_reg_395 <= trunc_ln186_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln186_reg_410 <= icmp_ln186_fu_261_p2;
        icmp_ln186_reg_410_pp0_iter1_reg <= icmp_ln186_reg_410;
        select_ln186_reg_414_pp0_iter1_reg <= select_ln186_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln186_reg_410_pp0_iter2_reg <= icmp_ln186_reg_410_pp0_iter1_reg;
        icmp_ln186_reg_410_pp0_iter3_reg <= icmp_ln186_reg_410_pp0_iter2_reg;
        icmp_ln186_reg_410_pp0_iter4_reg <= icmp_ln186_reg_410_pp0_iter3_reg;
        select_ln186_reg_414_pp0_iter2_reg <= select_ln186_reg_414_pp0_iter1_reg;
        select_ln186_reg_414_pp0_iter3_reg <= select_ln186_reg_414_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln186_reg_410_pp0_iter3_reg == 1'd0))) begin
        message_tb_addr_reg_445 <= zext_ln703_2_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_261_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln186_reg_414 <= select_ln186_fu_278_p3;
    end
end

always @ (*) begin
    if ((icmp_ln186_fu_261_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        degree_table_ce0 = 1'b1;
    end else begin
        degree_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        degree_table_ce1 = 1'b1;
    end else begin
        degree_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        emb_vec_ce0 = 1'b1;
    end else begin
        emb_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        message_tb_ce0 = 1'b1;
    end else begin
        message_tb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        message_tb_ce1 = 1'b1;
    end else begin
        message_tb_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln186_reg_410_pp0_iter4_reg == 1'd0))) begin
        message_tb_we1 = 1'b1;
    end else begin
        message_tb_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        neighbor_table_ce0 = 1'b1;
    end else begin
        neighbor_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln186_fu_261_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln186_fu_261_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln184_fu_218_p2 = ($signed(sub_ln183_fu_207_p2) + $signed(8'd1));

assign add_ln186_1_fu_306_p2 = (select_ln186_1_fu_298_p3 + trunc_ln186_reg_395);

assign add_ln186_2_fu_243_p2 = (indvar_flatten_reg_158 + 39'd1);

assign add_ln186_fu_266_p2 = (i_reg_169 + 32'd1);

assign add_ln192_fu_324_p2 = (select_ln186_fu_278_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_237_p0 = bound_fu_237_p00;

assign bound_fu_237_p00 = degree_table_q1;

assign bound_fu_237_p1 = 39'd100;

assign degree_table_address0 = sext_ln184_fu_224_p1;

assign degree_table_address1 = sext_ln183_fu_213_p1;

assign emb_vec_address0 = zext_ln192_fu_337_p1;

assign grp_fu_376_p0 = grp_fu_376_p00;

assign grp_fu_376_p00 = neighbor_table_q0;

assign grp_fu_376_p1 = 15'd100;

assign grp_fu_376_p2 = grp_fu_376_p20;

assign grp_fu_376_p20 = select_ln186_reg_414_pp0_iter2_reg;

assign icmp_ln186_fu_261_p2 = ((indvar_flatten_reg_158 == bound_reg_400) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_272_p2 = ((dim_reg_180 == 7'd100) ? 1'b1 : 1'b0);

assign message_tb_address0 = zext_ln703_2_fu_341_p1;

assign message_tb_address1 = message_tb_addr_reg_445;

assign message_tb_d1 = (message_tb_q0 + zext_ln204_fu_365_p1);

assign msg_V_1_fu_357_p3 = ((tmp_fu_349_p3[0:0] == 1'b1) ? 31'd0 : trunc_ln204_fu_345_p1);

assign nd_offset_cast1_fu_191_p1 = nd_offset;

assign neighbor_table_address0 = zext_ln186_fu_311_p1;

assign select_ln186_1_fu_298_p3 = ((icmp_ln192_fu_272_p2[0:0] == 1'b1) ? shl_ln189_mid1_fu_290_p3 : shl_ln5_fu_253_p3);

assign select_ln186_2_fu_316_p3 = ((icmp_ln192_fu_272_p2[0:0] == 1'b1) ? add_ln186_fu_266_p2 : i_reg_169);

assign select_ln186_fu_278_p3 = ((icmp_ln192_fu_272_p2[0:0] == 1'b1) ? 7'd0 : dim_reg_180);

assign sext_ln183_fu_213_p1 = sub_ln183_fu_207_p2;

assign sext_ln184_fu_224_p1 = $signed(add_ln184_fu_218_p2);

assign shl_ln189_mid1_fu_290_p3 = {{trunc_ln189_1_fu_286_p1}, {1'd0}};

assign shl_ln5_fu_253_p3 = {{trunc_ln189_fu_249_p1}, {1'd0}};

assign shl_ln_fu_195_p3 = {{nd_offset}, {2'd0}};

assign sub_ln183_fu_207_p2 = (zext_ln183_fu_203_p1 - nd_offset_cast1_fu_191_p1);

assign tmp_fu_349_p3 = emb_vec_q0[32'd31];

assign trunc_ln186_fu_229_p1 = degree_table_q0[12:0];

assign trunc_ln189_1_fu_286_p1 = add_ln186_fu_266_p2[11:0];

assign trunc_ln189_fu_249_p1 = i_reg_169[11:0];

assign trunc_ln204_fu_345_p1 = emb_vec_q0[30:0];

assign zext_ln183_fu_203_p1 = shl_ln_fu_195_p3;

assign zext_ln186_fu_311_p1 = add_ln186_1_fu_306_p2;

assign zext_ln192_fu_337_p1 = select_ln186_reg_414_pp0_iter3_reg;

assign zext_ln204_fu_365_p1 = msg_V_1_fu_357_p3;

assign zext_ln703_2_fu_341_p1 = grp_fu_376_p3;

endmodule //GIN_compute_one_graph_message_passing_one_node_vec
