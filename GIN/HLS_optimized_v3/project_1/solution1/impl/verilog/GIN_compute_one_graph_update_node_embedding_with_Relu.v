// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_update_node_embedding_with_Relu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        p_read32,
        p_read33,
        p_read34,
        p_read35,
        p_read36,
        p_read37,
        p_read38,
        p_read39,
        p_read40,
        p_read41,
        p_read42,
        p_read43,
        p_read44,
        p_read45,
        p_read46,
        p_read47,
        p_read48,
        p_read49,
        p_read50,
        p_read51,
        p_read52,
        p_read53,
        p_read54,
        p_read55,
        p_read56,
        p_read57,
        p_read58,
        p_read59,
        p_read60,
        p_read61,
        p_read62,
        p_read63,
        p_read64,
        p_read65,
        p_read66,
        p_read67,
        p_read68,
        p_read69,
        p_read70,
        p_read71,
        p_read72,
        p_read73,
        p_read74,
        p_read75,
        p_read76,
        p_read77,
        p_read78,
        p_read79,
        p_read80,
        p_read81,
        p_read82,
        p_read83,
        p_read84,
        p_read85,
        p_read86,
        p_read87,
        p_read88,
        p_read89,
        p_read90,
        p_read91,
        p_read92,
        p_read93,
        p_read94,
        p_read95,
        p_read96,
        p_read97,
        p_read98,
        p_read99,
        emb_vec_address0,
        emb_vec_ce0,
        emb_vec_we0,
        emb_vec_d0,
        nd,
        layer,
        node_embedding_V_address1,
        node_embedding_V_ce1,
        node_embedding_V_we1,
        node_embedding_V_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
input  [31:0] p_read19;
input  [31:0] p_read20;
input  [31:0] p_read21;
input  [31:0] p_read22;
input  [31:0] p_read23;
input  [31:0] p_read24;
input  [31:0] p_read25;
input  [31:0] p_read26;
input  [31:0] p_read27;
input  [31:0] p_read28;
input  [31:0] p_read29;
input  [31:0] p_read30;
input  [31:0] p_read31;
input  [31:0] p_read32;
input  [31:0] p_read33;
input  [31:0] p_read34;
input  [31:0] p_read35;
input  [31:0] p_read36;
input  [31:0] p_read37;
input  [31:0] p_read38;
input  [31:0] p_read39;
input  [31:0] p_read40;
input  [31:0] p_read41;
input  [31:0] p_read42;
input  [31:0] p_read43;
input  [31:0] p_read44;
input  [31:0] p_read45;
input  [31:0] p_read46;
input  [31:0] p_read47;
input  [31:0] p_read48;
input  [31:0] p_read49;
input  [31:0] p_read50;
input  [31:0] p_read51;
input  [31:0] p_read52;
input  [31:0] p_read53;
input  [31:0] p_read54;
input  [31:0] p_read55;
input  [31:0] p_read56;
input  [31:0] p_read57;
input  [31:0] p_read58;
input  [31:0] p_read59;
input  [31:0] p_read60;
input  [31:0] p_read61;
input  [31:0] p_read62;
input  [31:0] p_read63;
input  [31:0] p_read64;
input  [31:0] p_read65;
input  [31:0] p_read66;
input  [31:0] p_read67;
input  [31:0] p_read68;
input  [31:0] p_read69;
input  [31:0] p_read70;
input  [31:0] p_read71;
input  [31:0] p_read72;
input  [31:0] p_read73;
input  [31:0] p_read74;
input  [31:0] p_read75;
input  [31:0] p_read76;
input  [31:0] p_read77;
input  [31:0] p_read78;
input  [31:0] p_read79;
input  [31:0] p_read80;
input  [31:0] p_read81;
input  [31:0] p_read82;
input  [31:0] p_read83;
input  [31:0] p_read84;
input  [31:0] p_read85;
input  [31:0] p_read86;
input  [31:0] p_read87;
input  [31:0] p_read88;
input  [31:0] p_read89;
input  [31:0] p_read90;
input  [31:0] p_read91;
input  [31:0] p_read92;
input  [31:0] p_read93;
input  [31:0] p_read94;
input  [31:0] p_read95;
input  [31:0] p_read96;
input  [31:0] p_read97;
input  [31:0] p_read98;
input  [31:0] p_read99;
output  [6:0] emb_vec_address0;
output   emb_vec_ce0;
output   emb_vec_we0;
output  [31:0] emb_vec_d0;
input  [4:0] nd;
input  [2:0] layer;
output  [14:0] node_embedding_V_address1;
output   node_embedding_V_ce1;
output   node_embedding_V_we1;
output  [31:0] node_embedding_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg emb_vec_ce0;
reg emb_vec_we0;
reg node_embedding_V_ce1;
reg node_embedding_V_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] empty_fu_917_p2;
reg   [11:0] empty_reg_1595;
wire   [0:0] cmp1_not_fu_923_p2;
reg   [0:0] cmp1_not_reg_1600;
wire   [6:0] add_ln101_fu_929_p2;
wire    ap_CS_fsm_state2;
reg   [6:0] dim_reg_902;
wire   [0:0] icmp_ln101_fu_935_p2;
wire   [63:0] p_cast_fu_955_p1;
wire   [63:0] trunc_ln1495_cast_fu_941_p1;
wire   [31:0] select_ln102_fu_1085_p3;
wire   [4:0] empty_fu_917_p0;
wire   [7:0] empty_fu_917_p1;
wire   [11:0] dim_cast_fu_946_p1;
wire   [11:0] empty_49_fu_950_p2;
wire   [31:0] tmp_fu_960_p102;
wire   [0:0] tmp_1_fu_1066_p3;
wire   [0:0] xor_ln102_fu_1074_p2;
wire   [0:0] or_ln102_fu_1080_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
wire   [11:0] empty_fu_917_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

GIN_compute_one_graph_mul_5ns_8ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
mul_5ns_8ns_12_1_1_U238(
    .din0(empty_fu_917_p0),
    .din1(empty_fu_917_p1),
    .dout(empty_fu_917_p2)
);

GIN_compute_one_graph_mux_1007_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 32 ),
    .din65_WIDTH( 32 ),
    .din66_WIDTH( 32 ),
    .din67_WIDTH( 32 ),
    .din68_WIDTH( 32 ),
    .din69_WIDTH( 32 ),
    .din70_WIDTH( 32 ),
    .din71_WIDTH( 32 ),
    .din72_WIDTH( 32 ),
    .din73_WIDTH( 32 ),
    .din74_WIDTH( 32 ),
    .din75_WIDTH( 32 ),
    .din76_WIDTH( 32 ),
    .din77_WIDTH( 32 ),
    .din78_WIDTH( 32 ),
    .din79_WIDTH( 32 ),
    .din80_WIDTH( 32 ),
    .din81_WIDTH( 32 ),
    .din82_WIDTH( 32 ),
    .din83_WIDTH( 32 ),
    .din84_WIDTH( 32 ),
    .din85_WIDTH( 32 ),
    .din86_WIDTH( 32 ),
    .din87_WIDTH( 32 ),
    .din88_WIDTH( 32 ),
    .din89_WIDTH( 32 ),
    .din90_WIDTH( 32 ),
    .din91_WIDTH( 32 ),
    .din92_WIDTH( 32 ),
    .din93_WIDTH( 32 ),
    .din94_WIDTH( 32 ),
    .din95_WIDTH( 32 ),
    .din96_WIDTH( 32 ),
    .din97_WIDTH( 32 ),
    .din98_WIDTH( 32 ),
    .din99_WIDTH( 32 ),
    .din100_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_1007_32_1_1_U239(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(p_read8),
    .din9(p_read9),
    .din10(p_read10),
    .din11(p_read11),
    .din12(p_read12),
    .din13(p_read13),
    .din14(p_read14),
    .din15(p_read15),
    .din16(p_read16),
    .din17(p_read17),
    .din18(p_read18),
    .din19(p_read19),
    .din20(p_read20),
    .din21(p_read21),
    .din22(p_read22),
    .din23(p_read23),
    .din24(p_read24),
    .din25(p_read25),
    .din26(p_read26),
    .din27(p_read27),
    .din28(p_read28),
    .din29(p_read29),
    .din30(p_read30),
    .din31(p_read31),
    .din32(p_read32),
    .din33(p_read33),
    .din34(p_read34),
    .din35(p_read35),
    .din36(p_read36),
    .din37(p_read37),
    .din38(p_read38),
    .din39(p_read39),
    .din40(p_read40),
    .din41(p_read41),
    .din42(p_read42),
    .din43(p_read43),
    .din44(p_read44),
    .din45(p_read45),
    .din46(p_read46),
    .din47(p_read47),
    .din48(p_read48),
    .din49(p_read49),
    .din50(p_read50),
    .din51(p_read51),
    .din52(p_read52),
    .din53(p_read53),
    .din54(p_read54),
    .din55(p_read55),
    .din56(p_read56),
    .din57(p_read57),
    .din58(p_read58),
    .din59(p_read59),
    .din60(p_read60),
    .din61(p_read61),
    .din62(p_read62),
    .din63(p_read63),
    .din64(p_read64),
    .din65(p_read65),
    .din66(p_read66),
    .din67(p_read67),
    .din68(p_read68),
    .din69(p_read69),
    .din70(p_read70),
    .din71(p_read71),
    .din72(p_read72),
    .din73(p_read73),
    .din74(p_read74),
    .din75(p_read75),
    .din76(p_read76),
    .din77(p_read77),
    .din78(p_read78),
    .din79(p_read79),
    .din80(p_read80),
    .din81(p_read81),
    .din82(p_read82),
    .din83(p_read83),
    .din84(p_read84),
    .din85(p_read85),
    .din86(p_read86),
    .din87(p_read87),
    .din88(p_read88),
    .din89(p_read89),
    .din90(p_read90),
    .din91(p_read91),
    .din92(p_read92),
    .din93(p_read93),
    .din94(p_read94),
    .din95(p_read95),
    .din96(p_read96),
    .din97(p_read97),
    .din98(p_read98),
    .din99(p_read99),
    .din100(dim_reg_902),
    .dout(tmp_fu_960_p102)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dim_reg_902 <= add_ln101_fu_929_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_reg_902 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp1_not_reg_1600 <= cmp1_not_fu_923_p2;
        empty_reg_1595 <= empty_fu_917_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        emb_vec_ce0 = 1'b1;
    end else begin
        emb_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        emb_vec_we0 = 1'b1;
    end else begin
        emb_vec_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        node_embedding_V_ce1 = 1'b1;
    end else begin
        node_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        node_embedding_V_we1 = 1'b1;
    end else begin
        node_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln101_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_fu_929_p2 = (dim_reg_902 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign cmp1_not_fu_923_p2 = ((layer == 3'd4) ? 1'b1 : 1'b0);

assign dim_cast_fu_946_p1 = dim_reg_902;

assign emb_vec_address0 = trunc_ln1495_cast_fu_941_p1;

assign emb_vec_d0 = select_ln102_fu_1085_p3;

assign empty_49_fu_950_p2 = (empty_reg_1595 + dim_cast_fu_946_p1);

assign empty_fu_917_p0 = empty_fu_917_p00;

assign empty_fu_917_p00 = nd;

assign empty_fu_917_p1 = 12'd100;

assign icmp_ln101_fu_935_p2 = ((dim_reg_902 == 7'd100) ? 1'b1 : 1'b0);

assign node_embedding_V_address1 = p_cast_fu_955_p1;

assign node_embedding_V_d1 = select_ln102_fu_1085_p3;

assign or_ln102_fu_1080_p2 = (xor_ln102_fu_1074_p2 | cmp1_not_reg_1600);

assign p_cast_fu_955_p1 = empty_49_fu_950_p2;

assign select_ln102_fu_1085_p3 = ((or_ln102_fu_1080_p2[0:0] == 1'b1) ? tmp_fu_960_p102 : 32'd0);

assign tmp_1_fu_1066_p3 = tmp_fu_960_p102[32'd31];

assign trunc_ln1495_cast_fu_941_p1 = dim_reg_902;

assign xor_ln102_fu_1074_p2 = (tmp_1_fu_1066_p3 ^ 1'd1);

endmodule //GIN_compute_one_graph_update_node_embedding_with_Relu
