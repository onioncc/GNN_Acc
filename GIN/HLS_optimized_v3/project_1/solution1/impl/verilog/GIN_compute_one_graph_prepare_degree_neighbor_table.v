// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_prepare_degree_neighbor_table (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        degree_table_address0,
        degree_table_ce0,
        degree_table_we0,
        degree_table_d0,
        degree_table_q0,
        degree_table_address1,
        degree_table_ce1,
        degree_table_we1,
        degree_table_d1,
        degree_table_q1,
        edge_list_address0,
        edge_list_ce0,
        edge_list_q0,
        edge_list_address1,
        edge_list_ce1,
        edge_list_q1,
        neighbor_table_address0,
        neighbor_table_ce0,
        neighbor_table_we0,
        neighbor_table_d0,
        neighbor_table_address1,
        neighbor_table_ce1,
        neighbor_table_we1,
        neighbor_table_d1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_pp1_stage0 = 11'd8;
parameter    ap_ST_fsm_state7 = 11'd16;
parameter    ap_ST_fsm_state8 = 11'd32;
parameter    ap_ST_fsm_state9 = 11'd64;
parameter    ap_ST_fsm_state10 = 11'd128;
parameter    ap_ST_fsm_pp3_stage0 = 11'd256;
parameter    ap_ST_fsm_pp3_stage1 = 11'd512;
parameter    ap_ST_fsm_state14 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] degree_table_address0;
output   degree_table_ce0;
output   degree_table_we0;
output  [31:0] degree_table_d0;
input  [31:0] degree_table_q0;
output  [9:0] degree_table_address1;
output   degree_table_ce1;
output   degree_table_we1;
output  [31:0] degree_table_d1;
input  [31:0] degree_table_q1;
output  [9:0] edge_list_address0;
output   edge_list_ce0;
input  [31:0] edge_list_q0;
output  [9:0] edge_list_address1;
output   edge_list_ce1;
input  [31:0] edge_list_q1;
output  [12:0] neighbor_table_address0;
output   neighbor_table_ce0;
output   neighbor_table_we0;
output  [7:0] neighbor_table_d0;
output  [12:0] neighbor_table_address1;
output   neighbor_table_ce1;
output   neighbor_table_we1;
output  [7:0] neighbor_table_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] degree_table_address0;
reg degree_table_ce0;
reg degree_table_we0;
reg[31:0] degree_table_d0;
reg[9:0] degree_table_address1;
reg degree_table_ce1;
reg degree_table_we1;
reg[9:0] edge_list_address0;
reg edge_list_ce0;
reg edge_list_ce1;
reg neighbor_table_ce0;
reg neighbor_table_we0;
reg neighbor_table_ce1;
reg neighbor_table_we1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] e_reg_241;
reg   [5:0] e_1_reg_264;
wire   [5:0] add_ln498_fu_276_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln502_fu_303_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln502_fu_309_p2;
reg   [0:0] icmp_ln502_reg_750;
reg   [0:0] icmp_ln502_reg_750_pp1_iter1_reg;
reg   [9:0] degree_table_addr_1_reg_759;
wire   [0:0] addr_cmp_fu_358_p2;
reg   [0:0] addr_cmp_reg_765;
wire   [7:0] sub_ln510_fu_423_p2;
reg   [7:0] sub_ln510_reg_773;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln509_fu_401_p2;
wire   [0:0] addr_cmp7_fu_454_p2;
reg   [0:0] addr_cmp7_reg_788;
wire   [4:0] add_ln509_fu_460_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln513_fu_519_p2;
reg   [0:0] icmp_ln513_reg_798;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state11_pp3_stage0_iter0;
wire    ap_block_state13_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [5:0] add_ln513_fu_549_p2;
reg   [5:0] add_ln513_reg_812;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state12_pp3_stage1_iter0;
wire    ap_block_pp3_stage1_11001;
wire   [7:0] trunc_ln515_fu_559_p1;
reg   [7:0] trunc_ln515_reg_817;
wire   [0:0] addr_cmp13_fu_595_p2;
reg   [0:0] addr_cmp13_reg_827;
reg   [9:0] degree_table_addr_6_reg_832;
wire   [0:0] addr_cmp17_fu_615_p2;
reg   [0:0] addr_cmp17_reg_838;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state10;
wire    ap_block_pp3_stage1_subdone;
reg    ap_condition_pp3_exit_iter0_state12;
reg    ap_enable_reg_pp3_iter1;
reg   [5:0] n_reg_230;
wire   [0:0] icmp_ln498_fu_282_p2;
reg   [4:0] n_1_reg_252;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_phi_mux_e_1_phi_fu_268_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] n_cast_fu_288_p1;
wire   [63:0] zext_ln503_fu_323_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln506_fu_350_p1;
wire  signed [63:0] sext_ln510_fu_435_p1;
wire  signed [63:0] sext_ln510_1_fu_446_p1;
wire  signed [63:0] sext_ln510_2_fu_494_p1;
wire   [63:0] zext_ln514_fu_533_p1;
wire   [63:0] zext_ln515_fu_544_p1;
wire   [63:0] zext_ln518_fu_587_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] zext_ln519_fu_607_p1;
wire   [63:0] zext_ln521_fu_660_p1;
wire   [63:0] zext_ln522_fu_671_p1;
reg   [63:0] reuse_addr_reg10_fu_82;
reg   [31:0] reuse_reg9_fu_86;
wire   [31:0] add_ln523_fu_681_p2;
reg   [63:0] reuse_addr_reg4_fu_90;
reg   [31:0] reuse_reg3_fu_94;
wire   [31:0] add_ln510_2_fu_482_p2;
reg   [63:0] reuse_addr_reg_fu_98;
reg   [31:0] reuse_reg_fu_102;
wire   [31:0] add_ln506_fu_379_p2;
wire   [6:0] shl_ln_fu_315_p3;
wire   [7:0] trunc_ln506_fu_332_p1;
wire   [9:0] shl_ln1_fu_336_p3;
wire   [9:0] trunc_ln503_fu_328_p1;
wire   [9:0] sub_ln506_fu_344_p2;
wire   [31:0] reuse_select_fu_372_p3;
wire   [6:0] shl_ln2_fu_411_p3;
wire   [7:0] zext_ln510_fu_419_p1;
wire   [7:0] n_1_cast1_fu_407_p1;
wire   [7:0] add_ln510_fu_429_p2;
wire   [7:0] add_ln510_1_fu_440_p2;
wire   [31:0] reuse_select8_fu_475_p3;
wire   [31:0] shl_ln510_fu_466_p2;
wire   [7:0] add_ln510_3_fu_489_p2;
wire   [6:0] shl_ln3_fu_525_p3;
wire   [6:0] or_ln515_fu_538_p2;
wire   [7:0] trunc_ln518_fu_563_p1;
wire   [9:0] shl_ln4_fu_567_p3;
wire   [9:0] trunc_ln514_fu_555_p1;
wire   [9:0] sub_ln518_fu_575_p2;
wire   [9:0] add_ln518_fu_581_p2;
wire   [9:0] add_ln519_fu_601_p2;
wire   [31:0] start_idx_fu_629_p3;
wire   [31:0] offset_idx_fu_643_p3;
wire   [12:0] trunc_ln519_fu_650_p1;
wire   [12:0] trunc_ln518_1_fu_636_p1;
wire   [12:0] add_ln521_fu_654_p2;
wire   [12:0] add_ln522_fu_665_p2;
wire    ap_CS_fsm_state14;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state12);
        end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (1'b1 == ap_CS_fsm_pp3_stage1))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        e_1_reg_264 <= 6'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0))) begin
        e_1_reg_264 <= add_ln513_reg_812;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_reg_241 <= 6'd0;
    end else if (((icmp_ln502_fu_309_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        e_reg_241 <= add_ln502_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_1_reg_252 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        n_1_reg_252 <= add_ln509_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_reg_230 <= 6'd0;
    end else if (((icmp_ln498_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_reg_230 <= add_ln498_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        reuse_addr_reg10_fu_82 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln513_reg_798 == 1'd0))) begin
        reuse_addr_reg10_fu_82 <= zext_ln519_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_addr_reg4_fu_90 <= 64'd18446744073709551615;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reuse_addr_reg4_fu_90 <= sext_ln510_2_fu_494_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        reuse_addr_reg_fu_98 <= 64'd18446744073709551615;
    end else if (((icmp_ln502_reg_750 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        reuse_addr_reg_fu_98 <= zext_ln506_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reuse_reg3_fu_94 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reuse_reg3_fu_94 <= add_ln510_2_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        reuse_reg9_fu_86 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0))) begin
        reuse_reg9_fu_86 <= add_ln523_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        reuse_reg_fu_102 <= 32'd0;
    end else if (((icmp_ln502_reg_750_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        reuse_reg_fu_102 <= add_ln506_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        add_ln513_reg_812 <= add_ln513_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (icmp_ln513_reg_798 == 1'd0))) begin
        addr_cmp13_reg_827 <= addr_cmp13_fu_595_p2;
        addr_cmp17_reg_838 <= addr_cmp17_fu_615_p2;
        degree_table_addr_6_reg_832 <= zext_ln519_fu_607_p1;
        trunc_ln515_reg_817 <= trunc_ln515_fu_559_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln509_fu_401_p2 == 1'd0))) begin
        addr_cmp7_reg_788 <= addr_cmp7_fu_454_p2;
        sub_ln510_reg_773 <= sub_ln510_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln502_reg_750 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        addr_cmp_reg_765 <= addr_cmp_fu_358_p2;
        degree_table_addr_1_reg_759 <= zext_ln506_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln502_reg_750 <= icmp_ln502_fu_309_p2;
        icmp_ln502_reg_750_pp1_iter1_reg <= icmp_ln502_reg_750;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln513_reg_798 <= icmp_ln513_fu_519_p2;
    end
end

always @ (*) begin
    if ((icmp_ln502_fu_309_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln513_reg_798 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0))) begin
        ap_phi_mux_e_1_phi_fu_268_p4 = add_ln513_reg_812;
    end else begin
        ap_phi_mux_e_1_phi_fu_268_p4 = e_1_reg_264;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        degree_table_address0 = degree_table_addr_6_reg_832;
    end else if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        degree_table_address0 = zext_ln518_fu_587_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        degree_table_address0 = sext_ln510_fu_435_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        degree_table_address0 = degree_table_addr_1_reg_759;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        degree_table_address0 = n_cast_fu_288_p1;
    end else begin
        degree_table_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        degree_table_address1 = zext_ln519_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        degree_table_address1 = sext_ln510_2_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        degree_table_address1 = sext_ln510_1_fu_446_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        degree_table_address1 = zext_ln506_fu_350_p1;
    end else begin
        degree_table_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        degree_table_ce0 = 1'b1;
    end else begin
        degree_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        degree_table_ce1 = 1'b1;
    end else begin
        degree_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        degree_table_d0 = add_ln523_fu_681_p2;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        degree_table_d0 = add_ln506_fu_379_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        degree_table_d0 = 32'd0;
    end else begin
        degree_table_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln502_reg_750_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln498_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0)))) begin
        degree_table_we0 = 1'b1;
    end else begin
        degree_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        degree_table_we1 = 1'b1;
    end else begin
        degree_table_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        edge_list_address0 = zext_ln515_fu_544_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        edge_list_address0 = zext_ln503_fu_323_p1;
    end else begin
        edge_list_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
        edge_list_ce0 = 1'b1;
    end else begin
        edge_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        neighbor_table_ce0 = 1'b1;
    end else begin
        neighbor_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        neighbor_table_ce1 = 1'b1;
    end else begin
        neighbor_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0))) begin
        neighbor_table_we0 = 1'b1;
    end else begin
        neighbor_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln513_reg_798 == 1'd0))) begin
        neighbor_table_we1 = 1'b1;
    end else begin
        neighbor_table_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln498_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln502_fu_309_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln502_fu_309_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln509_fu_401_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln513_reg_798 == 1'd1)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage1_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln513_reg_798 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln498_fu_276_p2 = (n_reg_230 + 6'd1);

assign add_ln502_fu_303_p2 = (e_reg_241 + 6'd1);

assign add_ln506_fu_379_p2 = (reuse_select_fu_372_p3 + 32'd1);

assign add_ln509_fu_460_p2 = (n_1_reg_252 + 5'd1);

assign add_ln510_1_fu_440_p2 = ($signed(sub_ln510_fu_423_p2) + $signed(8'd254));

assign add_ln510_2_fu_482_p2 = (reuse_select8_fu_475_p3 + shl_ln510_fu_466_p2);

assign add_ln510_3_fu_489_p2 = (sub_ln510_reg_773 + 8'd1);

assign add_ln510_fu_429_p2 = ($signed(sub_ln510_fu_423_p2) + $signed(8'd253));

assign add_ln513_fu_549_p2 = (e_1_reg_264 + 6'd1);

assign add_ln518_fu_581_p2 = (sub_ln518_fu_575_p2 + 10'd1);

assign add_ln519_fu_601_p2 = (sub_ln518_fu_575_p2 + 10'd2);

assign add_ln521_fu_654_p2 = (trunc_ln519_fu_650_p1 + trunc_ln518_1_fu_636_p1);

assign add_ln522_fu_665_p2 = (add_ln521_fu_654_p2 + 13'd1);

assign add_ln523_fu_681_p2 = (offset_idx_fu_643_p3 + 32'd2);

assign addr_cmp13_fu_595_p2 = ((reuse_addr_reg10_fu_82 == zext_ln518_fu_587_p1) ? 1'b1 : 1'b0);

assign addr_cmp17_fu_615_p2 = ((reuse_addr_reg10_fu_82 == zext_ln519_fu_607_p1) ? 1'b1 : 1'b0);

assign addr_cmp7_fu_454_p2 = ((reuse_addr_reg4_fu_90 == sext_ln510_1_fu_446_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_358_p2 = ((reuse_addr_reg_fu_98 == zext_ln506_fu_350_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign degree_table_d1 = (reuse_select8_fu_475_p3 + shl_ln510_fu_466_p2);

assign edge_list_address1 = zext_ln514_fu_533_p1;

assign icmp_ln498_fu_282_p2 = ((n_reg_230 == 6'd57) ? 1'b1 : 1'b0);

assign icmp_ln502_fu_309_p2 = ((e_reg_241 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln509_fu_401_p2 = ((n_1_reg_252 == 5'd19) ? 1'b1 : 1'b0);

assign icmp_ln513_fu_519_p2 = ((ap_phi_mux_e_1_phi_fu_268_p4 == 6'd40) ? 1'b1 : 1'b0);

assign n_1_cast1_fu_407_p1 = n_1_reg_252;

assign n_cast_fu_288_p1 = n_reg_230;

assign neighbor_table_address0 = zext_ln522_fu_671_p1;

assign neighbor_table_address1 = zext_ln521_fu_660_p1;

assign neighbor_table_d0 = e_1_reg_264;

assign neighbor_table_d1 = trunc_ln515_reg_817;

assign offset_idx_fu_643_p3 = ((addr_cmp17_reg_838[0:0] == 1'b1) ? reuse_reg9_fu_86 : degree_table_q1);

assign or_ln515_fu_538_p2 = (shl_ln3_fu_525_p3 | 7'd1);

assign reuse_select8_fu_475_p3 = ((addr_cmp7_reg_788[0:0] == 1'b1) ? reuse_reg3_fu_94 : degree_table_q1);

assign reuse_select_fu_372_p3 = ((addr_cmp_reg_765[0:0] == 1'b1) ? reuse_reg_fu_102 : degree_table_q1);

assign sext_ln510_1_fu_446_p1 = $signed(add_ln510_1_fu_440_p2);

assign sext_ln510_2_fu_494_p1 = $signed(add_ln510_3_fu_489_p2);

assign sext_ln510_fu_435_p1 = $signed(add_ln510_fu_429_p2);

assign shl_ln1_fu_336_p3 = {{trunc_ln506_fu_332_p1}, {2'd0}};

assign shl_ln2_fu_411_p3 = {{n_1_reg_252}, {2'd0}};

assign shl_ln3_fu_525_p3 = {{ap_phi_mux_e_1_phi_fu_268_p4}, {1'd0}};

assign shl_ln4_fu_567_p3 = {{trunc_ln518_fu_563_p1}, {2'd0}};

assign shl_ln510_fu_466_p2 = degree_table_q0 << 32'd1;

assign shl_ln_fu_315_p3 = {{e_reg_241}, {1'd0}};

assign start_idx_fu_629_p3 = ((addr_cmp13_reg_827[0:0] == 1'b1) ? reuse_reg9_fu_86 : degree_table_q0);

assign sub_ln506_fu_344_p2 = (shl_ln1_fu_336_p3 - trunc_ln503_fu_328_p1);

assign sub_ln510_fu_423_p2 = (zext_ln510_fu_419_p1 - n_1_cast1_fu_407_p1);

assign sub_ln518_fu_575_p2 = (shl_ln4_fu_567_p3 - trunc_ln514_fu_555_p1);

assign trunc_ln503_fu_328_p1 = edge_list_q0[9:0];

assign trunc_ln506_fu_332_p1 = edge_list_q0[7:0];

assign trunc_ln514_fu_555_p1 = edge_list_q1[9:0];

assign trunc_ln515_fu_559_p1 = edge_list_q0[7:0];

assign trunc_ln518_1_fu_636_p1 = start_idx_fu_629_p3[12:0];

assign trunc_ln518_fu_563_p1 = edge_list_q1[7:0];

assign trunc_ln519_fu_650_p1 = offset_idx_fu_643_p3[12:0];

assign zext_ln503_fu_323_p1 = shl_ln_fu_315_p3;

assign zext_ln506_fu_350_p1 = sub_ln506_fu_344_p2;

assign zext_ln510_fu_419_p1 = shl_ln2_fu_411_p3;

assign zext_ln514_fu_533_p1 = shl_ln3_fu_525_p3;

assign zext_ln515_fu_544_p1 = or_ln515_fu_538_p2;

assign zext_ln518_fu_587_p1 = add_ln518_fu_581_p2;

assign zext_ln519_fu_607_p1 = add_ln519_fu_601_p2;

assign zext_ln521_fu_660_p1 = add_ln521_fu_654_p2;

assign zext_ln522_fu_671_p1 = add_ln522_fu_665_p2;

endmodule //GIN_compute_one_graph_prepare_degree_neighbor_table
