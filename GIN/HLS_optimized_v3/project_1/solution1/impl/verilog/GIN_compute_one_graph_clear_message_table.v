// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_clear_message_table (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        message_tb_address1,
        message_tb_ce1,
        message_tb_we1,
        message_tb_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] message_tb_address1;
output   message_tb_ce1;
output   message_tb_we1;
output  [31:0] message_tb_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] add_ln226_fu_46_p2;
reg   [4:0] add_ln226_reg_58;
wire    ap_CS_fsm_state2;
wire    grp_clear_message_table_one_node_fu_38_ap_start;
wire    grp_clear_message_table_one_node_fu_38_ap_done;
wire    grp_clear_message_table_one_node_fu_38_ap_idle;
wire    grp_clear_message_table_one_node_fu_38_ap_ready;
wire   [14:0] grp_clear_message_table_one_node_fu_38_message_tb_address1;
wire    grp_clear_message_table_one_node_fu_38_message_tb_ce1;
wire    grp_clear_message_table_one_node_fu_38_message_tb_we1;
wire   [31:0] grp_clear_message_table_one_node_fu_38_message_tb_d1;
reg   [4:0] n_reg_26;
wire    ap_CS_fsm_state3;
reg    grp_clear_message_table_one_node_fu_38_ap_start_reg;
wire   [0:0] icmp_ln226_fu_52_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_clear_message_table_one_node_fu_38_ap_start_reg = 1'b0;
end

GIN_compute_one_graph_clear_message_table_one_node grp_clear_message_table_one_node_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_clear_message_table_one_node_fu_38_ap_start),
    .ap_done(grp_clear_message_table_one_node_fu_38_ap_done),
    .ap_idle(grp_clear_message_table_one_node_fu_38_ap_idle),
    .ap_ready(grp_clear_message_table_one_node_fu_38_ap_ready),
    .message_tb_address1(grp_clear_message_table_one_node_fu_38_message_tb_address1),
    .message_tb_ce1(grp_clear_message_table_one_node_fu_38_message_tb_ce1),
    .message_tb_we1(grp_clear_message_table_one_node_fu_38_message_tb_we1),
    .message_tb_d1(grp_clear_message_table_one_node_fu_38_message_tb_d1),
    .message_tb_offset(n_reg_26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_clear_message_table_one_node_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln226_fu_52_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_clear_message_table_one_node_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_clear_message_table_one_node_fu_38_ap_ready == 1'b1)) begin
            grp_clear_message_table_one_node_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_reg_26 <= 5'd0;
    end else if (((grp_clear_message_table_one_node_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        n_reg_26 <= add_ln226_reg_58;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln226_reg_58 <= add_ln226_fu_46_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln226_fu_52_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_fu_52_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln226_fu_52_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_clear_message_table_one_node_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln226_fu_46_p2 = (n_reg_26 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_clear_message_table_one_node_fu_38_ap_start = grp_clear_message_table_one_node_fu_38_ap_start_reg;

assign icmp_ln226_fu_52_p2 = ((n_reg_26 == 5'd19) ? 1'b1 : 1'b0);

assign message_tb_address1 = grp_clear_message_table_one_node_fu_38_message_tb_address1;

assign message_tb_ce1 = grp_clear_message_table_one_node_fu_38_message_tb_ce1;

assign message_tb_d1 = grp_clear_message_table_one_node_fu_38_message_tb_d1;

assign message_tb_we1 = grp_clear_message_table_one_node_fu_38_message_tb_we1;

endmodule //GIN_compute_one_graph_clear_message_table
