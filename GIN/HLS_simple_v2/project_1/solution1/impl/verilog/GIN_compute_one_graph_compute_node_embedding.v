// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_compute_node_embedding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_nodes,
        node_embedding_V_address0,
        node_embedding_V_ce0,
        node_embedding_V_q0,
        node_embedding_V_address1,
        node_embedding_V_ce1,
        node_embedding_V_we1,
        node_embedding_V_d1,
        node_embedding_table_V_address0,
        node_embedding_table_V_ce0,
        node_embedding_table_V_q0,
        node_feature_address0,
        node_feature_ce0,
        node_feature_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_pp1_stage0 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_pp2_stage0 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_of_nodes;
output  [18:0] node_embedding_V_address0;
output   node_embedding_V_ce0;
input  [31:0] node_embedding_V_q0;
output  [18:0] node_embedding_V_address1;
output   node_embedding_V_ce1;
output   node_embedding_V_we1;
output  [31:0] node_embedding_V_d1;
output  [15:0] node_embedding_table_V_address0;
output   node_embedding_table_V_ce0;
input  [31:0] node_embedding_table_V_q0;
output  [13:0] node_feature_address0;
output   node_feature_ce0;
input  [31:0] node_feature_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_embedding_V_ce0;
reg[18:0] node_embedding_V_address1;
reg node_embedding_V_ce1;
reg node_embedding_V_we1;
reg[31:0] node_embedding_V_d1;
reg node_embedding_table_V_ce0;
reg node_feature_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] nd_feature_table_1_address0;
reg    nd_feature_table_1_ce0;
wire   [4:0] nd_feature_table_1_q0;
reg   [3:0] i_reg_201;
reg   [9:0] addr_reg_212;
reg   [8:0] dim_reg_224;
wire   [18:0] empty_91_fu_235_p2;
wire    ap_CS_fsm_state2;
wire   [35:0] add_ln251_1_fu_266_p2;
reg   [35:0] add_ln251_1_reg_477;
wire    ap_CS_fsm_state3;
wire   [35:0] add_ln251_2_fu_272_p2;
reg   [35:0] add_ln251_2_reg_482;
wire    ap_CS_fsm_state4;
wire   [3:0] select_ln251_fu_295_p3;
reg   [3:0] select_ln251_reg_490;
wire   [0:0] icmp_ln251_fu_278_p2;
wire   [31:0] select_ln251_1_fu_303_p3;
reg   [31:0] select_ln251_1_reg_496;
wire   [7:0] empty_96_fu_352_p1;
reg   [7:0] empty_96_reg_511;
wire    ap_CS_fsm_state5;
wire  signed [18:0] grp_fu_457_p2;
reg  signed [18:0] mul_ln703_reg_516;
wire    ap_CS_fsm_state7;
wire   [3:0] add_ln239_fu_356_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln239_fu_362_p2;
reg   [0:0] icmp_ln239_reg_526;
wire   [9:0] addr_1_fu_380_p2;
reg    ap_enable_reg_pp1_iter1;
wire   [15:0] mul_ln254_fu_399_p2;
reg   [15:0] mul_ln254_reg_540;
wire    ap_CS_fsm_state10;
wire   [8:0] add_ln254_fu_405_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln254_fu_411_p2;
reg   [0:0] icmp_ln254_reg_550;
reg   [18:0] node_embedding_V_addr_1_reg_554;
wire   [3:0] add_ln252_fu_452_p2;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
reg   [18:0] empty_reg_157;
wire   [0:0] exitcond548_fu_241_p2;
reg   [35:0] indvar_flatten_reg_168;
reg   [31:0] nd_reg_179;
reg   [3:0] nf_reg_190;
wire    ap_block_pp1_stage0;
wire   [63:0] p_cast_fu_247_p1;
wire   [63:0] zext_ln253_fu_347_p1;
wire   [63:0] i_cast_fu_367_p1;
wire   [63:0] zext_ln703_6_fu_430_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln257_fu_440_p1;
wire   [31:0] add_ln703_fu_445_p2;
wire   [34:0] tmp_fu_255_p3;
wire   [35:0] zext_ln251_1_fu_262_p1;
wire   [35:0] zext_ln251_fu_252_p1;
wire   [0:0] icmp_ln252_fu_289_p2;
wire   [31:0] add_ln251_fu_283_p2;
wire   [10:0] trunc_ln251_1_fu_319_p1;
wire   [13:0] trunc_ln251_fu_315_p1;
wire   [13:0] zext_ln252_fu_331_p1;
wire   [13:0] add_ln253_1_fu_335_p2;
wire   [13:0] p_shl_mid2_fu_323_p3;
wire   [13:0] add_ln253_fu_341_p2;
wire  signed [6:0] nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1;
wire   [9:0] nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1;
wire   [7:0] empty_94_fu_386_p1;
wire   [7:0] add3_fu_390_p2;
wire   [7:0] mul_ln254_fu_399_p0;
wire   [9:0] mul_ln254_fu_399_p1;
wire   [18:0] zext_ln703_5_fu_421_p1;
(* use_dsp48 = "no" *) wire   [18:0] add_ln703_6_fu_425_p2;
wire   [15:0] zext_ln703_fu_417_p1;
wire   [15:0] add_ln257_fu_435_p2;
wire  signed [18:0] grp_fu_457_p0;
wire   [9:0] grp_fu_457_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [15:0] mul_ln254_fu_399_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1 #(
    .DataWidth( 5 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
nd_feature_table_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(nd_feature_table_1_address0),
    .ce0(nd_feature_table_1_ce0),
    .q0(nd_feature_table_1_q0)
);

GIN_compute_one_graph_mul_8ns_10ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
mul_8ns_10ns_16_1_1_U10(
    .din0(mul_ln254_fu_399_p0),
    .din1(mul_ln254_fu_399_p1),
    .dout(mul_ln254_fu_399_p2)
);

GIN_compute_one_graph_mul_mul_19s_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
mul_mul_19s_10ns_19_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_457_p0),
    .din1(grp_fu_457_p1),
    .ce(1'b1),
    .dout(grp_fu_457_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        addr_reg_212 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln239_reg_526 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        addr_reg_212 <= addr_1_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln254_fu_411_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dim_reg_224 <= add_ln254_fu_405_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dim_reg_224 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond548_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_157 <= empty_91_fu_235_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_157 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_201 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln239_fu_362_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_201 <= add_ln239_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_168 <= add_ln251_2_reg_482;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_168 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        nd_reg_179 <= select_ln251_1_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nd_reg_179 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        nf_reg_190 <= add_ln252_fu_452_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nf_reg_190 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln251_1_reg_477 <= add_ln251_1_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln251_2_reg_482 <= add_ln251_2_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_96_reg_511 <= empty_96_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln239_reg_526 <= icmp_ln239_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln254_reg_550 <= icmp_ln254_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln254_reg_540 <= mul_ln254_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln703_reg_516 <= grp_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln254_fu_411_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_V_addr_1_reg_554 <= zext_ln703_6_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        select_ln251_1_reg_496 <= select_ln251_1_fu_303_p3;
        select_ln251_reg_490 <= select_ln251_fu_295_p3;
    end
end

always @ (*) begin
    if ((icmp_ln239_fu_362_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln254_fu_411_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln251_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        nd_feature_table_1_ce0 = 1'b1;
    end else begin
        nd_feature_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        node_embedding_V_address1 = node_embedding_V_addr_1_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_embedding_V_address1 = p_cast_fu_247_p1;
    end else begin
        node_embedding_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_V_ce0 = 1'b1;
    end else begin
        node_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        node_embedding_V_ce1 = 1'b1;
    end else begin
        node_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        node_embedding_V_d1 = add_ln703_fu_445_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_embedding_V_d1 = 32'd0;
    end else begin
        node_embedding_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln254_reg_550 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond548_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        node_embedding_V_we1 = 1'b1;
    end else begin
        node_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_table_V_ce0 = 1'b1;
    end else begin
        node_embedding_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_feature_ce0 = 1'b1;
    end else begin
        node_feature_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond548_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln251_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln239_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln239_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln254_fu_411_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln254_fu_411_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add3_fu_390_p2 = (empty_94_fu_386_p1 + empty_96_reg_511);

assign add_ln239_fu_356_p2 = (i_reg_201 + 4'd1);

assign add_ln251_1_fu_266_p2 = (zext_ln251_1_fu_262_p1 + zext_ln251_fu_252_p1);

assign add_ln251_2_fu_272_p2 = (indvar_flatten_reg_168 + 36'd1);

assign add_ln251_fu_283_p2 = (nd_reg_179 + 32'd1);

assign add_ln252_fu_452_p2 = (select_ln251_reg_490 + 4'd1);

assign add_ln253_1_fu_335_p2 = (trunc_ln251_fu_315_p1 + zext_ln252_fu_331_p1);

assign add_ln253_fu_341_p2 = (add_ln253_1_fu_335_p2 + p_shl_mid2_fu_323_p3);

assign add_ln254_fu_405_p2 = (dim_reg_224 + 9'd1);

assign add_ln257_fu_435_p2 = (mul_ln254_reg_540 + zext_ln703_fu_417_p1);

assign add_ln703_6_fu_425_p2 = ($signed(mul_ln703_reg_516) + $signed(zext_ln703_5_fu_421_p1));

assign add_ln703_fu_445_p2 = (node_embedding_V_q0 + node_embedding_table_V_q0);

assign addr_1_fu_380_p2 = (nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1 + addr_reg_212);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_91_fu_235_p2 = (empty_reg_157 + 19'd1);

assign empty_94_fu_386_p1 = addr_reg_212[7:0];

assign empty_96_fu_352_p1 = node_feature_q0[7:0];

assign exitcond548_fu_241_p2 = ((empty_reg_157 == 19'd300000) ? 1'b1 : 1'b0);

assign grp_fu_457_p0 = select_ln251_1_fu_303_p3[18:0];

assign grp_fu_457_p1 = 19'd300;

assign i_cast_fu_367_p1 = i_reg_201;

assign icmp_ln239_fu_362_p2 = ((i_reg_201 == select_ln251_reg_490) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_278_p2 = ((indvar_flatten_reg_168 == add_ln251_1_reg_477) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_289_p2 = ((nf_reg_190 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_411_p2 = ((dim_reg_224 == 9'd300) ? 1'b1 : 1'b0);

assign mul_ln254_fu_399_p0 = mul_ln254_fu_399_p00;

assign mul_ln254_fu_399_p00 = add3_fu_390_p2;

assign mul_ln254_fu_399_p1 = 16'd300;

assign nd_feature_table_1_address0 = i_cast_fu_367_p1;

assign nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1 = $unsigned(nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1);

assign nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1 = $signed(nd_feature_table_1_q0);

assign node_embedding_V_address0 = zext_ln703_6_fu_430_p1;

assign node_embedding_table_V_address0 = zext_ln257_fu_440_p1;

assign node_feature_address0 = zext_ln253_fu_347_p1;

assign p_cast_fu_247_p1 = empty_reg_157;

assign p_shl_mid2_fu_323_p3 = {{trunc_ln251_1_fu_319_p1}, {3'd0}};

assign select_ln251_1_fu_303_p3 = ((icmp_ln252_fu_289_p2[0:0] == 1'b1) ? add_ln251_fu_283_p2 : nd_reg_179);

assign select_ln251_fu_295_p3 = ((icmp_ln252_fu_289_p2[0:0] == 1'b1) ? 4'd0 : nf_reg_190);

assign tmp_fu_255_p3 = {{num_of_nodes}, {3'd0}};

assign trunc_ln251_1_fu_319_p1 = select_ln251_1_fu_303_p3[10:0];

assign trunc_ln251_fu_315_p1 = select_ln251_1_fu_303_p3[13:0];

assign zext_ln251_1_fu_262_p1 = tmp_fu_255_p3;

assign zext_ln251_fu_252_p1 = num_of_nodes;

assign zext_ln252_fu_331_p1 = select_ln251_fu_295_p3;

assign zext_ln253_fu_347_p1 = add_ln253_fu_341_p2;

assign zext_ln257_fu_440_p1 = add_ln257_fu_435_p2;

assign zext_ln703_5_fu_421_p1 = dim_reg_224;

assign zext_ln703_6_fu_430_p1 = add_ln703_6_fu_425_p2;

assign zext_ln703_fu_417_p1 = dim_reg_224;

endmodule //GIN_compute_one_graph_compute_node_embedding
