// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_MLP_PE_148 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mlp_in_local3_address0,
        mlp_in_local3_ce0,
        mlp_in_local3_q0,
        mlp_1_weight_fifo_3_V_V_dout,
        mlp_1_weight_fifo_3_V_V_empty_n,
        mlp_1_weight_fifo_3_V_V_read,
        mlp_1_bias_V_load_loc_dout,
        mlp_1_bias_V_load_loc_empty_n,
        mlp_1_bias_V_load_loc_read,
        mlp_out_local6,
        mlp_out_local6_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state19 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] mlp_in_local3_address0;
output   mlp_in_local3_ce0;
input  [31:0] mlp_in_local3_q0;
input  [31:0] mlp_1_weight_fifo_3_V_V_dout;
input   mlp_1_weight_fifo_3_V_V_empty_n;
output   mlp_1_weight_fifo_3_V_V_read;
input  [31:0] mlp_1_bias_V_load_loc_dout;
input   mlp_1_bias_V_load_loc_empty_n;
output   mlp_1_bias_V_load_loc_read;
output  [30:0] mlp_out_local6;
output   mlp_out_local6_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mlp_in_local3_ce0;
reg mlp_1_weight_fifo_3_V_V_read;
reg mlp_1_bias_V_load_loc_read;
reg[30:0] mlp_out_local6;
reg mlp_out_local6_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mlp_1_weight_fifo_3_V_V_blk_n;
reg    ap_enable_reg_pp0_iter16;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln86_reg_251;
reg   [0:0] icmp_ln86_reg_251_pp0_iter15_reg;
reg    mlp_1_bias_V_load_loc_blk_n;
reg   [8:0] i_reg_110;
reg   [31:0] lhs_reg_121;
wire   [8:0] add_ln86_fu_131_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
reg    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln86_fu_137_p2;
reg   [0:0] icmp_ln86_reg_251_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter2_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter3_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter4_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter5_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter6_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter7_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter8_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter9_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter10_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter11_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter12_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter13_reg;
reg   [0:0] icmp_ln86_reg_251_pp0_iter14_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_condition_pp0_exit_iter15_state17;
wire   [63:0] zext_ln1118_1_fu_177_p1;
wire   [30:0] select_ln92_fu_232_p3;
reg   [30:0] mlp_out_local6_preg;
wire    ap_CS_fsm_state19;
wire   [10:0] shl_ln_fu_143_p3;
wire   [13:0] zext_ln1118_fu_151_p1;
wire   [13:0] add_ln1118_fu_155_p2;
wire   [11:0] grp_fu_171_p0;
wire   [10:0] grp_fu_171_p1;
wire   [11:0] grp_fu_171_p2;
wire   [53:0] r_V_3_fu_190_p2;
wire   [53:0] lhs_3_fu_196_p3;
wire   [53:0] ret_V_fu_204_p2;
wire   [0:0] tmp_fu_224_p3;
wire   [30:0] trunc_ln86_fu_220_p1;
reg    grp_fu_171_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 mlp_out_local6_preg = 31'd0;
end

GIN_compute_one_graph_urem_12ns_11ns_12_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
urem_12ns_11ns_12_16_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(grp_fu_171_ce),
    .dout(grp_fu_171_p2)
);

GIN_compute_one_graph_mul_32s_32s_54_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
mul_32s_32s_54_1_1_U95(
    .din0(mlp_in_local3_q0),
    .din1(mlp_1_weight_fifo_3_V_V_dout),
    .dout(r_V_3_fu_190_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter15_state17) & (ap_enable_reg_pp0_iter14 == 1'b0)) | (~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter15_state17))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter14;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        mlp_out_local6_preg <= 31'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            mlp_out_local6_preg <= select_ln92_fu_232_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_110 <= add_ln86_fu_131_p2;
    end else if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_110 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        lhs_reg_121 <= {{ret_V_fu_204_p2[53:22]}};
    end else if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        lhs_reg_121 <= mlp_1_bias_V_load_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln86_reg_251 <= icmp_ln86_fu_137_p2;
        icmp_ln86_reg_251_pp0_iter1_reg <= icmp_ln86_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln86_reg_251_pp0_iter10_reg <= icmp_ln86_reg_251_pp0_iter9_reg;
        icmp_ln86_reg_251_pp0_iter11_reg <= icmp_ln86_reg_251_pp0_iter10_reg;
        icmp_ln86_reg_251_pp0_iter12_reg <= icmp_ln86_reg_251_pp0_iter11_reg;
        icmp_ln86_reg_251_pp0_iter13_reg <= icmp_ln86_reg_251_pp0_iter12_reg;
        icmp_ln86_reg_251_pp0_iter14_reg <= icmp_ln86_reg_251_pp0_iter13_reg;
        icmp_ln86_reg_251_pp0_iter15_reg <= icmp_ln86_reg_251_pp0_iter14_reg;
        icmp_ln86_reg_251_pp0_iter2_reg <= icmp_ln86_reg_251_pp0_iter1_reg;
        icmp_ln86_reg_251_pp0_iter3_reg <= icmp_ln86_reg_251_pp0_iter2_reg;
        icmp_ln86_reg_251_pp0_iter4_reg <= icmp_ln86_reg_251_pp0_iter3_reg;
        icmp_ln86_reg_251_pp0_iter5_reg <= icmp_ln86_reg_251_pp0_iter4_reg;
        icmp_ln86_reg_251_pp0_iter6_reg <= icmp_ln86_reg_251_pp0_iter5_reg;
        icmp_ln86_reg_251_pp0_iter7_reg <= icmp_ln86_reg_251_pp0_iter6_reg;
        icmp_ln86_reg_251_pp0_iter8_reg <= icmp_ln86_reg_251_pp0_iter7_reg;
        icmp_ln86_reg_251_pp0_iter9_reg <= icmp_ln86_reg_251_pp0_iter8_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0))) begin
        ap_condition_pp0_exit_iter15_state17 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter15_state17 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mlp_1_bias_V_load_loc_blk_n = mlp_1_bias_V_load_loc_empty_n;
    end else begin
        mlp_1_bias_V_load_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mlp_1_bias_V_load_loc_read = 1'b1;
    end else begin
        mlp_1_bias_V_load_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        mlp_1_weight_fifo_3_V_V_blk_n = mlp_1_weight_fifo_3_V_V_empty_n;
    end else begin
        mlp_1_weight_fifo_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        mlp_1_weight_fifo_3_V_V_read = 1'b1;
    end else begin
        mlp_1_weight_fifo_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        mlp_in_local3_ce0 = 1'b1;
    end else begin
        mlp_in_local3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mlp_out_local6 = select_ln92_fu_232_p3;
    end else begin
        mlp_out_local6 = mlp_out_local6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mlp_out_local6_ap_vld = 1'b1;
    end else begin
        mlp_out_local6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1) & (ap_enable_reg_pp0_iter14 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_155_p2 = (zext_ln1118_fu_151_p1 + 14'd7200);

assign add_ln86_fu_131_p2 = (i_reg_110 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (mlp_1_weight_fifo_3_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1) & (mlp_1_weight_fifo_3_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (mlp_1_bias_V_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter16 = ((icmp_ln86_reg_251_pp0_iter15_reg == 1'd0) & (mlp_1_weight_fifo_3_V_V_empty_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_171_p0 = {{add_ln1118_fu_155_p2[13:2]}};

assign grp_fu_171_p1 = 12'd600;

assign icmp_ln86_fu_137_p2 = ((i_reg_110 == 9'd300) ? 1'b1 : 1'b0);

assign lhs_3_fu_196_p3 = {{lhs_reg_121}, {22'd0}};

assign mlp_in_local3_address0 = zext_ln1118_1_fu_177_p1;

assign ret_V_fu_204_p2 = (r_V_3_fu_190_p2 + lhs_3_fu_196_p3);

assign select_ln92_fu_232_p3 = ((tmp_fu_224_p3[0:0] == 1'b1) ? 31'd0 : trunc_ln86_fu_220_p1);

assign shl_ln_fu_143_p3 = {{i_reg_110}, {2'd0}};

assign tmp_fu_224_p3 = lhs_reg_121[32'd31];

assign trunc_ln86_fu_220_p1 = lhs_reg_121[30:0];

assign zext_ln1118_1_fu_177_p1 = grp_fu_171_p2;

assign zext_ln1118_fu_151_p1 = shl_ln_fu_143_p3;

endmodule //GIN_compute_one_graph_MLP_PE_148
