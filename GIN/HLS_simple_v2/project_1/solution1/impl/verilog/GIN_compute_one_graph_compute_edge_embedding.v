// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_compute_edge_embedding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_edges,
        layer,
        edge_embedding_V_address0,
        edge_embedding_V_ce0,
        edge_embedding_V_q0,
        edge_embedding_V_address1,
        edge_embedding_V_ce1,
        edge_embedding_V_we1,
        edge_embedding_V_d1,
        edge_embedding_table_V_address0,
        edge_embedding_table_V_ce0,
        edge_embedding_table_V_q0,
        edge_attr_address0,
        edge_attr_ce0,
        edge_attr_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_pp1_stage0 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_pp2_stage0 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_of_edges;
input  [2:0] layer;
output  [19:0] edge_embedding_V_address0;
output   edge_embedding_V_ce0;
input  [31:0] edge_embedding_V_q0;
output  [19:0] edge_embedding_V_address1;
output   edge_embedding_V_ce1;
output   edge_embedding_V_we1;
output  [31:0] edge_embedding_V_d1;
output  [14:0] edge_embedding_table_V_address0;
output   edge_embedding_table_V_ce0;
input  [31:0] edge_embedding_table_V_q0;
output  [12:0] edge_attr_address0;
output   edge_attr_ce0;
input  [31:0] edge_attr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg edge_embedding_V_ce0;
reg[19:0] edge_embedding_V_address1;
reg edge_embedding_V_ce1;
reg edge_embedding_V_we1;
reg[31:0] edge_embedding_V_d1;
reg edge_embedding_table_V_ce0;
reg edge_attr_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] ed_feature_table_1_address0;
reg    ed_feature_table_1_ce0;
wire   [2:0] ed_feature_table_1_q0;
reg   [1:0] i_reg_211;
reg   [3:0] addr_reg_222;
reg   [8:0] dim_reg_234;
wire   [6:0] layer_cast_fu_245_p1;
reg   [6:0] layer_cast_reg_515;
wire   [19:0] empty_97_fu_249_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] mul_i_fu_266_p2;
reg   [6:0] mul_i_reg_528;
wire    ap_CS_fsm_state3;
wire   [33:0] bound_fu_281_p2;
reg   [33:0] bound_reg_533;
wire   [33:0] add_ln212_1_fu_287_p2;
reg   [33:0] add_ln212_1_reg_538;
wire    ap_CS_fsm_state4;
wire   [1:0] select_ln212_fu_332_p3;
reg   [1:0] select_ln212_reg_546;
wire   [0:0] icmp_ln212_fu_315_p2;
wire   [31:0] select_ln212_1_fu_340_p3;
reg   [31:0] select_ln212_1_reg_552;
wire   [6:0] empty_104_fu_397_p1;
reg   [6:0] empty_104_reg_567;
wire    ap_CS_fsm_state5;
wire  signed [19:0] grp_fu_503_p2;
reg  signed [19:0] mul_ln703_reg_572;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln199_fu_401_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln199_fu_407_p2;
reg   [0:0] icmp_ln199_reg_582;
wire   [3:0] addr_2_fu_421_p2;
reg    ap_enable_reg_pp1_iter1;
wire   [14:0] mul_ln215_fu_445_p2;
reg   [14:0] mul_ln215_reg_596;
wire    ap_CS_fsm_state10;
wire   [8:0] add_ln215_fu_451_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln215_fu_457_p2;
reg   [0:0] icmp_ln215_reg_606;
reg   [19:0] edge_embedding_V_addr_1_reg_610;
wire   [1:0] add_ln213_fu_498_p2;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
reg   [19:0] empty_reg_167;
wire   [0:0] exitcond548_fu_255_p2;
reg   [33:0] indvar_flatten_reg_178;
reg   [31:0] e_reg_189;
reg   [1:0] ef_reg_200;
wire    ap_block_pp1_stage0;
wire   [63:0] p_cast_fu_261_p1;
wire   [63:0] zext_ln214_fu_392_p1;
wire   [63:0] i_cast_fu_412_p1;
wire   [63:0] zext_ln703_8_fu_476_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln218_fu_486_p1;
wire   [31:0] add_ln703_fu_491_p2;
wire   [2:0] mul_i_fu_266_p0;
wire   [4:0] mul_i_fu_266_p1;
wire   [33:0] p_shl2_fu_274_p3;
wire   [33:0] cast_fu_271_p1;
wire   [10:0] empty_99_fu_297_p1;
wire   [12:0] p_shl_fu_301_p3;
wire   [12:0] trunc_ln212_fu_293_p1;
wire   [0:0] icmp_ln213_fu_326_p2;
wire   [31:0] add_ln212_fu_320_p2;
wire   [10:0] empty_103_fu_356_p1;
wire   [12:0] p_shl_mid1_fu_360_p3;
wire   [12:0] trunc_ln212_1_fu_352_p1;
wire   [12:0] p_mid1_fu_368_p2;
wire   [12:0] empty_100_fu_309_p2;
wire   [12:0] select_ln212_2_fu_374_p3;
wire   [12:0] zext_ln213_fu_382_p1;
wire   [12:0] add_ln214_fu_386_p2;
wire   [3:0] ed_feature_table_1_load_cast_fu_417_p1;
wire   [6:0] addr_cast_fu_427_p1;
wire   [6:0] tmp_fu_431_p2;
wire   [6:0] add3_fu_436_p2;
wire   [6:0] mul_ln215_fu_445_p0;
wire   [9:0] mul_ln215_fu_445_p1;
wire   [19:0] zext_ln703_7_fu_467_p1;
(* use_dsp48 = "no" *) wire   [19:0] add_ln703_7_fu_471_p2;
wire   [14:0] zext_ln703_fu_463_p1;
wire   [14:0] add_ln218_fu_481_p2;
wire  signed [19:0] grp_fu_503_p0;
wire   [9:0] grp_fu_503_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [14:0] mul_ln215_fu_445_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

GIN_compute_one_graph_compute_edge_embedding_ed_feature_table_1 #(
    .DataWidth( 3 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
ed_feature_table_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ed_feature_table_1_address0),
    .ce0(ed_feature_table_1_ce0),
    .q0(ed_feature_table_1_q0)
);

GIN_compute_one_graph_mul_3ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_3ns_5ns_7_1_1_U19(
    .din0(mul_i_fu_266_p0),
    .din1(mul_i_fu_266_p1),
    .dout(mul_i_fu_266_p2)
);

GIN_compute_one_graph_mul_7ns_10ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_7ns_10ns_15_1_1_U20(
    .din0(mul_ln215_fu_445_p0),
    .din1(mul_ln215_fu_445_p1),
    .dout(mul_ln215_fu_445_p2)
);

GIN_compute_one_graph_mul_mul_20s_10ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 20 ))
mul_mul_20s_10ns_20_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_503_p0),
    .din1(grp_fu_503_p1),
    .ce(1'b1),
    .dout(grp_fu_503_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        addr_reg_222 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln199_reg_582 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        addr_reg_222 <= addr_2_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln215_fu_457_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dim_reg_234 <= add_ln215_fu_451_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dim_reg_234 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        e_reg_189 <= select_ln212_1_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        e_reg_189 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ef_reg_200 <= add_ln213_fu_498_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ef_reg_200 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond548_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_167 <= empty_97_fu_249_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_167 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_211 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln199_fu_407_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_211 <= add_ln199_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_178 <= add_ln212_1_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_178 <= 34'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln212_1_reg_538 <= add_ln212_1_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_533 <= bound_fu_281_p2;
        mul_i_reg_528 <= mul_i_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln215_fu_457_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_embedding_V_addr_1_reg_610 <= zext_ln703_8_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_104_reg_567 <= empty_104_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln199_reg_582 <= icmp_ln199_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln215_reg_606 <= icmp_ln215_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        layer_cast_reg_515[2 : 0] <= layer_cast_fu_245_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln215_reg_596 <= mul_ln215_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln703_reg_572 <= grp_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln212_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        select_ln212_1_reg_552 <= select_ln212_1_fu_340_p3;
        select_ln212_reg_546 <= select_ln212_fu_332_p3;
    end
end

always @ (*) begin
    if ((icmp_ln199_fu_407_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln215_fu_457_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln212_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ed_feature_table_1_ce0 = 1'b1;
    end else begin
        ed_feature_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        edge_attr_ce0 = 1'b1;
    end else begin
        edge_attr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        edge_embedding_V_address1 = edge_embedding_V_addr_1_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_embedding_V_address1 = p_cast_fu_261_p1;
    end else begin
        edge_embedding_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_embedding_V_ce0 = 1'b1;
    end else begin
        edge_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        edge_embedding_V_ce1 = 1'b1;
    end else begin
        edge_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        edge_embedding_V_d1 = add_ln703_fu_491_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_embedding_V_d1 = 32'd0;
    end else begin
        edge_embedding_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln215_reg_606 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond548_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        edge_embedding_V_we1 = 1'b1;
    end else begin
        edge_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_embedding_table_V_ce0 = 1'b1;
    end else begin
        edge_embedding_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond548_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln212_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln199_fu_407_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln199_fu_407_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln215_fu_457_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln215_fu_457_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add3_fu_436_p2 = (tmp_fu_431_p2 + empty_104_reg_567);

assign add_ln199_fu_401_p2 = (i_reg_211 + 2'd1);

assign add_ln212_1_fu_287_p2 = (indvar_flatten_reg_178 + 34'd1);

assign add_ln212_fu_320_p2 = (e_reg_189 + 32'd1);

assign add_ln213_fu_498_p2 = (select_ln212_reg_546 + 2'd1);

assign add_ln214_fu_386_p2 = (select_ln212_2_fu_374_p3 + zext_ln213_fu_382_p1);

assign add_ln215_fu_451_p2 = (dim_reg_234 + 9'd1);

assign add_ln218_fu_481_p2 = (mul_ln215_reg_596 + zext_ln703_fu_463_p1);

assign add_ln703_7_fu_471_p2 = ($signed(mul_ln703_reg_572) + $signed(zext_ln703_7_fu_467_p1));

assign add_ln703_fu_491_p2 = (edge_embedding_V_q0 + edge_embedding_table_V_q0);

assign addr_2_fu_421_p2 = (ed_feature_table_1_load_cast_fu_417_p1 + addr_reg_222);

assign addr_cast_fu_427_p1 = addr_reg_222;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bound_fu_281_p2 = (p_shl2_fu_274_p3 - cast_fu_271_p1);

assign cast_fu_271_p1 = num_of_edges;

assign ed_feature_table_1_address0 = i_cast_fu_412_p1;

assign ed_feature_table_1_load_cast_fu_417_p1 = ed_feature_table_1_q0;

assign edge_attr_address0 = zext_ln214_fu_392_p1;

assign edge_embedding_V_address0 = zext_ln703_8_fu_476_p1;

assign edge_embedding_table_V_address0 = zext_ln218_fu_486_p1;

assign empty_100_fu_309_p2 = (p_shl_fu_301_p3 - trunc_ln212_fu_293_p1);

assign empty_103_fu_356_p1 = add_ln212_fu_320_p2[10:0];

assign empty_104_fu_397_p1 = edge_attr_q0[6:0];

assign empty_97_fu_249_p2 = (empty_reg_167 + 20'd1);

assign empty_99_fu_297_p1 = e_reg_189[10:0];

assign exitcond548_fu_255_p2 = ((empty_reg_167 == 20'd600000) ? 1'b1 : 1'b0);

assign grp_fu_503_p0 = select_ln212_1_fu_340_p3[19:0];

assign grp_fu_503_p1 = 20'd300;

assign i_cast_fu_412_p1 = i_reg_211;

assign icmp_ln199_fu_407_p2 = ((i_reg_211 == select_ln212_reg_546) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_315_p2 = ((indvar_flatten_reg_178 == bound_reg_533) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_326_p2 = ((ef_reg_200 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_457_p2 = ((dim_reg_234 == 9'd300) ? 1'b1 : 1'b0);

assign layer_cast_fu_245_p1 = layer;

assign mul_i_fu_266_p0 = layer_cast_reg_515;

assign mul_i_fu_266_p1 = 7'd13;

assign mul_ln215_fu_445_p0 = mul_ln215_fu_445_p00;

assign mul_ln215_fu_445_p00 = add3_fu_436_p2;

assign mul_ln215_fu_445_p1 = 15'd300;

assign p_cast_fu_261_p1 = empty_reg_167;

assign p_mid1_fu_368_p2 = (p_shl_mid1_fu_360_p3 - trunc_ln212_1_fu_352_p1);

assign p_shl2_fu_274_p3 = {{num_of_edges}, {2'd0}};

assign p_shl_fu_301_p3 = {{empty_99_fu_297_p1}, {2'd0}};

assign p_shl_mid1_fu_360_p3 = {{empty_103_fu_356_p1}, {2'd0}};

assign select_ln212_1_fu_340_p3 = ((icmp_ln213_fu_326_p2[0:0] == 1'b1) ? add_ln212_fu_320_p2 : e_reg_189);

assign select_ln212_2_fu_374_p3 = ((icmp_ln213_fu_326_p2[0:0] == 1'b1) ? p_mid1_fu_368_p2 : empty_100_fu_309_p2);

assign select_ln212_fu_332_p3 = ((icmp_ln213_fu_326_p2[0:0] == 1'b1) ? 2'd0 : ef_reg_200);

assign tmp_fu_431_p2 = (mul_i_reg_528 + addr_cast_fu_427_p1);

assign trunc_ln212_1_fu_352_p1 = add_ln212_fu_320_p2[12:0];

assign trunc_ln212_fu_293_p1 = e_reg_189[12:0];

assign zext_ln213_fu_382_p1 = select_ln212_fu_332_p3;

assign zext_ln214_fu_392_p1 = add_ln214_fu_386_p2;

assign zext_ln218_fu_486_p1 = add_ln218_fu_481_p2;

assign zext_ln703_7_fu_467_p1 = dim_reg_234;

assign zext_ln703_8_fu_476_p1 = add_ln703_7_fu_471_p2;

assign zext_ln703_fu_463_p1 = dim_reg_234;

always @ (posedge ap_clk) begin
    layer_cast_reg_515[6:3] <= 4'b0000;
end

endmodule //GIN_compute_one_graph_compute_edge_embedding
