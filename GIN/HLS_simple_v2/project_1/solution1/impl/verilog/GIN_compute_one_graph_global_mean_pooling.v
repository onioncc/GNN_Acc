// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_global_mean_pooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_nodes,
        node_embedding_V_address0,
        node_embedding_V_ce0,
        node_embedding_V_q0,
        graph_embedding_V_address1,
        graph_embedding_V_ce1,
        graph_embedding_V_we1,
        graph_embedding_V_d1
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_pp0_stage0 = 39'd4;
parameter    ap_ST_fsm_state5 = 39'd8;
parameter    ap_ST_fsm_state6 = 39'd16;
parameter    ap_ST_fsm_state7 = 39'd32;
parameter    ap_ST_fsm_state8 = 39'd64;
parameter    ap_ST_fsm_state9 = 39'd128;
parameter    ap_ST_fsm_state10 = 39'd256;
parameter    ap_ST_fsm_state11 = 39'd512;
parameter    ap_ST_fsm_state12 = 39'd1024;
parameter    ap_ST_fsm_state13 = 39'd2048;
parameter    ap_ST_fsm_state14 = 39'd4096;
parameter    ap_ST_fsm_state15 = 39'd8192;
parameter    ap_ST_fsm_state16 = 39'd16384;
parameter    ap_ST_fsm_state17 = 39'd32768;
parameter    ap_ST_fsm_state18 = 39'd65536;
parameter    ap_ST_fsm_state19 = 39'd131072;
parameter    ap_ST_fsm_state20 = 39'd262144;
parameter    ap_ST_fsm_state21 = 39'd524288;
parameter    ap_ST_fsm_state22 = 39'd1048576;
parameter    ap_ST_fsm_state23 = 39'd2097152;
parameter    ap_ST_fsm_state24 = 39'd4194304;
parameter    ap_ST_fsm_state25 = 39'd8388608;
parameter    ap_ST_fsm_state26 = 39'd16777216;
parameter    ap_ST_fsm_state27 = 39'd33554432;
parameter    ap_ST_fsm_state28 = 39'd67108864;
parameter    ap_ST_fsm_state29 = 39'd134217728;
parameter    ap_ST_fsm_state30 = 39'd268435456;
parameter    ap_ST_fsm_state31 = 39'd536870912;
parameter    ap_ST_fsm_state32 = 39'd1073741824;
parameter    ap_ST_fsm_state33 = 39'd2147483648;
parameter    ap_ST_fsm_state34 = 39'd4294967296;
parameter    ap_ST_fsm_state35 = 39'd8589934592;
parameter    ap_ST_fsm_state36 = 39'd17179869184;
parameter    ap_ST_fsm_state37 = 39'd34359738368;
parameter    ap_ST_fsm_state38 = 39'd68719476736;
parameter    ap_ST_fsm_state39 = 39'd137438953472;
parameter    ap_ST_fsm_state40 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_of_nodes;
output  [18:0] node_embedding_V_address0;
output   node_embedding_V_ce0;
input  [31:0] node_embedding_V_q0;
output  [8:0] graph_embedding_V_address1;
output   graph_embedding_V_ce1;
output   graph_embedding_V_we1;
output  [31:0] graph_embedding_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_embedding_V_ce0;
reg graph_embedding_V_ce1;
reg graph_embedding_V_we1;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] nd_reg_97;
reg   [31:0] sum_V_reg_108;
reg   [40:0] phi_mul_reg_120;
wire   [8:0] add_ln337_fu_131_p2;
reg   [8:0] add_ln337_reg_200;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln337_fu_137_p2;
wire   [63:0] zext_ln337_fu_143_p1;
reg   [63:0] zext_ln337_reg_209;
wire   [18:0] zext_ln337_1_fu_147_p1;
reg   [18:0] zext_ln337_1_reg_214;
wire   [31:0] add_ln339_fu_151_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln339_fu_161_p2;
reg   [0:0] icmp_ln339_reg_224;
wire   [40:0] add_ln703_5_fu_166_p2;
wire   [31:0] sum_V_1_fu_182_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [8:0] dim_reg_86;
wire    ap_CS_fsm_state40;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln703_fu_177_p1;
wire   [31:0] grp_fu_188_p2;
wire   [18:0] empty_90_fu_157_p1;
wire   [18:0] add_ln703_fu_172_p2;
wire    ap_CS_fsm_state5;
reg    grp_fu_188_ap_start;
wire    grp_fu_188_ap_done;
reg   [38:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

GIN_compute_one_graph_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_188_ap_start),
    .done(grp_fu_188_ap_done),
    .din0(sum_V_reg_108),
    .din1(num_of_nodes),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        dim_reg_86 <= add_ln337_reg_200;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_reg_86 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln339_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        nd_reg_97 <= add_ln339_fu_151_p2;
    end else if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        nd_reg_97 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln339_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        phi_mul_reg_120 <= add_ln703_5_fu_166_p2;
    end else if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_120 <= 41'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln339_reg_224 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_reg_108 <= sum_V_1_fu_182_p2;
    end else if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_V_reg_108 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln337_reg_200 <= add_ln337_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln339_reg_224 <= icmp_ln339_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln337_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln337_1_reg_214[8 : 0] <= zext_ln337_1_fu_147_p1[8 : 0];
        zext_ln337_reg_209[8 : 0] <= zext_ln337_fu_143_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln339_fu_161_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln337_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln337_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        graph_embedding_V_ce1 = 1'b1;
    end else begin
        graph_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        graph_embedding_V_we1 = 1'b1;
    end else begin
        graph_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_188_ap_start = 1'b1;
    end else begin
        grp_fu_188_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        node_embedding_V_ce0 = 1'b1;
    end else begin
        node_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln337_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln339_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln339_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln337_fu_131_p2 = (dim_reg_86 + 9'd1);

assign add_ln339_fu_151_p2 = (nd_reg_97 + 32'd1);

assign add_ln703_5_fu_166_p2 = (phi_mul_reg_120 + 41'd300);

assign add_ln703_fu_172_p2 = (empty_90_fu_157_p1 + zext_ln337_1_reg_214);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_90_fu_157_p1 = phi_mul_reg_120[18:0];

assign graph_embedding_V_address1 = zext_ln337_reg_209;

assign graph_embedding_V_d1 = grp_fu_188_p2;

assign icmp_ln337_fu_137_p2 = ((dim_reg_86 == 9'd300) ? 1'b1 : 1'b0);

assign icmp_ln339_fu_161_p2 = ((nd_reg_97 == num_of_nodes) ? 1'b1 : 1'b0);

assign node_embedding_V_address0 = zext_ln703_fu_177_p1;

assign sum_V_1_fu_182_p2 = (node_embedding_V_q0 + sum_V_reg_108);

assign zext_ln337_1_fu_147_p1 = dim_reg_86;

assign zext_ln337_fu_143_p1 = dim_reg_86;

assign zext_ln703_fu_177_p1 = add_ln703_fu_172_p2;

always @ (posedge ap_clk) begin
    zext_ln337_reg_209[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln337_1_reg_214[18:9] <= 10'b0000000000;
end

endmodule //GIN_compute_one_graph_global_mean_pooling
