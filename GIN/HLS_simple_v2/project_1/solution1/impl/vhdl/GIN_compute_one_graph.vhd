-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of GIN_compute_one_graph is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "GIN_compute_one_graph_GIN_compute_one_graph,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=143,HLS_SYN_DSP=0,HLS_SYN_FF=15506,HLS_SYN_LUT=26257,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_CABC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100101010111100";
    constant ap_const_lv32_4C2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100110000101100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_CABC : STD_LOGIC_VECTOR (15 downto 0) := "1100101010111100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4C2C : STD_LOGIC_VECTOR (14 downto 0) := "100110000101100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv16_12C : STD_LOGIC_VECTOR (15 downto 0) := "0000000100101100";
    constant ap_const_lv15_12C : STD_LOGIC_VECTOR (14 downto 0) := "000000100101100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal node_feature_in : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_list_in : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_attr_in : STD_LOGIC_VECTOR (63 downto 0);
    signal graph_attr : STD_LOGIC_VECTOR (63 downto 0);
    signal task_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_1_weights_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_1_bias_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_2_weights_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_2_bias_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_embedding_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_edge_embedding_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal graph_pred_linear_weight_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal graph_pred_linear_bias_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal eps_fixed : STD_LOGIC_VECTOR (63 downto 0);
    signal mlp_eps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mlp_eps_V_ce0 : STD_LOGIC;
    signal mlp_eps_V_we0 : STD_LOGIC;
    signal mlp_eps_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal graph_pred_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal graph_pred_weights_V_ce0 : STD_LOGIC;
    signal graph_pred_weights_V_we0 : STD_LOGIC;
    signal graph_pred_weights_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_embedding_table_V_ce0 : STD_LOGIC;
    signal node_embedding_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_embedding_table_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal node_embedding_table_V_ce1 : STD_LOGIC;
    signal node_embedding_table_V_we1 : STD_LOGIC;
    signal edge_embedding_table_V_ce0 : STD_LOGIC;
    signal edge_embedding_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_embedding_table_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal edge_embedding_table_V_ce1 : STD_LOGIC;
    signal edge_embedding_table_V_we1 : STD_LOGIC;
    signal node_feature_ce0 : STD_LOGIC;
    signal node_feature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_feature_ce1 : STD_LOGIC;
    signal node_feature_we1 : STD_LOGIC;
    signal edge_attr_ce0 : STD_LOGIC;
    signal edge_attr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_attr_ce1 : STD_LOGIC;
    signal edge_attr_we1 : STD_LOGIC;
    signal edge_list_ce0 : STD_LOGIC;
    signal edge_list_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_list_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal edge_list_ce1 : STD_LOGIC;
    signal edge_list_we1 : STD_LOGIC;
    signal edge_list_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_embedding_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal node_embedding_V_ce0 : STD_LOGIC;
    signal node_embedding_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_embedding_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal node_embedding_V_ce1 : STD_LOGIC;
    signal node_embedding_V_we1 : STD_LOGIC;
    signal node_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal graph_embedding_V_ce0 : STD_LOGIC;
    signal graph_embedding_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal graph_embedding_V_ce1 : STD_LOGIC;
    signal graph_embedding_V_we1 : STD_LOGIC;
    signal graph_pred_bias_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal graph_pred_bias_V_ce0 : STD_LOGIC;
    signal graph_pred_bias_V_we0 : STD_LOGIC;
    signal graph_pred_bias_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln397_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln403_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln408_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln408_reg_1080_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln414_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1125_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dim_in_reg_476 : STD_LOGIC_VECTOR (8 downto 0);
    signal dim_in_reg_476_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_reg_488 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal dim_reg_510 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten7_reg_521 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_4_reg_532 : STD_LOGIC_VECTOR (6 downto 0);
    signal dim_1_reg_543 : STD_LOGIC_VECTOR (8 downto 0);
    signal graph_pred_linear_bias_fixed_read_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal graph_pred_linear_weight_fixed_read_reg_958 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_edge_embedding_fixed_read_reg_963 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_embedding_fixed_read_reg_968 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_2_bias_fixed_read_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_2_weights_fixed_read_reg_978 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_1_bias_fixed_read_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal gnn_node_mlp_1_weights_fixed_read_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_read_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal graph_attr_read_reg_998 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_attr_in_read_reg_1003 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_list_in_read_reg_1008 : STD_LOGIC_VECTOR (63 downto 0);
    signal node_feature_in_read_reg_1013 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_reg_1018 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln397_fu_676_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln397_reg_1024 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln397_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln397_reg_1029_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_read_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_7_reg_1044 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_6_read_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln403_fu_732_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln403_reg_1055 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln403_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_reg_1060_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_7_read_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln408_1_fu_769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln408_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln408_reg_1080_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln408_fu_793_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln408_reg_1084 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln408_reg_1084_pp2_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln408_1_fu_801_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln408_1_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln409_fu_813_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_addr_8_read_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln414_1_fu_846_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state42_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln414_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1125_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln414_fu_870_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln414_reg_1129 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln414_reg_1129_pp3_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln414_1_fu_878_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_1_reg_1134 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln415_fu_890_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_addr_9_read_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_nodes_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_edges_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_1_fu_923_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer_1_reg_1179 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state42 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal grp_compute_CONV_layer_fu_566_ap_start : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_ap_done : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_ap_idle : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_ap_ready : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_edge_embedding_table_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_compute_CONV_layer_fu_566_edge_embedding_table_V_ce0 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_edge_attr_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_compute_CONV_layer_fu_566_edge_attr_ce0 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_edge_list_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_CONV_layer_fu_566_edge_list_ce0 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_edge_list_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute_CONV_layer_fu_566_edge_list_ce1 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_ce0 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_ce1 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_we1 : STD_LOGIC;
    signal grp_compute_CONV_layer_fu_566_node_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_CONV_layer_fu_566_mlp_eps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_compute_CONV_layer_fu_566_mlp_eps_V_ce0 : STD_LOGIC;
    signal grp_load_graph_fu_604_ap_start : STD_LOGIC;
    signal grp_load_graph_fu_604_ap_done : STD_LOGIC;
    signal grp_load_graph_fu_604_ap_idle : STD_LOGIC;
    signal grp_load_graph_fu_604_ap_ready : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_load_graph_fu_604_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_load_graph_fu_604_node_feature_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_load_graph_fu_604_node_feature_ce1 : STD_LOGIC;
    signal grp_load_graph_fu_604_node_feature_we1 : STD_LOGIC;
    signal grp_load_graph_fu_604_node_feature_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_graph_fu_604_edge_attr_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load_graph_fu_604_edge_attr_ce1 : STD_LOGIC;
    signal grp_load_graph_fu_604_edge_attr_we1 : STD_LOGIC;
    signal grp_load_graph_fu_604_edge_attr_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_graph_fu_604_edge_list_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_load_graph_fu_604_edge_list_ce1 : STD_LOGIC;
    signal grp_load_graph_fu_604_edge_list_we1 : STD_LOGIC;
    signal grp_load_graph_fu_604_edge_list_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_global_mean_pooling_fu_621_ap_start : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_ap_done : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_ap_idle : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_ap_ready : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_node_embedding_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_global_mean_pooling_fu_621_node_embedding_V_ce0 : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_graph_embedding_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_global_mean_pooling_fu_621_graph_embedding_V_ce1 : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_graph_embedding_V_we1 : STD_LOGIC;
    signal grp_global_mean_pooling_fu_621_graph_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_node_embedding_fu_630_ap_start : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_ap_done : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_ap_idle : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_ap_ready : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_node_embedding_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_compute_node_embedding_fu_630_node_embedding_V_ce0 : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_node_embedding_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_compute_node_embedding_fu_630_node_embedding_V_ce1 : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_node_embedding_V_we1 : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_node_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_node_embedding_fu_630_node_embedding_table_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_node_embedding_fu_630_node_embedding_table_V_ce0 : STD_LOGIC;
    signal grp_compute_node_embedding_fu_630_node_feature_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_compute_node_embedding_fu_630_node_feature_ce0 : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_ap_start : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_ap_done : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_ap_idle : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_ap_ready : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_graph_embedding_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_global_graph_prediction_fu_643_graph_embedding_V_ce0 : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_graph_pred_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_global_graph_prediction_fu_643_graph_pred_weights_V_ce0 : STD_LOGIC;
    signal grp_global_graph_prediction_fu_643_graph_pred_bias_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_global_graph_prediction_fu_643_graph_pred_bias_V_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_468_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_dim_in_phi_fu_480_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_i_3_phi_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_4_phi_fu_536_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_reg_554 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_compute_CONV_layer_fu_566_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln481_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_graph_fu_604_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_global_mean_pooling_fu_621_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_compute_node_embedding_fu_630_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_global_graph_prediction_fu_643_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_cast_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dim_in_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_1_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln416_1_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln397_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln402_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln403_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln408_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln414_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln469_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_656_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_fu_693_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln2_fu_713_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_fu_749_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln409_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln408_fu_781_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_935_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln4_fu_826_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln415_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln414_fu_858_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_944_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln5_fu_903_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_935_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_935_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_935_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_944_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_944_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_944_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_935_ce : STD_LOGIC;
    signal grp_fu_944_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_935_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_935_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_944_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_944_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_compute_CONV_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
        num_of_edges : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        gnn_node_mlp_1_weights_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_1_bias_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_2_weights_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_2_bias_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
        edge_embedding_table_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        edge_embedding_table_V_ce0 : OUT STD_LOGIC;
        edge_embedding_table_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_attr_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        edge_attr_ce0 : OUT STD_LOGIC;
        edge_attr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_list_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        edge_list_ce0 : OUT STD_LOGIC;
        edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_list_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        edge_list_ce1 : OUT STD_LOGIC;
        edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        node_embedding_V_ce0 : OUT STD_LOGIC;
        node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        node_embedding_V_ce1 : OUT STD_LOGIC;
        node_embedding_V_we1 : OUT STD_LOGIC;
        node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mlp_eps_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        mlp_eps_V_ce0 : OUT STD_LOGIC;
        mlp_eps_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_load_graph IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        node_feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
        edge_list_in : IN STD_LOGIC_VECTOR (63 downto 0);
        edge_attr_in : IN STD_LOGIC_VECTOR (63 downto 0);
        num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
        num_of_edges : IN STD_LOGIC_VECTOR (31 downto 0);
        node_feature_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        node_feature_ce1 : OUT STD_LOGIC;
        node_feature_we1 : OUT STD_LOGIC;
        node_feature_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        edge_attr_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        edge_attr_ce1 : OUT STD_LOGIC;
        edge_attr_we1 : OUT STD_LOGIC;
        edge_attr_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        edge_list_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        edge_list_ce1 : OUT STD_LOGIC;
        edge_list_we1 : OUT STD_LOGIC;
        edge_list_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_global_mean_pooling IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        node_embedding_V_ce0 : OUT STD_LOGIC;
        node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        graph_embedding_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        graph_embedding_V_ce1 : OUT STD_LOGIC;
        graph_embedding_V_we1 : OUT STD_LOGIC;
        graph_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_node_embedding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        node_embedding_V_ce0 : OUT STD_LOGIC;
        node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        node_embedding_V_ce1 : OUT STD_LOGIC;
        node_embedding_V_we1 : OUT STD_LOGIC;
        node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_table_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        node_embedding_table_V_ce0 : OUT STD_LOGIC;
        node_embedding_table_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_feature_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        node_feature_ce0 : OUT STD_LOGIC;
        node_feature_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_global_graph_prediction IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        d_out : IN STD_LOGIC_VECTOR (63 downto 0);
        graph_embedding_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        graph_embedding_V_ce0 : OUT STD_LOGIC;
        graph_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        graph_pred_weights_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        graph_pred_weights_V_ce0 : OUT STD_LOGIC;
        graph_pred_weights_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        graph_pred_bias_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        graph_pred_bias_V_ce0 : OUT STD_LOGIC;
        graph_pred_bias_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_8ns_10ns_9ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_7ns_10ns_9ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component GIN_compute_one_graph_mlp_eps_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_graph_pred_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_node_embedding_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_edge_embedding_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_node_feature IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_edge_attr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_edge_list IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_node_embedding_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_graph_embedding_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_graph_pred_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        node_feature_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        edge_list_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        edge_attr_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        graph_attr : OUT STD_LOGIC_VECTOR (63 downto 0);
        task_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_1_weights_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_1_bias_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_2_weights_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_mlp_2_bias_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_node_embedding_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        gnn_edge_embedding_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        graph_pred_linear_weight_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        graph_pred_linear_bias_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        eps_fixed : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component GIN_compute_one_graph_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mlp_eps_V_U : component GIN_compute_one_graph_mlp_eps_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mlp_eps_V_address0,
        ce0 => mlp_eps_V_ce0,
        we0 => mlp_eps_V_we0,
        d0 => mem_addr_read_reg_1033,
        q0 => mlp_eps_V_q0);

    graph_pred_weights_V_U : component GIN_compute_one_graph_graph_pred_weights_V
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => graph_pred_weights_V_address0,
        ce0 => graph_pred_weights_V_ce0,
        we0 => graph_pred_weights_V_we0,
        d0 => mem_addr_7_read_reg_1064,
        q0 => graph_pred_weights_V_q0);

    node_embedding_table_V_U : component GIN_compute_one_graph_node_embedding_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 51900,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_node_embedding_fu_630_node_embedding_table_V_address0,
        ce0 => node_embedding_table_V_ce0,
        q0 => node_embedding_table_V_q0,
        address1 => node_embedding_table_V_address1,
        ce1 => node_embedding_table_V_ce1,
        we1 => node_embedding_table_V_we1,
        d1 => mem_addr_8_read_reg_1109);

    edge_embedding_table_V_U : component GIN_compute_one_graph_edge_embedding_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 19500,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_CONV_layer_fu_566_edge_embedding_table_V_address0,
        ce0 => edge_embedding_table_V_ce0,
        q0 => edge_embedding_table_V_q0,
        address1 => edge_embedding_table_V_address1,
        ce1 => edge_embedding_table_V_ce1,
        we1 => edge_embedding_table_V_we1,
        d1 => mem_addr_9_read_reg_1154);

    node_feature_U : component GIN_compute_one_graph_node_feature
    generic map (
        DataWidth => 32,
        AddressRange => 9000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_node_embedding_fu_630_node_feature_address0,
        ce0 => node_feature_ce0,
        q0 => node_feature_q0,
        address1 => grp_load_graph_fu_604_node_feature_address1,
        ce1 => node_feature_ce1,
        we1 => node_feature_we1,
        d1 => grp_load_graph_fu_604_node_feature_d1);

    edge_attr_U : component GIN_compute_one_graph_edge_attr
    generic map (
        DataWidth => 32,
        AddressRange => 6000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_CONV_layer_fu_566_edge_attr_address0,
        ce0 => edge_attr_ce0,
        q0 => edge_attr_q0,
        address1 => grp_load_graph_fu_604_edge_attr_address1,
        ce1 => edge_attr_ce1,
        we1 => edge_attr_we1,
        d1 => grp_load_graph_fu_604_edge_attr_d1);

    edge_list_U : component GIN_compute_one_graph_edge_list
    generic map (
        DataWidth => 32,
        AddressRange => 4000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_compute_CONV_layer_fu_566_edge_list_address0,
        ce0 => edge_list_ce0,
        q0 => edge_list_q0,
        address1 => edge_list_address1,
        ce1 => edge_list_ce1,
        we1 => edge_list_we1,
        d1 => grp_load_graph_fu_604_edge_list_d1,
        q1 => edge_list_q1);

    node_embedding_V_U : component GIN_compute_one_graph_node_embedding_V
    generic map (
        DataWidth => 32,
        AddressRange => 300000,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => node_embedding_V_address0,
        ce0 => node_embedding_V_ce0,
        q0 => node_embedding_V_q0,
        address1 => node_embedding_V_address1,
        ce1 => node_embedding_V_ce1,
        we1 => node_embedding_V_we1,
        d1 => node_embedding_V_d1);

    graph_embedding_V_U : component GIN_compute_one_graph_graph_embedding_V
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_global_graph_prediction_fu_643_graph_embedding_V_address0,
        ce0 => graph_embedding_V_ce0,
        q0 => graph_embedding_V_q0,
        address1 => grp_global_mean_pooling_fu_621_graph_embedding_V_address1,
        ce1 => graph_embedding_V_ce1,
        we1 => graph_embedding_V_we1,
        d1 => grp_global_mean_pooling_fu_621_graph_embedding_V_d1);

    graph_pred_bias_V_U : component GIN_compute_one_graph_graph_pred_bias_V
    generic map (
        DataWidth => 32,
        AddressRange => 1,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => graph_pred_bias_V_address0,
        ce0 => graph_pred_bias_V_ce0,
        we0 => graph_pred_bias_V_we0,
        d0 => mem_addr_6_read_reg_1050,
        q0 => graph_pred_bias_V_q0);

    control_s_axi_U : component GIN_compute_one_graph_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        node_feature_in => node_feature_in,
        edge_list_in => edge_list_in,
        edge_attr_in => edge_attr_in,
        graph_attr => graph_attr,
        task_r => task_r,
        gnn_node_mlp_1_weights_fixed => gnn_node_mlp_1_weights_fixed,
        gnn_node_mlp_1_bias_fixed => gnn_node_mlp_1_bias_fixed,
        gnn_node_mlp_2_weights_fixed => gnn_node_mlp_2_weights_fixed,
        gnn_node_mlp_2_bias_fixed => gnn_node_mlp_2_bias_fixed,
        gnn_node_embedding_fixed => gnn_node_embedding_fixed,
        gnn_edge_embedding_fixed => gnn_edge_embedding_fixed,
        graph_pred_linear_weight_fixed => graph_pred_linear_weight_fixed,
        graph_pred_linear_bias_fixed => graph_pred_linear_bias_fixed,
        eps_fixed => eps_fixed,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mem_m_axi_U : component GIN_compute_one_graph_mem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => mem_ARID,
        I_ARLEN => mem_ARLEN,
        I_ARSIZE => mem_ARSIZE,
        I_ARLOCK => mem_ARLOCK,
        I_ARCACHE => mem_ARCACHE,
        I_ARQOS => mem_ARQOS,
        I_ARPROT => mem_ARPROT,
        I_ARUSER => mem_ARUSER,
        I_ARBURST => mem_ARBURST,
        I_ARREGION => mem_ARREGION,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => grp_global_graph_prediction_fu_643_m_axi_mem_AWADDR,
        I_AWID => grp_global_graph_prediction_fu_643_m_axi_mem_AWID,
        I_AWLEN => grp_global_graph_prediction_fu_643_m_axi_mem_AWLEN,
        I_AWSIZE => grp_global_graph_prediction_fu_643_m_axi_mem_AWSIZE,
        I_AWLOCK => grp_global_graph_prediction_fu_643_m_axi_mem_AWLOCK,
        I_AWCACHE => grp_global_graph_prediction_fu_643_m_axi_mem_AWCACHE,
        I_AWQOS => grp_global_graph_prediction_fu_643_m_axi_mem_AWQOS,
        I_AWPROT => grp_global_graph_prediction_fu_643_m_axi_mem_AWPROT,
        I_AWUSER => grp_global_graph_prediction_fu_643_m_axi_mem_AWUSER,
        I_AWBURST => grp_global_graph_prediction_fu_643_m_axi_mem_AWBURST,
        I_AWREGION => grp_global_graph_prediction_fu_643_m_axi_mem_AWREGION,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => grp_global_graph_prediction_fu_643_m_axi_mem_WDATA,
        I_WID => grp_global_graph_prediction_fu_643_m_axi_mem_WID,
        I_WUSER => grp_global_graph_prediction_fu_643_m_axi_mem_WUSER,
        I_WLAST => grp_global_graph_prediction_fu_643_m_axi_mem_WLAST,
        I_WSTRB => grp_global_graph_prediction_fu_643_m_axi_mem_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    grp_compute_CONV_layer_fu_566 : component GIN_compute_one_graph_compute_CONV_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compute_CONV_layer_fu_566_ap_start,
        ap_done => grp_compute_CONV_layer_fu_566_ap_done,
        ap_idle => grp_compute_CONV_layer_fu_566_ap_idle,
        ap_ready => grp_compute_CONV_layer_fu_566_ap_ready,
        m_axi_mem_AWVALID => grp_compute_CONV_layer_fu_566_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => ap_const_logic_0,
        m_axi_mem_AWADDR => grp_compute_CONV_layer_fu_566_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_compute_CONV_layer_fu_566_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_compute_CONV_layer_fu_566_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_compute_CONV_layer_fu_566_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_compute_CONV_layer_fu_566_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_compute_CONV_layer_fu_566_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_compute_CONV_layer_fu_566_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_compute_CONV_layer_fu_566_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_compute_CONV_layer_fu_566_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_compute_CONV_layer_fu_566_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_compute_CONV_layer_fu_566_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_compute_CONV_layer_fu_566_m_axi_mem_WVALID,
        m_axi_mem_WREADY => ap_const_logic_0,
        m_axi_mem_WDATA => grp_compute_CONV_layer_fu_566_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_compute_CONV_layer_fu_566_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_compute_CONV_layer_fu_566_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_compute_CONV_layer_fu_566_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_compute_CONV_layer_fu_566_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_compute_CONV_layer_fu_566_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_compute_CONV_layer_fu_566_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_compute_CONV_layer_fu_566_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_compute_CONV_layer_fu_566_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_compute_CONV_layer_fu_566_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_compute_CONV_layer_fu_566_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_compute_CONV_layer_fu_566_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_compute_CONV_layer_fu_566_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_compute_CONV_layer_fu_566_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_compute_CONV_layer_fu_566_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_compute_CONV_layer_fu_566_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_compute_CONV_layer_fu_566_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_compute_CONV_layer_fu_566_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => mem_RLAST,
        m_axi_mem_RID => mem_RID,
        m_axi_mem_RUSER => mem_RUSER,
        m_axi_mem_RRESP => mem_RRESP,
        m_axi_mem_BVALID => ap_const_logic_0,
        m_axi_mem_BREADY => grp_compute_CONV_layer_fu_566_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        num_of_nodes => num_of_nodes_reg_1165,
        num_of_edges => num_of_edges_reg_1173,
        layer => layer_reg_554,
        gnn_node_mlp_1_weights_fixed => gnn_node_mlp_1_weights_fixed_read_reg_988,
        gnn_node_mlp_1_bias_fixed => gnn_node_mlp_1_bias_fixed_read_reg_983,
        gnn_node_mlp_2_weights_fixed => gnn_node_mlp_2_weights_fixed_read_reg_978,
        gnn_node_mlp_2_bias_fixed => gnn_node_mlp_2_bias_fixed_read_reg_973,
        edge_embedding_table_V_address0 => grp_compute_CONV_layer_fu_566_edge_embedding_table_V_address0,
        edge_embedding_table_V_ce0 => grp_compute_CONV_layer_fu_566_edge_embedding_table_V_ce0,
        edge_embedding_table_V_q0 => edge_embedding_table_V_q0,
        edge_attr_address0 => grp_compute_CONV_layer_fu_566_edge_attr_address0,
        edge_attr_ce0 => grp_compute_CONV_layer_fu_566_edge_attr_ce0,
        edge_attr_q0 => edge_attr_q0,
        edge_list_address0 => grp_compute_CONV_layer_fu_566_edge_list_address0,
        edge_list_ce0 => grp_compute_CONV_layer_fu_566_edge_list_ce0,
        edge_list_q0 => edge_list_q0,
        edge_list_address1 => grp_compute_CONV_layer_fu_566_edge_list_address1,
        edge_list_ce1 => grp_compute_CONV_layer_fu_566_edge_list_ce1,
        edge_list_q1 => edge_list_q1,
        node_embedding_V_address0 => grp_compute_CONV_layer_fu_566_node_embedding_V_address0,
        node_embedding_V_ce0 => grp_compute_CONV_layer_fu_566_node_embedding_V_ce0,
        node_embedding_V_q0 => node_embedding_V_q0,
        node_embedding_V_address1 => grp_compute_CONV_layer_fu_566_node_embedding_V_address1,
        node_embedding_V_ce1 => grp_compute_CONV_layer_fu_566_node_embedding_V_ce1,
        node_embedding_V_we1 => grp_compute_CONV_layer_fu_566_node_embedding_V_we1,
        node_embedding_V_d1 => grp_compute_CONV_layer_fu_566_node_embedding_V_d1,
        mlp_eps_V_address0 => grp_compute_CONV_layer_fu_566_mlp_eps_V_address0,
        mlp_eps_V_ce0 => grp_compute_CONV_layer_fu_566_mlp_eps_V_ce0,
        mlp_eps_V_q0 => mlp_eps_V_q0);

    grp_load_graph_fu_604 : component GIN_compute_one_graph_load_graph
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_load_graph_fu_604_ap_start,
        ap_done => grp_load_graph_fu_604_ap_done,
        ap_idle => grp_load_graph_fu_604_ap_idle,
        ap_ready => grp_load_graph_fu_604_ap_ready,
        m_axi_mem_AWVALID => grp_load_graph_fu_604_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => ap_const_logic_0,
        m_axi_mem_AWADDR => grp_load_graph_fu_604_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_load_graph_fu_604_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_load_graph_fu_604_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_load_graph_fu_604_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_load_graph_fu_604_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_load_graph_fu_604_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_load_graph_fu_604_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_load_graph_fu_604_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_load_graph_fu_604_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_load_graph_fu_604_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_load_graph_fu_604_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_load_graph_fu_604_m_axi_mem_WVALID,
        m_axi_mem_WREADY => ap_const_logic_0,
        m_axi_mem_WDATA => grp_load_graph_fu_604_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_load_graph_fu_604_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_load_graph_fu_604_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_load_graph_fu_604_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_load_graph_fu_604_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_load_graph_fu_604_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_load_graph_fu_604_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_load_graph_fu_604_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_load_graph_fu_604_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_load_graph_fu_604_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_load_graph_fu_604_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_load_graph_fu_604_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_load_graph_fu_604_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_load_graph_fu_604_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_load_graph_fu_604_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_load_graph_fu_604_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_load_graph_fu_604_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_load_graph_fu_604_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => mem_RLAST,
        m_axi_mem_RID => mem_RID,
        m_axi_mem_RUSER => mem_RUSER,
        m_axi_mem_RRESP => mem_RRESP,
        m_axi_mem_BVALID => ap_const_logic_0,
        m_axi_mem_BREADY => grp_load_graph_fu_604_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        node_feature_in => node_feature_in_read_reg_1013,
        edge_list_in => edge_list_in_read_reg_1008,
        edge_attr_in => edge_attr_in_read_reg_1003,
        num_of_nodes => num_of_nodes_reg_1165,
        num_of_edges => num_of_edges_reg_1173,
        node_feature_address1 => grp_load_graph_fu_604_node_feature_address1,
        node_feature_ce1 => grp_load_graph_fu_604_node_feature_ce1,
        node_feature_we1 => grp_load_graph_fu_604_node_feature_we1,
        node_feature_d1 => grp_load_graph_fu_604_node_feature_d1,
        edge_attr_address1 => grp_load_graph_fu_604_edge_attr_address1,
        edge_attr_ce1 => grp_load_graph_fu_604_edge_attr_ce1,
        edge_attr_we1 => grp_load_graph_fu_604_edge_attr_we1,
        edge_attr_d1 => grp_load_graph_fu_604_edge_attr_d1,
        edge_list_address1 => grp_load_graph_fu_604_edge_list_address1,
        edge_list_ce1 => grp_load_graph_fu_604_edge_list_ce1,
        edge_list_we1 => grp_load_graph_fu_604_edge_list_we1,
        edge_list_d1 => grp_load_graph_fu_604_edge_list_d1);

    grp_global_mean_pooling_fu_621 : component GIN_compute_one_graph_global_mean_pooling
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_global_mean_pooling_fu_621_ap_start,
        ap_done => grp_global_mean_pooling_fu_621_ap_done,
        ap_idle => grp_global_mean_pooling_fu_621_ap_idle,
        ap_ready => grp_global_mean_pooling_fu_621_ap_ready,
        num_of_nodes => num_of_nodes_reg_1165,
        node_embedding_V_address0 => grp_global_mean_pooling_fu_621_node_embedding_V_address0,
        node_embedding_V_ce0 => grp_global_mean_pooling_fu_621_node_embedding_V_ce0,
        node_embedding_V_q0 => node_embedding_V_q0,
        graph_embedding_V_address1 => grp_global_mean_pooling_fu_621_graph_embedding_V_address1,
        graph_embedding_V_ce1 => grp_global_mean_pooling_fu_621_graph_embedding_V_ce1,
        graph_embedding_V_we1 => grp_global_mean_pooling_fu_621_graph_embedding_V_we1,
        graph_embedding_V_d1 => grp_global_mean_pooling_fu_621_graph_embedding_V_d1);

    grp_compute_node_embedding_fu_630 : component GIN_compute_one_graph_compute_node_embedding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compute_node_embedding_fu_630_ap_start,
        ap_done => grp_compute_node_embedding_fu_630_ap_done,
        ap_idle => grp_compute_node_embedding_fu_630_ap_idle,
        ap_ready => grp_compute_node_embedding_fu_630_ap_ready,
        num_of_nodes => num_of_nodes_reg_1165,
        node_embedding_V_address0 => grp_compute_node_embedding_fu_630_node_embedding_V_address0,
        node_embedding_V_ce0 => grp_compute_node_embedding_fu_630_node_embedding_V_ce0,
        node_embedding_V_q0 => node_embedding_V_q0,
        node_embedding_V_address1 => grp_compute_node_embedding_fu_630_node_embedding_V_address1,
        node_embedding_V_ce1 => grp_compute_node_embedding_fu_630_node_embedding_V_ce1,
        node_embedding_V_we1 => grp_compute_node_embedding_fu_630_node_embedding_V_we1,
        node_embedding_V_d1 => grp_compute_node_embedding_fu_630_node_embedding_V_d1,
        node_embedding_table_V_address0 => grp_compute_node_embedding_fu_630_node_embedding_table_V_address0,
        node_embedding_table_V_ce0 => grp_compute_node_embedding_fu_630_node_embedding_table_V_ce0,
        node_embedding_table_V_q0 => node_embedding_table_V_q0,
        node_feature_address0 => grp_compute_node_embedding_fu_630_node_feature_address0,
        node_feature_ce0 => grp_compute_node_embedding_fu_630_node_feature_ce0,
        node_feature_q0 => node_feature_q0);

    grp_global_graph_prediction_fu_643 : component GIN_compute_one_graph_global_graph_prediction
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_global_graph_prediction_fu_643_ap_start,
        ap_done => grp_global_graph_prediction_fu_643_ap_done,
        ap_idle => grp_global_graph_prediction_fu_643_ap_idle,
        ap_ready => grp_global_graph_prediction_fu_643_ap_ready,
        m_axi_mem_AWVALID => grp_global_graph_prediction_fu_643_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => mem_AWREADY,
        m_axi_mem_AWADDR => grp_global_graph_prediction_fu_643_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_global_graph_prediction_fu_643_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_global_graph_prediction_fu_643_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_global_graph_prediction_fu_643_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_global_graph_prediction_fu_643_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_global_graph_prediction_fu_643_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_global_graph_prediction_fu_643_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_global_graph_prediction_fu_643_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_global_graph_prediction_fu_643_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_global_graph_prediction_fu_643_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_global_graph_prediction_fu_643_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_global_graph_prediction_fu_643_m_axi_mem_WVALID,
        m_axi_mem_WREADY => mem_WREADY,
        m_axi_mem_WDATA => grp_global_graph_prediction_fu_643_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_global_graph_prediction_fu_643_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_global_graph_prediction_fu_643_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_global_graph_prediction_fu_643_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_global_graph_prediction_fu_643_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_global_graph_prediction_fu_643_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => ap_const_logic_0,
        m_axi_mem_ARADDR => grp_global_graph_prediction_fu_643_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_global_graph_prediction_fu_643_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_global_graph_prediction_fu_643_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_global_graph_prediction_fu_643_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_global_graph_prediction_fu_643_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_global_graph_prediction_fu_643_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_global_graph_prediction_fu_643_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_global_graph_prediction_fu_643_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_global_graph_prediction_fu_643_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_global_graph_prediction_fu_643_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_global_graph_prediction_fu_643_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => ap_const_logic_0,
        m_axi_mem_RREADY => grp_global_graph_prediction_fu_643_m_axi_mem_RREADY,
        m_axi_mem_RDATA => ap_const_lv32_0,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => mem_BVALID,
        m_axi_mem_BREADY => grp_global_graph_prediction_fu_643_m_axi_mem_BREADY,
        m_axi_mem_BRESP => mem_BRESP,
        m_axi_mem_BID => mem_BID,
        m_axi_mem_BUSER => mem_BUSER,
        d_out => task_read_reg_993,
        graph_embedding_V_address0 => grp_global_graph_prediction_fu_643_graph_embedding_V_address0,
        graph_embedding_V_ce0 => grp_global_graph_prediction_fu_643_graph_embedding_V_ce0,
        graph_embedding_V_q0 => graph_embedding_V_q0,
        graph_pred_weights_V_address0 => grp_global_graph_prediction_fu_643_graph_pred_weights_V_address0,
        graph_pred_weights_V_ce0 => grp_global_graph_prediction_fu_643_graph_pred_weights_V_ce0,
        graph_pred_weights_V_q0 => graph_pred_weights_V_q0,
        graph_pred_bias_V_address0 => grp_global_graph_prediction_fu_643_graph_pred_bias_V_address0,
        graph_pred_bias_V_ce0 => grp_global_graph_prediction_fu_643_graph_pred_bias_V_ce0,
        graph_pred_bias_V_q0 => graph_pred_bias_V_q0);

    mac_muladd_8ns_10ns_9ns_16_4_1_U634 : component GIN_compute_one_graph_mac_muladd_8ns_10ns_9ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_935_p0,
        din1 => grp_fu_935_p1,
        din2 => grp_fu_935_p2,
        ce => grp_fu_935_ce,
        dout => grp_fu_935_p3);

    mac_muladd_7ns_10ns_9ns_15_4_1_U635 : component GIN_compute_one_graph_mac_muladd_7ns_10ns_9ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_944_p0,
        din1 => grp_fu_944_p1,
        din2 => grp_fu_944_p2,
        ce => grp_fu_944_ce,
        dout => grp_fu_944_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state42);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_CONV_layer_fu_566_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compute_CONV_layer_fu_566_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0))) then 
                    grp_compute_CONV_layer_fu_566_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_CONV_layer_fu_566_ap_ready = ap_const_logic_1)) then 
                    grp_compute_CONV_layer_fu_566_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_node_embedding_fu_630_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compute_node_embedding_fu_630_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_compute_node_embedding_fu_630_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_node_embedding_fu_630_ap_ready = ap_const_logic_1)) then 
                    grp_compute_node_embedding_fu_630_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_global_graph_prediction_fu_643_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_global_graph_prediction_fu_643_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    grp_global_graph_prediction_fu_643_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_global_graph_prediction_fu_643_ap_ready = ap_const_logic_1)) then 
                    grp_global_graph_prediction_fu_643_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_global_mean_pooling_fu_621_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_global_mean_pooling_fu_621_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_1))) then 
                    grp_global_mean_pooling_fu_621_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_global_mean_pooling_fu_621_ap_ready = ap_const_logic_1)) then 
                    grp_global_mean_pooling_fu_621_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_graph_fu_604_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_load_graph_fu_604_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    grp_load_graph_fu_604_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_graph_fu_604_ap_ready = ap_const_logic_1)) then 
                    grp_load_graph_fu_604_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_1_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                dim_1_reg_543 <= add_ln415_fu_890_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                dim_1_reg_543 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    dim_in_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                dim_in_reg_476 <= ap_const_lv9_0;
            elsif (((icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                dim_in_reg_476 <= add_ln403_reg_1055;
            end if; 
        end if;
    end process;

    dim_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_775_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                dim_reg_510 <= add_ln409_fu_813_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                dim_reg_510 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_3_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln408_reg_1080 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_3_reg_499 <= select_ln408_1_reg_1089;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_3_reg_499 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_4_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln414_reg_1125 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_4_reg_532 <= select_ln414_1_reg_1134;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_4_reg_532 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_464 <= ap_const_lv3_0;
            elsif (((icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_464 <= add_ln397_reg_1024;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten7_reg_521 <= add_ln414_1_fu_846_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                indvar_flatten7_reg_521 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_775_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_488 <= add_ln408_1_fu_769_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten_reg_488 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    layer_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_compute_CONV_layer_fu_566_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                layer_reg_554 <= layer_1_reg_1179;
            elsif (((grp_compute_node_embedding_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                layer_reg_554 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln397_reg_1024 <= add_ln397_fu_676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln403_reg_1055 <= add_ln403_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                dim_in_reg_476_pp1_iter1_reg <= dim_in_reg_476;
                icmp_ln403_reg_1060 <= icmp_ln403_fu_738_p2;
                icmp_ln403_reg_1060_pp1_iter1_reg <= icmp_ln403_reg_1060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                edge_attr_in_read_reg_1003 <= edge_attr_in;
                edge_list_in_read_reg_1008 <= edge_list_in;
                gnn_edge_embedding_fixed_read_reg_963 <= gnn_edge_embedding_fixed;
                gnn_node_embedding_fixed_read_reg_968 <= gnn_node_embedding_fixed;
                gnn_node_mlp_1_bias_fixed_read_reg_983 <= gnn_node_mlp_1_bias_fixed;
                gnn_node_mlp_1_weights_fixed_read_reg_988 <= gnn_node_mlp_1_weights_fixed;
                gnn_node_mlp_2_bias_fixed_read_reg_973 <= gnn_node_mlp_2_bias_fixed;
                gnn_node_mlp_2_weights_fixed_read_reg_978 <= gnn_node_mlp_2_weights_fixed;
                graph_attr_read_reg_998 <= graph_attr;
                graph_pred_linear_bias_fixed_read_reg_953 <= graph_pred_linear_bias_fixed;
                graph_pred_linear_weight_fixed_read_reg_958 <= graph_pred_linear_weight_fixed;
                mem_addr_reg_1018 <= sext_ln397_fu_666_p1;
                node_feature_in_read_reg_1013 <= node_feature_in;
                task_read_reg_993 <= task_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_464_pp0_iter1_reg <= i_reg_464;
                icmp_ln397_reg_1029 <= icmp_ln397_fu_682_p2;
                icmp_ln397_reg_1029_pp0_iter1_reg <= icmp_ln397_reg_1029;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln408_reg_1080 <= icmp_ln408_fu_775_p2;
                icmp_ln408_reg_1080_pp2_iter1_reg <= icmp_ln408_reg_1080;
                select_ln408_reg_1084_pp2_iter1_reg <= select_ln408_reg_1084;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln408_reg_1080_pp2_iter2_reg <= icmp_ln408_reg_1080_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln414_reg_1125 <= icmp_ln414_fu_852_p2;
                icmp_ln414_reg_1125_pp3_iter1_reg <= icmp_ln414_reg_1125;
                select_ln414_reg_1129_pp3_iter1_reg <= select_ln414_reg_1129;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln414_reg_1125_pp3_iter2_reg <= icmp_ln414_reg_1125_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                layer_1_reg_1179 <= layer_1_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mem_addr_6_read_reg_1050 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                mem_addr_7_read_reg_1064 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mem_addr_7_reg_1044 <= sext_ln403_fu_722_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                mem_addr_8_read_reg_1109 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                mem_addr_9_read_reg_1154 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mem_addr_read_reg_1033 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                num_of_edges_reg_1173 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                num_of_nodes_reg_1165 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_775_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln408_1_reg_1089 <= select_ln408_1_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_fu_775_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln408_reg_1084 <= select_ln408_fu_793_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln414_1_reg_1134 <= select_ln414_1_fu_878_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_852_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln414_reg_1129 <= select_ln414_fu_870_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_enable_reg_pp1_iter1, ap_CS_fsm_state24, ap_enable_reg_pp2_iter2, ap_CS_fsm_state35, ap_enable_reg_pp3_iter2, ap_CS_fsm_state46, ap_CS_fsm_state53, ap_CS_fsm_state54, mem_ARREADY, mem_RVALID, ap_enable_reg_pp0_iter0, icmp_ln397_fu_682_p2, ap_enable_reg_pp1_iter0, icmp_ln403_fu_738_p2, ap_enable_reg_pp2_iter0, icmp_ln408_fu_775_p2, ap_enable_reg_pp3_iter0, icmp_ln414_fu_852_p2, ap_CS_fsm_state59, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3, grp_compute_CONV_layer_fu_566_ap_done, grp_load_graph_fu_604_ap_done, grp_global_mean_pooling_fu_621_ap_done, grp_compute_node_embedding_fu_630_ap_done, grp_global_graph_prediction_fu_643_ap_done, ap_CS_fsm_state58, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state63)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln397_fu_682_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln397_fu_682_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln403_fu_738_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln403_fu_738_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln408_fu_775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln408_fu_775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln414_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln414_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((grp_load_graph_fu_604_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_compute_node_embedding_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                if (((grp_compute_CONV_layer_fu_566_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((grp_global_mean_pooling_fu_621_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((grp_global_graph_prediction_fu_643_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln397_fu_676_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_468_p4) + unsigned(ap_const_lv3_1));
    add_ln403_fu_732_p2 <= std_logic_vector(unsigned(ap_phi_mux_dim_in_phi_fu_480_p4) + unsigned(ap_const_lv9_1));
    add_ln408_1_fu_769_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_488) + unsigned(ap_const_lv16_1));
    add_ln408_fu_781_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_503_p4) + unsigned(ap_const_lv8_1));
    add_ln409_fu_813_p2 <= std_logic_vector(unsigned(select_ln408_fu_793_p3) + unsigned(ap_const_lv9_1));
    add_ln414_1_fu_846_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_521) + unsigned(ap_const_lv15_1));
    add_ln414_fu_858_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_4_phi_fu_536_p4) + unsigned(ap_const_lv7_1));
    add_ln415_fu_890_p2 <= std_logic_vector(unsigned(select_ln414_fu_870_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state30 <= ap_CS_fsm(25);
    ap_CS_fsm_state35 <= ap_CS_fsm(27);
    ap_CS_fsm_state41 <= ap_CS_fsm(33);
    ap_CS_fsm_state46 <= ap_CS_fsm(35);
    ap_CS_fsm_state53 <= ap_CS_fsm(42);
    ap_CS_fsm_state54 <= ap_CS_fsm(43);
    ap_CS_fsm_state55 <= ap_CS_fsm(44);
    ap_CS_fsm_state56 <= ap_CS_fsm(45);
    ap_CS_fsm_state57 <= ap_CS_fsm(46);
    ap_CS_fsm_state58 <= ap_CS_fsm(47);
    ap_CS_fsm_state59 <= ap_CS_fsm(48);
    ap_CS_fsm_state60 <= ap_CS_fsm(49);
    ap_CS_fsm_state61 <= ap_CS_fsm(50);
    ap_CS_fsm_state62 <= ap_CS_fsm(51);
    ap_CS_fsm_state63 <= ap_CS_fsm(52);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln397_reg_1029, mem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln397_reg_1029, mem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln403_reg_1060, mem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln403_reg_1060, mem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln408_reg_1080_pp2_iter1_reg, mem_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln408_reg_1080_pp2_iter1_reg, mem_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln414_reg_1125_pp3_iter1_reg, mem_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln414_reg_1125_pp3_iter1_reg, mem_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln397_reg_1029, mem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln397_reg_1029 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(icmp_ln403_reg_1060, mem_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln403_reg_1060 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_pp2_stage0_iter2_assign_proc : process(icmp_ln408_reg_1080_pp2_iter1_reg, mem_RVALID)
    begin
                ap_block_state33_pp2_stage0_iter2 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state34_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_pp3_stage0_iter2_assign_proc : process(icmp_ln414_reg_1125_pp3_iter1_reg, mem_RVALID)
    begin
                ap_block_state44_pp3_stage0_iter2 <= ((mem_RVALID = ap_const_logic_0) and (icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state45_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln397_fu_682_p2)
    begin
        if ((icmp_ln397_fu_682_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln403_fu_738_p2)
    begin
        if ((icmp_ln403_fu_738_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(icmp_ln408_fu_775_p2)
    begin
        if ((icmp_ln408_fu_775_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state42_assign_proc : process(icmp_ln414_fu_852_p2)
    begin
        if ((icmp_ln414_fu_852_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_global_graph_prediction_fu_643_ap_done, ap_CS_fsm_state63)
    begin
        if (((grp_global_graph_prediction_fu_643_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dim_in_phi_fu_480_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln403_reg_1060, dim_in_reg_476, add_ln403_reg_1055)
    begin
        if (((icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_dim_in_phi_fu_480_p4 <= add_ln403_reg_1055;
        else 
            ap_phi_mux_dim_in_phi_fu_480_p4 <= dim_in_reg_476;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_503_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln408_reg_1080, i_3_reg_499, ap_CS_fsm_pp2_stage0, select_ln408_1_reg_1089, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln408_reg_1080 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_3_phi_fu_503_p4 <= select_ln408_1_reg_1089;
        else 
            ap_phi_mux_i_3_phi_fu_503_p4 <= i_3_reg_499;
        end if; 
    end process;


    ap_phi_mux_i_4_phi_fu_536_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln414_reg_1125, i_4_reg_532, ap_CS_fsm_pp3_stage0, select_ln414_1_reg_1134, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln414_reg_1125 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_i_4_phi_fu_536_p4 <= select_ln414_1_reg_1134;
        else 
            ap_phi_mux_i_4_phi_fu_536_p4 <= i_4_reg_532;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_468_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln397_reg_1029, i_reg_464, add_ln397_reg_1024)
    begin
        if (((icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_468_p4 <= add_ln397_reg_1024;
        else 
            ap_phi_mux_i_phi_fu_468_p4 <= i_reg_464;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_global_graph_prediction_fu_643_ap_done, ap_CS_fsm_state63)
    begin
        if (((grp_global_graph_prediction_fu_643_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dim_in_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_in_reg_476_pp1_iter1_reg),64));

    edge_attr_ce0_assign_proc : process(grp_compute_CONV_layer_fu_566_edge_attr_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            edge_attr_ce0 <= grp_compute_CONV_layer_fu_566_edge_attr_ce0;
        else 
            edge_attr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_attr_ce1_assign_proc : process(grp_load_graph_fu_604_edge_attr_ce1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            edge_attr_ce1 <= grp_load_graph_fu_604_edge_attr_ce1;
        else 
            edge_attr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_attr_we1_assign_proc : process(grp_load_graph_fu_604_edge_attr_we1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            edge_attr_we1 <= grp_load_graph_fu_604_edge_attr_we1;
        else 
            edge_attr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_table_V_address1 <= zext_ln416_1_fu_899_p1(15 - 1 downto 0);

    edge_embedding_table_V_ce0_assign_proc : process(grp_compute_CONV_layer_fu_566_edge_embedding_table_V_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            edge_embedding_table_V_ce0 <= grp_compute_CONV_layer_fu_566_edge_embedding_table_V_ce0;
        else 
            edge_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_table_V_ce1_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            edge_embedding_table_V_ce1 <= ap_const_logic_1;
        else 
            edge_embedding_table_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_table_V_we1_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln414_reg_1125_pp3_iter2_reg, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln414_reg_1125_pp3_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            edge_embedding_table_V_we1 <= ap_const_logic_1;
        else 
            edge_embedding_table_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_address1_assign_proc : process(grp_compute_CONV_layer_fu_566_edge_list_address1, grp_load_graph_fu_604_edge_list_address1, ap_CS_fsm_state60, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            edge_list_address1 <= grp_load_graph_fu_604_edge_list_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            edge_list_address1 <= grp_compute_CONV_layer_fu_566_edge_list_address1;
        else 
            edge_list_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    edge_list_ce0_assign_proc : process(grp_compute_CONV_layer_fu_566_edge_list_ce0, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            edge_list_ce0 <= grp_compute_CONV_layer_fu_566_edge_list_ce0;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(grp_compute_CONV_layer_fu_566_edge_list_ce1, grp_load_graph_fu_604_edge_list_ce1, ap_CS_fsm_state60, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            edge_list_ce1 <= grp_load_graph_fu_604_edge_list_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            edge_list_ce1 <= grp_compute_CONV_layer_fu_566_edge_list_ce1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_we1_assign_proc : process(grp_load_graph_fu_604_edge_list_we1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            edge_list_we1 <= grp_load_graph_fu_604_edge_list_we1;
        else 
            edge_list_we1 <= ap_const_logic_0;
        end if; 
    end process;


    graph_embedding_V_ce0_assign_proc : process(grp_global_graph_prediction_fu_643_graph_embedding_V_ce0, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            graph_embedding_V_ce0 <= grp_global_graph_prediction_fu_643_graph_embedding_V_ce0;
        else 
            graph_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    graph_embedding_V_ce1_assign_proc : process(grp_global_mean_pooling_fu_621_graph_embedding_V_ce1, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            graph_embedding_V_ce1 <= grp_global_mean_pooling_fu_621_graph_embedding_V_ce1;
        else 
            graph_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    graph_embedding_V_we1_assign_proc : process(grp_global_mean_pooling_fu_621_graph_embedding_V_we1, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            graph_embedding_V_we1 <= grp_global_mean_pooling_fu_621_graph_embedding_V_we1;
        else 
            graph_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    graph_pred_bias_V_address0_assign_proc : process(ap_CS_fsm_state20, grp_global_graph_prediction_fu_643_graph_pred_bias_V_address0, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            graph_pred_bias_V_address0 <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            graph_pred_bias_V_address0 <= grp_global_graph_prediction_fu_643_graph_pred_bias_V_address0;
        else 
            graph_pred_bias_V_address0 <= "X";
        end if; 
    end process;


    graph_pred_bias_V_ce0_assign_proc : process(ap_CS_fsm_state20, grp_global_graph_prediction_fu_643_graph_pred_bias_V_ce0, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            graph_pred_bias_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            graph_pred_bias_V_ce0 <= grp_global_graph_prediction_fu_643_graph_pred_bias_V_ce0;
        else 
            graph_pred_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    graph_pred_bias_V_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            graph_pred_bias_V_we0 <= ap_const_logic_1;
        else 
            graph_pred_bias_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    graph_pred_weights_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, grp_global_graph_prediction_fu_643_graph_pred_weights_V_address0, ap_CS_fsm_state63, dim_in_cast_fu_744_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            graph_pred_weights_V_address0 <= dim_in_cast_fu_744_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            graph_pred_weights_V_address0 <= grp_global_graph_prediction_fu_643_graph_pred_weights_V_address0;
        else 
            graph_pred_weights_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    graph_pred_weights_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_global_graph_prediction_fu_643_graph_pred_weights_V_ce0, ap_CS_fsm_state63)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            graph_pred_weights_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            graph_pred_weights_V_ce0 <= grp_global_graph_prediction_fu_643_graph_pred_weights_V_ce0;
        else 
            graph_pred_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    graph_pred_weights_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln403_reg_1060_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln403_reg_1060_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            graph_pred_weights_V_we0 <= ap_const_logic_1;
        else 
            graph_pred_weights_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_CONV_layer_fu_566_ap_start <= grp_compute_CONV_layer_fu_566_ap_start_reg;
    grp_compute_node_embedding_fu_630_ap_start <= grp_compute_node_embedding_fu_630_ap_start_reg;

    grp_fu_935_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_935_ce <= ap_const_logic_1;
        else 
            grp_fu_935_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_935_p0 <= grp_fu_935_p00(8 - 1 downto 0);
    grp_fu_935_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln408_1_fu_801_p3),16));
    grp_fu_935_p1 <= ap_const_lv16_12C(10 - 1 downto 0);
    grp_fu_935_p2 <= grp_fu_935_p20(9 - 1 downto 0);
    grp_fu_935_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln408_reg_1084_pp2_iter1_reg),16));

    grp_fu_944_ce_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            grp_fu_944_ce <= ap_const_logic_1;
        else 
            grp_fu_944_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_944_p0 <= grp_fu_944_p00(7 - 1 downto 0);
    grp_fu_944_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_878_p3),15));
    grp_fu_944_p1 <= ap_const_lv15_12C(10 - 1 downto 0);
    grp_fu_944_p2 <= grp_fu_944_p20(9 - 1 downto 0);
    grp_fu_944_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_reg_1129_pp3_iter1_reg),15));
    grp_global_graph_prediction_fu_643_ap_start <= grp_global_graph_prediction_fu_643_ap_start_reg;
    grp_global_mean_pooling_fu_621_ap_start <= grp_global_mean_pooling_fu_621_ap_start_reg;
    grp_load_graph_fu_604_ap_start <= grp_load_graph_fu_604_ap_start_reg;
    i_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_464_pp0_iter1_reg),64));
    icmp_ln397_fu_682_p2 <= "1" when (ap_phi_mux_i_phi_fu_468_p4 = ap_const_lv3_5) else "0";
    icmp_ln403_fu_738_p2 <= "1" when (ap_phi_mux_dim_in_phi_fu_480_p4 = ap_const_lv9_12C) else "0";
    icmp_ln408_fu_775_p2 <= "1" when (indvar_flatten_reg_488 = ap_const_lv16_CABC) else "0";
    icmp_ln409_fu_787_p2 <= "1" when (dim_reg_510 = ap_const_lv9_12C) else "0";
    icmp_ln414_fu_852_p2 <= "1" when (indvar_flatten7_reg_521 = ap_const_lv15_4C2C) else "0";
    icmp_ln415_fu_864_p2 <= "1" when (dim_1_reg_543 = ap_const_lv9_12C) else "0";
    icmp_ln481_fu_929_p2 <= "1" when (layer_reg_554 = ap_const_lv3_5) else "0";
    layer_1_fu_923_p2 <= std_logic_vector(unsigned(layer_reg_554) + unsigned(ap_const_lv3_1));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state46, mem_ARREADY, mem_addr_reg_1018, mem_addr_7_reg_1044, ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARADDR, grp_load_graph_fu_604_m_axi_mem_ARADDR, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56, sext_ln402_fu_702_p1, sext_ln408_fu_758_p1, sext_ln414_fu_835_p1, sext_ln469_fu_912_p1)
    begin
        if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            mem_ARADDR <= sext_ln469_fu_912_p1;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            mem_ARADDR <= sext_ln414_fu_835_p1;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            mem_ARADDR <= sext_ln408_fu_758_p1;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            mem_ARADDR <= mem_addr_7_reg_1044;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            mem_ARADDR <= sext_ln402_fu_702_p1;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_ARADDR <= mem_addr_reg_1018;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARADDR <= grp_load_graph_fu_604_m_axi_mem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARADDR <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARADDR;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARBURST_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARBURST, grp_load_graph_fu_604_m_axi_mem_ARBURST, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARBURST <= grp_load_graph_fu_604_m_axi_mem_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARBURST <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARBURST;
        else 
            mem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    mem_ARCACHE_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARCACHE, grp_load_graph_fu_604_m_axi_mem_ARCACHE, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARCACHE <= grp_load_graph_fu_604_m_axi_mem_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARCACHE <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARCACHE;
        else 
            mem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    mem_ARID_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARID, grp_load_graph_fu_604_m_axi_mem_ARID, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARID <= grp_load_graph_fu_604_m_axi_mem_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARID <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARID;
        else 
            mem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    mem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state46, mem_ARREADY, ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARLEN, grp_load_graph_fu_604_m_axi_mem_ARLEN, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            mem_ARLEN <= ap_const_lv32_2;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            mem_ARLEN <= ap_const_lv32_4C2C;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            mem_ARLEN <= ap_const_lv32_CABC;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            mem_ARLEN <= ap_const_lv32_12C;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            mem_ARLEN <= ap_const_lv32_1;
        elsif (((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_ARLEN <= ap_const_lv32_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARLEN <= grp_load_graph_fu_604_m_axi_mem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARLEN <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARLEN;
        else 
            mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARLOCK_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARLOCK, grp_load_graph_fu_604_m_axi_mem_ARLOCK, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARLOCK <= grp_load_graph_fu_604_m_axi_mem_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARLOCK <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARLOCK;
        else 
            mem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    mem_ARPROT_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARPROT, grp_load_graph_fu_604_m_axi_mem_ARPROT, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARPROT <= grp_load_graph_fu_604_m_axi_mem_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARPROT <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARPROT;
        else 
            mem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    mem_ARQOS_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARQOS, grp_load_graph_fu_604_m_axi_mem_ARQOS, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARQOS <= grp_load_graph_fu_604_m_axi_mem_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARQOS <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARQOS;
        else 
            mem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    mem_ARREGION_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARREGION, grp_load_graph_fu_604_m_axi_mem_ARREGION, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARREGION <= grp_load_graph_fu_604_m_axi_mem_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARREGION <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARREGION;
        else 
            mem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    mem_ARSIZE_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARSIZE, grp_load_graph_fu_604_m_axi_mem_ARSIZE, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARSIZE <= grp_load_graph_fu_604_m_axi_mem_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARSIZE <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARSIZE;
        else 
            mem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    mem_ARUSER_assign_proc : process(ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARUSER, grp_load_graph_fu_604_m_axi_mem_ARUSER, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARUSER <= grp_load_graph_fu_604_m_axi_mem_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARUSER <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARUSER;
        else 
            mem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state46, mem_ARREADY, ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_ARVALID, grp_load_graph_fu_604_m_axi_mem_ARVALID, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            mem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_ARVALID <= grp_load_graph_fu_604_m_axi_mem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_ARVALID <= grp_compute_CONV_layer_fu_566_m_axi_mem_ARVALID;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(grp_global_graph_prediction_fu_643_m_axi_mem_AWVALID, ap_CS_fsm_state62, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            mem_AWVALID <= grp_global_graph_prediction_fu_643_m_axi_mem_AWVALID;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(grp_global_graph_prediction_fu_643_m_axi_mem_BREADY, ap_CS_fsm_state62, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            mem_BREADY <= grp_global_graph_prediction_fu_643_m_axi_mem_BREADY;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln397_reg_1029, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln403_reg_1060, ap_enable_reg_pp2_iter2, icmp_ln408_reg_1080_pp2_iter1_reg, ap_enable_reg_pp3_iter2, icmp_ln414_reg_1125_pp3_iter1_reg, ap_CS_fsm_state53, ap_CS_fsm_state54, mem_RVALID, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_state59, grp_compute_CONV_layer_fu_566_m_axi_mem_RREADY, grp_load_graph_fu_604_m_axi_mem_RREADY, ap_CS_fsm_state60, icmp_ln481_fu_929_p2, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((((icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            mem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            mem_RREADY <= grp_load_graph_fu_604_m_axi_mem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (icmp_ln481_fu_929_p2 = ap_const_lv1_0)))) then 
            mem_RREADY <= grp_compute_CONV_layer_fu_566_m_axi_mem_RREADY;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(grp_global_graph_prediction_fu_643_m_axi_mem_WVALID, ap_CS_fsm_state62, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            mem_WVALID <= grp_global_graph_prediction_fu_643_m_axi_mem_WVALID;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln397_reg_1029, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln403_reg_1060, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln408_reg_1080_pp2_iter1_reg, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, icmp_ln414_reg_1125_pp3_iter1_reg, ap_CS_fsm_state53, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((icmp_ln414_reg_1125_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((icmp_ln408_reg_1080_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((icmp_ln403_reg_1060 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln397_reg_1029 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mlp_eps_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, grp_compute_CONV_layer_fu_566_mlp_eps_V_address0, ap_CS_fsm_state60, i_cast_fu_688_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mlp_eps_V_address0 <= i_cast_fu_688_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            mlp_eps_V_address0 <= grp_compute_CONV_layer_fu_566_mlp_eps_V_address0;
        else 
            mlp_eps_V_address0 <= "XXX";
        end if; 
    end process;


    mlp_eps_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_compute_CONV_layer_fu_566_mlp_eps_V_ce0, ap_CS_fsm_state60)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mlp_eps_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            mlp_eps_V_ce0 <= grp_compute_CONV_layer_fu_566_mlp_eps_V_ce0;
        else 
            mlp_eps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_eps_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln397_reg_1029_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln397_reg_1029_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mlp_eps_V_we0 <= ap_const_logic_1;
        else 
            mlp_eps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_address0_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_address0, grp_global_mean_pooling_fu_621_node_embedding_V_address0, grp_compute_node_embedding_fu_630_node_embedding_V_address0, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_address0 <= grp_compute_node_embedding_fu_630_node_embedding_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            node_embedding_V_address0 <= grp_global_mean_pooling_fu_621_node_embedding_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_address0 <= grp_compute_CONV_layer_fu_566_node_embedding_V_address0;
        else 
            node_embedding_V_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_address1_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_address1, grp_compute_node_embedding_fu_630_node_embedding_V_address1, ap_CS_fsm_state58, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_address1 <= grp_compute_node_embedding_fu_630_node_embedding_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_address1 <= grp_compute_CONV_layer_fu_566_node_embedding_V_address1;
        else 
            node_embedding_V_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_ce0_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_ce0, grp_global_mean_pooling_fu_621_node_embedding_V_ce0, grp_compute_node_embedding_fu_630_node_embedding_V_ce0, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_ce0 <= grp_compute_node_embedding_fu_630_node_embedding_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            node_embedding_V_ce0 <= grp_global_mean_pooling_fu_621_node_embedding_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_ce0 <= grp_compute_CONV_layer_fu_566_node_embedding_V_ce0;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_ce1_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_ce1, grp_compute_node_embedding_fu_630_node_embedding_V_ce1, ap_CS_fsm_state58, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_ce1 <= grp_compute_node_embedding_fu_630_node_embedding_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_ce1 <= grp_compute_CONV_layer_fu_566_node_embedding_V_ce1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_d1_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_d1, grp_compute_node_embedding_fu_630_node_embedding_V_d1, ap_CS_fsm_state58, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_d1 <= grp_compute_node_embedding_fu_630_node_embedding_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_d1 <= grp_compute_CONV_layer_fu_566_node_embedding_V_d1;
        else 
            node_embedding_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_we1_assign_proc : process(grp_compute_CONV_layer_fu_566_node_embedding_V_we1, grp_compute_node_embedding_fu_630_node_embedding_V_we1, ap_CS_fsm_state58, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_V_we1 <= grp_compute_node_embedding_fu_630_node_embedding_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            node_embedding_V_we1 <= grp_compute_CONV_layer_fu_566_node_embedding_V_we1;
        else 
            node_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_table_V_address1 <= zext_ln410_1_fu_822_p1(16 - 1 downto 0);

    node_embedding_table_V_ce0_assign_proc : process(grp_compute_node_embedding_fu_630_node_embedding_table_V_ce0, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_embedding_table_V_ce0 <= grp_compute_node_embedding_fu_630_node_embedding_table_V_ce0;
        else 
            node_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_table_V_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_table_V_ce1 <= ap_const_logic_1;
        else 
            node_embedding_table_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_table_V_we1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln408_reg_1080_pp2_iter2_reg, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln408_reg_1080_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_table_V_we1 <= ap_const_logic_1;
        else 
            node_embedding_table_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    node_feature_ce0_assign_proc : process(grp_compute_node_embedding_fu_630_node_feature_ce0, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            node_feature_ce0 <= grp_compute_node_embedding_fu_630_node_feature_ce0;
        else 
            node_feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_feature_ce1_assign_proc : process(grp_load_graph_fu_604_node_feature_ce1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            node_feature_ce1 <= grp_load_graph_fu_604_node_feature_ce1;
        else 
            node_feature_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_feature_we1_assign_proc : process(grp_load_graph_fu_604_node_feature_we1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            node_feature_we1 <= grp_load_graph_fu_604_node_feature_we1;
        else 
            node_feature_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln408_1_fu_801_p3 <= 
        add_ln408_fu_781_p2 when (icmp_ln409_fu_787_p2(0) = '1') else 
        ap_phi_mux_i_3_phi_fu_503_p4;
    select_ln408_fu_793_p3 <= 
        ap_const_lv9_0 when (icmp_ln409_fu_787_p2(0) = '1') else 
        dim_reg_510;
    select_ln414_1_fu_878_p3 <= 
        add_ln414_fu_858_p2 when (icmp_ln415_fu_864_p2(0) = '1') else 
        ap_phi_mux_i_4_phi_fu_536_p4;
    select_ln414_fu_870_p3 <= 
        ap_const_lv9_0 when (icmp_ln415_fu_864_p2(0) = '1') else 
        dim_1_reg_543;
        sext_ln397_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_656_p4),64));

        sext_ln402_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_693_p4),64));

        sext_ln403_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_713_p4),64));

        sext_ln408_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_749_p4),64));

        sext_ln414_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_826_p4),64));

        sext_ln469_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_903_p4),64));

    trunc_ln1_fu_693_p4 <= graph_pred_linear_bias_fixed_read_reg_953(63 downto 2);
    trunc_ln2_fu_713_p4 <= graph_pred_linear_weight_fixed_read_reg_958(63 downto 2);
    trunc_ln3_fu_749_p4 <= gnn_node_embedding_fixed_read_reg_968(63 downto 2);
    trunc_ln4_fu_826_p4 <= gnn_edge_embedding_fixed_read_reg_963(63 downto 2);
    trunc_ln5_fu_903_p4 <= graph_attr_read_reg_998(63 downto 2);
    trunc_ln_fu_656_p4 <= eps_fixed(63 downto 2);
    zext_ln410_1_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_935_p3),64));
    zext_ln416_1_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_944_p3),64));
end behav;
