-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_node_embedding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_nodes : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    node_embedding_V_ce0 : OUT STD_LOGIC;
    node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    node_embedding_V_ce1 : OUT STD_LOGIC;
    node_embedding_V_we1 : OUT STD_LOGIC;
    node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_table_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_table_V_ce0 : OUT STD_LOGIC;
    node_embedding_table_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_feature_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    node_feature_ce0 : OUT STD_LOGIC;
    node_feature_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_node_embedding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_493E0 : STD_LOGIC_VECTOR (18 downto 0) := "1001001001111100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_12C : STD_LOGIC_VECTOR (15 downto 0) := "0000000100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv19_12C : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nd_feature_table_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal nd_feature_table_1_ce0 : STD_LOGIC;
    signal nd_feature_table_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal dim_reg_224 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_91_fu_235_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln251_1_fu_266_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln251_1_reg_477 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln251_2_fu_272_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln251_2_reg_482 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln251_fu_295_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln251_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln251_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln251_1_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln251_1_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_96_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_96_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln703_reg_516 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln239_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln239_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_1_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal mul_ln254_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln254_reg_540 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln254_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln254_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_embedding_V_addr_1_reg_554 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln252_fu_452_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal empty_reg_157 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond548_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (35 downto 0);
    signal nd_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal nf_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_cast_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_6_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln257_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_255_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln251_1_fu_262_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln251_fu_252_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln252_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln251_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln251_1_fu_319_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln251_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln252_fu_331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln253_1_fu_335_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_mid2_fu_323_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln253_fu_341_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_94_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add3_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln254_fu_399_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln254_fu_399_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_5_fu_421_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln703_6_fu_425_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln703_6_fu_425_p2 : signal is "no";
    signal zext_ln703_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln257_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln254_fu_399_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_8ns_10ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_mul_19s_10ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    nd_feature_table_1_U : component GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1
    generic map (
        DataWidth => 5,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => nd_feature_table_1_address0,
        ce0 => nd_feature_table_1_ce0,
        q0 => nd_feature_table_1_q0);

    mul_8ns_10ns_16_1_1_U10 : component GIN_compute_one_graph_mul_8ns_10ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln254_fu_399_p0,
        din1 => mul_ln254_fu_399_p1,
        dout => mul_ln254_fu_399_p2);

    mul_mul_19s_10ns_19_4_1_U11 : component GIN_compute_one_graph_mul_mul_19s_10ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                addr_reg_212 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln239_reg_526 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                addr_reg_212 <= addr_1_fu_380_p2;
            end if; 
        end if;
    end process;

    dim_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln254_fu_411_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                dim_reg_224 <= add_ln254_fu_405_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                dim_reg_224 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    empty_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond548_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_157 <= empty_91_fu_235_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_157 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_201 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln239_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                i_reg_201 <= add_ln239_fu_356_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_reg_168 <= add_ln251_2_reg_482;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_168 <= ap_const_lv36_0;
            end if; 
        end if;
    end process;

    nd_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                nd_reg_179 <= select_ln251_1_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                nd_reg_179 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    nf_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                nf_reg_190 <= add_ln252_fu_452_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                nf_reg_190 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln251_1_reg_477 <= add_ln251_1_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln251_2_reg_482 <= add_ln251_2_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_96_reg_511 <= empty_96_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln239_reg_526 <= icmp_ln239_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln254_reg_550 <= icmp_ln254_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln254_reg_540 <= mul_ln254_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln703_reg_516 <= grp_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln254_fu_411_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                node_embedding_V_addr_1_reg_554 <= zext_ln703_6_fu_430_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln251_1_reg_496 <= select_ln251_1_fu_303_p3;
                select_ln251_reg_490 <= select_ln251_fu_295_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln251_fu_278_p2, ap_enable_reg_pp1_iter0, icmp_ln239_fu_362_p2, ap_enable_reg_pp2_iter0, icmp_ln254_fu_411_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, exitcond548_fu_241_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond548_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln251_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln239_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln239_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln254_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln254_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add3_fu_390_p2 <= std_logic_vector(unsigned(empty_94_fu_386_p1) + unsigned(empty_96_reg_511));
    add_ln239_fu_356_p2 <= std_logic_vector(unsigned(i_reg_201) + unsigned(ap_const_lv4_1));
    add_ln251_1_fu_266_p2 <= std_logic_vector(unsigned(zext_ln251_1_fu_262_p1) + unsigned(zext_ln251_fu_252_p1));
    add_ln251_2_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_168) + unsigned(ap_const_lv36_1));
    add_ln251_fu_283_p2 <= std_logic_vector(unsigned(nd_reg_179) + unsigned(ap_const_lv32_1));
    add_ln252_fu_452_p2 <= std_logic_vector(unsigned(select_ln251_reg_490) + unsigned(ap_const_lv4_1));
    add_ln253_1_fu_335_p2 <= std_logic_vector(unsigned(trunc_ln251_fu_315_p1) + unsigned(zext_ln252_fu_331_p1));
    add_ln253_fu_341_p2 <= std_logic_vector(unsigned(add_ln253_1_fu_335_p2) + unsigned(p_shl_mid2_fu_323_p3));
    add_ln254_fu_405_p2 <= std_logic_vector(unsigned(dim_reg_224) + unsigned(ap_const_lv9_1));
    add_ln257_fu_435_p2 <= std_logic_vector(unsigned(mul_ln254_reg_540) + unsigned(zext_ln703_fu_417_p1));
    add_ln703_6_fu_425_p2 <= std_logic_vector(signed(mul_ln703_reg_516) + signed(zext_ln703_5_fu_421_p1));
    add_ln703_fu_445_p2 <= std_logic_vector(unsigned(node_embedding_V_q0) + unsigned(node_embedding_table_V_q0));
    addr_1_fu_380_p2 <= std_logic_vector(unsigned(nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1) + unsigned(addr_reg_212));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln239_fu_362_p2)
    begin
        if ((icmp_ln239_fu_362_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln254_fu_411_p2)
    begin
        if ((icmp_ln254_fu_411_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln251_fu_278_p2)
    begin
        if ((((icmp_ln251_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln251_fu_278_p2)
    begin
        if (((icmp_ln251_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_91_fu_235_p2 <= std_logic_vector(unsigned(empty_reg_157) + unsigned(ap_const_lv19_1));
    empty_94_fu_386_p1 <= addr_reg_212(8 - 1 downto 0);
    empty_96_fu_352_p1 <= node_feature_q0(8 - 1 downto 0);
    exitcond548_fu_241_p2 <= "1" when (empty_reg_157 = ap_const_lv19_493E0) else "0";
    grp_fu_457_p0 <= select_ln251_1_fu_303_p3(19 - 1 downto 0);
    grp_fu_457_p1 <= ap_const_lv19_12C(10 - 1 downto 0);
    i_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_201),64));
    icmp_ln239_fu_362_p2 <= "1" when (i_reg_201 = select_ln251_reg_490) else "0";
    icmp_ln251_fu_278_p2 <= "1" when (indvar_flatten_reg_168 = add_ln251_1_reg_477) else "0";
    icmp_ln252_fu_289_p2 <= "1" when (nf_reg_190 = ap_const_lv4_9) else "0";
    icmp_ln254_fu_411_p2 <= "1" when (dim_reg_224 = ap_const_lv9_12C) else "0";
    mul_ln254_fu_399_p0 <= mul_ln254_fu_399_p00(8 - 1 downto 0);
    mul_ln254_fu_399_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add3_fu_390_p2),16));
    mul_ln254_fu_399_p1 <= ap_const_lv16_12C(10 - 1 downto 0);
    nd_feature_table_1_address0 <= i_cast_fu_367_p1(4 - 1 downto 0);

    nd_feature_table_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            nd_feature_table_1_ce0 <= ap_const_logic_1;
        else 
            nd_feature_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nd_feature_table_1_load_cast_cast_cast_cast_cast_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1),10));
        nd_feature_table_1_load_cast_cast_cast_cast_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(nd_feature_table_1_q0),7));

    node_embedding_V_address0 <= zext_ln703_6_fu_430_p1(19 - 1 downto 0);

    node_embedding_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, node_embedding_V_addr_1_reg_554, ap_enable_reg_pp2_iter1, p_cast_fu_247_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            node_embedding_V_address1 <= node_embedding_V_addr_1_reg_554;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            node_embedding_V_address1 <= p_cast_fu_247_p1(19 - 1 downto 0);
        else 
            node_embedding_V_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            node_embedding_V_ce1 <= ap_const_logic_1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, add_ln703_fu_445_p2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            node_embedding_V_d1 <= add_ln703_fu_445_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            node_embedding_V_d1 <= ap_const_lv32_0;
        else 
            node_embedding_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln254_reg_550, ap_enable_reg_pp2_iter1, exitcond548_fu_241_p2)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln254_reg_550 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond548_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            node_embedding_V_we1 <= ap_const_logic_1;
        else 
            node_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_table_V_address0 <= zext_ln257_fu_440_p1(16 - 1 downto 0);

    node_embedding_table_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_table_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_feature_address0 <= zext_ln253_fu_347_p1(14 - 1 downto 0);

    node_feature_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            node_feature_ce0 <= ap_const_logic_1;
        else 
            node_feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_157),64));
    p_shl_mid2_fu_323_p3 <= (trunc_ln251_1_fu_319_p1 & ap_const_lv3_0);
    select_ln251_1_fu_303_p3 <= 
        add_ln251_fu_283_p2 when (icmp_ln252_fu_289_p2(0) = '1') else 
        nd_reg_179;
    select_ln251_fu_295_p3 <= 
        ap_const_lv4_0 when (icmp_ln252_fu_289_p2(0) = '1') else 
        nf_reg_190;
    tmp_fu_255_p3 <= (num_of_nodes & ap_const_lv3_0);
    trunc_ln251_1_fu_319_p1 <= select_ln251_1_fu_303_p3(11 - 1 downto 0);
    trunc_ln251_fu_315_p1 <= select_ln251_1_fu_303_p3(14 - 1 downto 0);
    zext_ln251_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_255_p3),36));
    zext_ln251_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_of_nodes),36));
    zext_ln252_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln251_fu_295_p3),14));
    zext_ln253_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln253_fu_341_p2),64));
    zext_ln257_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_fu_435_p2),64));
    zext_ln703_5_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_224),19));
    zext_ln703_6_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_6_fu_425_p2),64));
    zext_ln703_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_224),16));
end behav;
