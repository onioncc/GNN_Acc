-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_load_mlp_weights_one_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    gnn_node_mlp_1_weights_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
    gnn_node_mlp_1_bias_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
    gnn_node_mlp_2_weights_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
    gnn_node_mlp_2_bias_fixed : IN STD_LOGIC_VECTOR (63 downto 0);
    mlp_1_bias_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mlp_1_bias_V_ce0 : OUT STD_LOGIC;
    mlp_1_bias_V_we0 : OUT STD_LOGIC;
    mlp_1_bias_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_weights_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    mlp_1_weights_V_ce0 : OUT STD_LOGIC;
    mlp_1_weights_V_we0 : OUT STD_LOGIC;
    mlp_1_weights_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_2_bias_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    mlp_2_bias_V_ce0 : OUT STD_LOGIC;
    mlp_2_bias_V_we0 : OUT STD_LOGIC;
    mlp_2_bias_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_2_weights_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    mlp_2_weights_V_ce0 : OUT STD_LOGIC;
    mlp_2_weights_V_we0 : OUT STD_LOGIC;
    mlp_2_weights_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_load_mlp_weights_one_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_258 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011000";
    constant ap_const_lv13_258 : STD_LOGIC_VECTOR (12 downto 0) := "0001001011000";
    constant ap_const_lv21_2BF20 : STD_LOGIC_VECTOR (20 downto 0) := "000101011111100100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv18_12C : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101100";
    constant ap_const_lv10_258 : STD_LOGIC_VECTOR (9 downto 0) := "1001011000";
    constant ap_const_lv12_12C : STD_LOGIC_VECTOR (11 downto 0) := "000100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv18_258 : STD_LOGIC_VECTOR (17 downto 0) := "000000001001011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln284_reg_742 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln290_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal dim_in_reg_277 : STD_LOGIC_VECTOR (8 downto 0);
    signal dim_in_1_reg_323 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_cast2_fu_334_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer_cast2_reg_672 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln282_cast_fu_386_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln282_cast_reg_677 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast5_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_682 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln282_fu_418_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln282_reg_687 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln282_fu_422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln282_reg_692 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln282_1_fu_428_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln282_1_reg_697 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln282_2_fu_434_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln282_2_reg_702 : STD_LOGIC_VECTOR (17 downto 0);
    signal mem_addr_reg_710 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln282_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_2_reg_716 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln288_cast_fu_516_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln288_cast_reg_722 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln288_fu_534_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln288_reg_727 : STD_LOGIC_VECTOR (62 downto 0);
    signal mem_addr_read_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln284_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln284_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_742_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln285_1_fu_559_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln285_1_reg_746 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln285_1_reg_746_pp0_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal mem_addr_2_read_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln288_fu_569_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln288_reg_756 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln288_1_fu_575_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln288_1_reg_761 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln288_2_fu_581_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln288_2_reg_766 : STD_LOGIC_VECTOR (17 downto 0);
    signal mem_addr_1_reg_774 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln288_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_3_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_1_read_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_fu_636_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln290_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln290_reg_796_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln291_1_fu_652_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln291_1_reg_800 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln291_1_reg_800_pp1_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal mem_addr_3_read_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal dim_out_reg_242 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal phi_mul_reg_254 : STD_LOGIC_VECTOR (17 downto 0);
    signal phi_mul39_reg_266 : STD_LOGIC_VECTOR (17 downto 0);
    signal dim_out_1_reg_288 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal phi_mul41_reg_300 : STD_LOGIC_VECTOR (17 downto 0);
    signal phi_mul43_reg_312 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln282_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_2_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln288_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_2_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln283_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln285_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln289_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln291_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln282_fu_346_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln282_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln282_1_fu_352_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln282_1_fu_352_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln282_fu_346_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_358_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_cast_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_376_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln282_1_fu_352_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_fu_390_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_72_fu_402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln282_1_fu_408_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln282_1_fu_446_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln283_fu_450_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln285_fu_465_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln285_fu_469_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln288_fu_484_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln288_fu_484_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln288_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_489_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast7_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_75_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_506_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_76_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln288_1_fu_524_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln285_1_fu_555_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln288_1_fu_593_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln289_fu_597_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln291_fu_612_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln291_fu_616_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln291_1_fu_648_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln282_1_fu_352_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln282_fu_346_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_3ns_11ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_3ns_19ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_3ns_10ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mul_3ns_11ns_13_1_1_U43 : component GIN_compute_one_graph_mul_3ns_11ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 11,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln282_fu_346_p0,
        din1 => mul_ln282_fu_346_p1,
        dout => mul_ln282_fu_346_p2);

    mul_3ns_19ns_21_1_1_U44 : component GIN_compute_one_graph_mul_3ns_19ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 19,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln282_1_fu_352_p0,
        din1 => mul_ln282_1_fu_352_p1,
        dout => mul_ln282_1_fu_352_p2);

    mul_3ns_10ns_12_1_1_U45 : component GIN_compute_one_graph_mul_3ns_10ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln288_fu_484_p0,
        din1 => mul_ln288_fu_484_p1,
        dout => mul_ln288_fu_484_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_in_1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                dim_in_1_reg_323 <= ap_const_lv10_0;
            elsif (((icmp_ln290_fu_642_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                dim_in_1_reg_323 <= add_ln290_fu_636_p2;
            end if; 
        end if;
    end process;

    dim_in_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                dim_in_reg_277 <= ap_const_lv9_0;
            elsif (((icmp_ln284_fu_549_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                dim_in_reg_277 <= add_ln284_fu_543_p2;
            end if; 
        end if;
    end process;

    dim_out_1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dim_out_1_reg_288 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                dim_out_1_reg_288 <= add_ln288_reg_756;
            end if; 
        end if;
    end process;

    dim_out_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dim_out_reg_242 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dim_out_reg_242 <= add_ln282_reg_692;
            end if; 
        end if;
    end process;

    phi_mul39_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul39_reg_266 <= ap_const_lv18_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                phi_mul39_reg_266 <= add_ln282_1_reg_697;
            end if; 
        end if;
    end process;

    phi_mul41_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul41_reg_300 <= ap_const_lv18_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                phi_mul41_reg_300 <= add_ln288_2_reg_766;
            end if; 
        end if;
    end process;

    phi_mul43_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul43_reg_312 <= ap_const_lv18_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                phi_mul43_reg_312 <= add_ln288_1_reg_761;
            end if; 
        end if;
    end process;

    phi_mul_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_254 <= ap_const_lv18_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                phi_mul_reg_254 <= add_ln282_2_reg_702;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln282_1_reg_697 <= add_ln282_1_fu_428_p2;
                add_ln282_2_reg_702 <= add_ln282_2_fu_434_p2;
                add_ln282_reg_692 <= add_ln282_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_fu_549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln285_1_reg_746 <= add_ln285_1_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln285_1_reg_746_pp0_iter1_reg <= add_ln285_1_reg_746;
                icmp_ln284_reg_742 <= icmp_ln284_fu_549_p2;
                icmp_ln284_reg_742_pp0_iter1_reg <= icmp_ln284_reg_742;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln288_1_reg_761 <= add_ln288_1_fu_575_p2;
                add_ln288_2_reg_766 <= add_ln288_2_fu_581_p2;
                add_ln288_reg_756 <= add_ln288_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln290_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln291_1_reg_800 <= add_ln291_1_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln291_1_reg_800_pp1_iter1_reg <= add_ln291_1_reg_800;
                icmp_ln290_reg_796 <= icmp_ln290_fu_642_p2;
                icmp_ln290_reg_796_pp1_iter1_reg <= icmp_ln290_reg_796;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    layer_cast2_reg_672(2 downto 0) <= layer_cast2_fu_334_p1(2 downto 0);
                    p_cast5_reg_682(22 downto 2) <= p_cast5_fu_398_p1(22 downto 2);
                sext_ln282_reg_687 <= sext_ln282_fu_418_p1;
                trunc_ln282_cast_reg_677 <= trunc_ln282_cast_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mem_addr_1_read_reg_786 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln288_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                mem_addr_1_reg_774 <= sext_ln289_fu_602_p1;
                mem_addr_3_reg_780 <= sext_ln291_fu_621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln284_reg_742 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mem_addr_2_read_reg_751 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mem_addr_2_reg_716 <= sext_ln285_fu_474_p1;
                mem_addr_reg_710 <= sext_ln283_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln290_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mem_addr_3_read_reg_805 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mem_addr_read_reg_732 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sext_ln288_reg_727 <= sext_ln288_fu_534_p1;
                trunc_ln288_cast_reg_722 <= trunc_ln288_cast_fu_516_p1;
            end if;
        end if;
    end process;
    layer_cast2_reg_672(11 downto 3) <= "000000000";
    p_cast5_reg_682(1 downto 0) <= "00";
    p_cast5_reg_682(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_ARREADY, m_axi_mem_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, icmp_ln282_fu_440_p2, ap_enable_reg_pp0_iter0, icmp_ln284_fu_549_p2, ap_CS_fsm_state16, icmp_ln288_fu_587_p2, ap_enable_reg_pp1_iter0, icmp_ln290_fu_642_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln282_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln284_fu_549_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln284_fu_549_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln288_fu_587_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((m_axi_mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln290_fu_642_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln290_fu_642_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln282_1_fu_428_p2 <= std_logic_vector(unsigned(phi_mul39_reg_266) + unsigned(ap_const_lv18_12C));
    add_ln282_2_fu_434_p2 <= std_logic_vector(unsigned(phi_mul_reg_254) + unsigned(ap_const_lv18_12C));
    add_ln282_fu_422_p2 <= std_logic_vector(unsigned(dim_out_reg_242) + unsigned(ap_const_lv10_1));
    add_ln283_fu_450_p2 <= std_logic_vector(signed(trunc_ln282_cast_reg_677) + signed(zext_ln282_1_fu_446_p1));
    add_ln284_fu_543_p2 <= std_logic_vector(unsigned(dim_in_reg_277) + unsigned(ap_const_lv9_1));
    add_ln285_1_fu_559_p2 <= std_logic_vector(unsigned(phi_mul_reg_254) + unsigned(zext_ln285_1_fu_555_p1));
    add_ln285_fu_469_p2 <= std_logic_vector(unsigned(zext_ln285_fu_465_p1) + unsigned(sext_ln282_reg_687));
    add_ln288_1_fu_575_p2 <= std_logic_vector(unsigned(phi_mul43_reg_312) + unsigned(ap_const_lv18_258));
    add_ln288_2_fu_581_p2 <= std_logic_vector(unsigned(phi_mul41_reg_300) + unsigned(ap_const_lv18_258));
    add_ln288_fu_569_p2 <= std_logic_vector(unsigned(dim_out_1_reg_288) + unsigned(ap_const_lv9_1));
    add_ln289_fu_597_p2 <= std_logic_vector(signed(trunc_ln288_cast_reg_722) + signed(zext_ln288_1_fu_593_p1));
    add_ln290_fu_636_p2 <= std_logic_vector(unsigned(dim_in_1_reg_323) + unsigned(ap_const_lv10_1));
    add_ln291_1_fu_652_p2 <= std_logic_vector(unsigned(phi_mul41_reg_300) + unsigned(zext_ln291_1_fu_648_p1));
    add_ln291_fu_616_p2 <= std_logic_vector(unsigned(zext_ln291_fu_612_p1) + unsigned(sext_ln288_reg_727));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter1, icmp_ln284_reg_742)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln284_reg_742 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter1, icmp_ln284_reg_742)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln284_reg_742 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp1_iter1, icmp_ln290_reg_796)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln290_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp1_iter1, icmp_ln290_reg_796)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln290_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(m_axi_mem_RVALID, icmp_ln284_reg_742)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln284_reg_742 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp1_stage0_iter1_assign_proc : process(m_axi_mem_RVALID, icmp_ln290_reg_796)
    begin
                ap_block_state27_pp1_stage0_iter1 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (icmp_ln290_reg_796 = ap_const_lv1_0));
    end process;

        ap_block_state28_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state12_assign_proc : process(icmp_ln284_fu_549_p2)
    begin
        if ((icmp_ln284_fu_549_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(icmp_ln290_fu_642_p2)
    begin
        if ((icmp_ln290_fu_642_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, icmp_ln288_fu_587_p2)
    begin
        if ((((icmp_ln288_fu_587_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln288_fu_587_p2)
    begin
        if (((icmp_ln288_fu_587_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_72_fu_402_p2 <= std_logic_vector(unsigned(p_cast5_fu_398_p1) + unsigned(gnn_node_mlp_1_weights_fixed));
    empty_75_fu_501_p2 <= std_logic_vector(unsigned(p_cast7_fu_497_p1) + unsigned(gnn_node_mlp_2_bias_fixed));
    empty_76_fu_520_p2 <= std_logic_vector(unsigned(p_cast5_reg_682) + unsigned(gnn_node_mlp_2_weights_fixed));
    empty_fu_370_p2 <= std_logic_vector(unsigned(p_cast_fu_366_p1) + unsigned(gnn_node_mlp_1_bias_fixed));
    icmp_ln282_fu_440_p2 <= "1" when (dim_out_reg_242 = ap_const_lv10_258) else "0";
    icmp_ln284_fu_549_p2 <= "1" when (dim_in_reg_277 = ap_const_lv9_12C) else "0";
    icmp_ln288_fu_587_p2 <= "1" when (dim_out_1_reg_288 = ap_const_lv9_12C) else "0";
    icmp_ln290_fu_642_p2 <= "1" when (dim_in_1_reg_323 = ap_const_lv10_258) else "0";
    layer_cast2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),12));

    m_axi_mem_ARADDR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state18, mem_addr_reg_710, mem_addr_2_reg_716, mem_addr_1_reg_774, mem_addr_3_reg_780)
    begin
        if ((m_axi_mem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_mem_ARADDR <= mem_addr_3_reg_780;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                m_axi_mem_ARADDR <= mem_addr_1_reg_774;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_mem_ARADDR <= mem_addr_2_reg_716;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_mem_ARADDR <= mem_addr_reg_710;
            else 
                m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;

    m_axi_mem_ARLEN_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_axi_mem_ARLEN <= ap_const_lv32_258;
        elsif (((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_mem_ARLEN <= ap_const_lv32_12C;
        elsif ((((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_mem_ARLEN <= ap_const_lv32_1;
        else 
            m_axi_mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_mem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln284_reg_742, ap_CS_fsm_state24, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln290_reg_796, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((m_axi_mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((m_axi_mem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln290_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln284_reg_742 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv32_0;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln284_reg_742, ap_CS_fsm_state24, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln290_reg_796)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln290_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln284_reg_742 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mlp_1_bias_V_address0 <= zext_ln282_fu_538_p1(10 - 1 downto 0);

    mlp_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mlp_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            mlp_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_1_bias_V_d0 <= mem_addr_read_reg_732;

    mlp_1_bias_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mlp_1_bias_V_we0 <= ap_const_logic_1;
        else 
            mlp_1_bias_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_1_weights_V_address0 <= zext_ln285_2_fu_565_p1(18 - 1 downto 0);

    mlp_1_weights_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mlp_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            mlp_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_1_weights_V_d0 <= mem_addr_2_read_reg_751;

    mlp_1_weights_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln284_reg_742_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln284_reg_742_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mlp_1_weights_V_we0 <= ap_const_logic_1;
        else 
            mlp_1_weights_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_2_bias_V_address0 <= zext_ln288_fu_631_p1(9 - 1 downto 0);

    mlp_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            mlp_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            mlp_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_2_bias_V_d0 <= mem_addr_1_read_reg_786;

    mlp_2_bias_V_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            mlp_2_bias_V_we0 <= ap_const_logic_1;
        else 
            mlp_2_bias_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_2_weights_V_address0 <= zext_ln291_2_fu_658_p1(18 - 1 downto 0);

    mlp_2_weights_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            mlp_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            mlp_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlp_2_weights_V_d0 <= mem_addr_3_read_reg_805;

    mlp_2_weights_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln290_reg_796_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln290_reg_796_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            mlp_2_weights_V_we0 <= ap_const_logic_1;
        else 
            mlp_2_weights_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln282_1_fu_352_p0 <= mul_ln282_1_fu_352_p00(3 - 1 downto 0);
    mul_ln282_1_fu_352_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),21));
    mul_ln282_1_fu_352_p1 <= ap_const_lv21_2BF20(19 - 1 downto 0);
    mul_ln282_fu_346_p0 <= mul_ln282_fu_346_p00(3 - 1 downto 0);
    mul_ln282_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),13));
    mul_ln282_fu_346_p1 <= ap_const_lv13_258(11 - 1 downto 0);
    mul_ln288_fu_484_p0 <= layer_cast2_reg_672(3 - 1 downto 0);
    mul_ln288_fu_484_p1 <= ap_const_lv12_12C(10 - 1 downto 0);
    p_cast5_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_390_p3),64));
    p_cast7_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_489_p3),64));
    p_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_358_p3),64));
        sext_ln282_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln282_1_fu_408_p4),63));

        sext_ln283_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln283_fu_450_p2),64));

        sext_ln285_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln285_fu_469_p2),64));

        sext_ln288_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln288_1_fu_524_p4),63));

        sext_ln289_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln289_fu_597_p2),64));

        sext_ln291_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln291_fu_616_p2),64));

    tmp_2_fu_390_p3 <= (mul_ln282_1_fu_352_p2 & ap_const_lv2_0);
    tmp_3_fu_489_p3 <= (mul_ln288_fu_484_p2 & ap_const_lv2_0);
    tmp_fu_358_p3 <= (mul_ln282_fu_346_p2 & ap_const_lv2_0);
    trunc_ln1_fu_506_p4 <= empty_75_fu_501_p2(63 downto 2);
    trunc_ln282_1_fu_408_p4 <= empty_72_fu_402_p2(63 downto 2);
        trunc_ln282_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_376_p4),63));

    trunc_ln288_1_fu_524_p4 <= empty_76_fu_520_p2(63 downto 2);
        trunc_ln288_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_506_p4),63));

    trunc_ln_fu_376_p4 <= empty_fu_370_p2(63 downto 2);
    zext_ln282_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_out_reg_242),63));
    zext_ln282_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_out_reg_242),64));
    zext_ln285_1_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_in_reg_277),18));
    zext_ln285_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln285_1_reg_746_pp0_iter1_reg),64));
    zext_ln285_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul39_reg_266),63));
    zext_ln288_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_out_1_reg_288),63));
    zext_ln288_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_out_1_reg_288),64));
    zext_ln291_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_in_1_reg_323),18));
    zext_ln291_2_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln291_1_reg_800_pp1_iter1_reg),64));
    zext_ln291_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul43_reg_312),63));
end behav;
