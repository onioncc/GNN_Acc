-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_message_passing is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_edges : IN STD_LOGIC_VECTOR (31 downto 0);
    message_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    message_V_ce0 : OUT STD_LOGIC;
    message_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    message_V_ce1 : OUT STD_LOGIC;
    message_V_we1 : OUT STD_LOGIC;
    message_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_embedding_V_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    edge_embedding_V_ce0 : OUT STD_LOGIC;
    edge_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    node_embedding_V_ce0 : OUT STD_LOGIC;
    node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_message_passing is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_493E0 : STD_LOGIC_VECTOR (18 downto 0) := "1001001001111100000";
    constant ap_const_lv41_12C : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100101100";
    constant ap_const_lv41_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv20_12C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100101100";
    constant ap_const_lv19_12C : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100101100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_172 : STD_LOGIC_VECTOR (40 downto 0);
    signal e_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal dim_reg_194 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_70_fu_205_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln47_fu_225_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln47_reg_440 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln47_1_fu_231_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln47_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_450_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_450_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_450_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_450_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_fu_266_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln47_reg_454 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln47_reg_454_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln47_reg_454_pp1_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln47_1_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_1_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_322_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln703_fu_339_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_401_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln703_1_reg_506 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal message_V_addr_1_reg_516 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal empty_reg_161 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond974_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_e_phi_fu_187_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_cast_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_1_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_2_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_2_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_3_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_4_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln47_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln47_fu_225_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln48_fu_237_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln51_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln48_1_fu_286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln48_mid1_fu_290_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_241_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln47_2_fu_298_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln47_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_418_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_409_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln703_4_fu_358_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln703_3_fu_354_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal msg_V_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_368_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal msg_V_1_fu_382_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln53_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_409_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_418_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_401_p20 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln47_fu_225_p00 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_32ns_10ns_41_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_20s_10ns_9ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component GIN_compute_one_graph_mac_muladd_19s_10ns_9ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    mul_32ns_10ns_41_1_1_U31 : component GIN_compute_one_graph_mul_32ns_10ns_41_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 41)
    port map (
        din0 => mul_ln47_fu_225_p0,
        din1 => mul_ln47_fu_225_p1,
        dout => mul_ln47_fu_225_p2);

    mac_muladd_20s_10ns_9ns_20_4_1_U32 : component GIN_compute_one_graph_mac_muladd_20s_10ns_9ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        din2 => grp_fu_401_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p3);

    mac_muladd_19s_10ns_9ns_19_4_1_U33 : component GIN_compute_one_graph_mac_muladd_19s_10ns_9ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_409_p0,
        din1 => grp_fu_409_p1,
        din2 => grp_fu_409_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p3);

    mac_muladd_19s_10ns_9ns_19_4_1_U34 : component GIN_compute_one_graph_mac_muladd_19s_10ns_9ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 10,
        din2_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_418_p0,
        din1 => grp_fu_418_p1,
        din2 => grp_fu_418_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_418_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_0))) then 
                dim_reg_194 <= add_ln51_fu_322_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                dim_reg_194 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    e_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln47_reg_450 = ap_const_lv1_0))) then 
                e_reg_183 <= select_ln47_1_reg_460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                e_reg_183 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    empty_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond974_fu_211_p2 = ap_const_lv1_0))) then 
                empty_reg_161 <= empty_70_fu_205_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_161 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_172 <= add_ln47_1_fu_231_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_172 <= ap_const_lv41_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln47_reg_450_pp1_iter2_reg = ap_const_lv1_0))) then
                add_ln703_1_reg_506 <= grp_fu_401_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln47_reg_450 <= icmp_ln47_fu_249_p2;
                icmp_ln47_reg_450_pp1_iter1_reg <= icmp_ln47_reg_450;
                select_ln47_reg_454_pp1_iter1_reg <= select_ln47_reg_454;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln47_reg_450_pp1_iter2_reg <= icmp_ln47_reg_450_pp1_iter1_reg;
                icmp_ln47_reg_450_pp1_iter3_reg <= icmp_ln47_reg_450_pp1_iter2_reg;
                icmp_ln47_reg_450_pp1_iter4_reg <= icmp_ln47_reg_450_pp1_iter3_reg;
                select_ln47_reg_454_pp1_iter2_reg <= select_ln47_reg_454_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln47_reg_450_pp1_iter3_reg = ap_const_lv1_0))) then
                message_V_addr_1_reg_516 <= zext_ln703_3_fu_346_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln47_reg_440 <= mul_ln47_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_0))) then
                select_ln47_1_reg_460 <= select_ln47_1_fu_274_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_0))) then
                select_ln47_reg_454 <= select_ln47_fu_266_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln47_fu_249_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, exitcond974_fu_211_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond974_fu_211_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln47_fu_249_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln47_1_fu_231_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_172) + unsigned(ap_const_lv41_1));
    add_ln47_fu_254_p2 <= std_logic_vector(unsigned(ap_phi_mux_e_phi_fu_187_p4) + unsigned(ap_const_lv32_1));
    add_ln51_fu_322_p2 <= std_logic_vector(unsigned(select_ln47_fu_266_p3) + unsigned(ap_const_lv9_1));
    add_ln53_fu_368_p2 <= std_logic_vector(unsigned(trunc_ln703_4_fu_358_p1) + unsigned(trunc_ln703_3_fu_354_p1));
    add_ln703_fu_394_p2 <= std_logic_vector(unsigned(message_V_q0) + unsigned(zext_ln53_fu_390_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln47_fu_249_p2)
    begin
        if ((icmp_ln47_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_e_phi_fu_187_p4_assign_proc : process(e_reg_183, ap_CS_fsm_pp1_stage0, icmp_ln47_reg_450, select_ln47_1_reg_460, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln47_reg_450 = ap_const_lv1_0))) then 
            ap_phi_mux_e_phi_fu_187_p4 <= select_ln47_1_reg_460;
        else 
            ap_phi_mux_e_phi_fu_187_p4 <= e_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_V_address0 <= zext_ln703_2_fu_342_p1(20 - 1 downto 0);

    edge_embedding_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            edge_embedding_V_ce0 <= ap_const_logic_1;
        else 
            edge_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge_list_address0 <= zext_ln47_2_fu_317_p1(12 - 1 downto 0);
    edge_list_address1 <= zext_ln47_1_fu_306_p1(12 - 1 downto 0);

    edge_list_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            edge_list_ce0 <= ap_const_logic_1;
        else 
            edge_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_list_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            edge_list_ce1 <= ap_const_logic_1;
        else 
            edge_list_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_70_fu_205_p2 <= std_logic_vector(unsigned(empty_reg_161) + unsigned(ap_const_lv19_1));
    exitcond974_fu_211_p2 <= "1" when (empty_reg_161 = ap_const_lv19_493E0) else "0";
    grp_fu_401_p0 <= select_ln47_1_fu_274_p3(20 - 1 downto 0);
    grp_fu_401_p1 <= ap_const_lv20_12C(10 - 1 downto 0);
    grp_fu_401_p2 <= grp_fu_401_p20(9 - 1 downto 0);
    grp_fu_401_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_reg_454_pp1_iter1_reg),20));
    grp_fu_409_p0 <= edge_list_q1(19 - 1 downto 0);
    grp_fu_409_p1 <= ap_const_lv19_12C(10 - 1 downto 0);
    grp_fu_409_p2 <= zext_ln703_fu_339_p1(9 - 1 downto 0);
    grp_fu_418_p0 <= edge_list_q0(19 - 1 downto 0);
    grp_fu_418_p1 <= ap_const_lv19_12C(10 - 1 downto 0);
    grp_fu_418_p2 <= zext_ln703_fu_339_p1(9 - 1 downto 0);
    icmp_ln47_fu_249_p2 <= "1" when (indvar_flatten_reg_172 = mul_ln47_reg_440) else "0";
    icmp_ln51_fu_260_p2 <= "1" when (dim_reg_194 = ap_const_lv9_12C) else "0";
    message_V_address0 <= zext_ln703_3_fu_346_p1(19 - 1 downto 0);

    message_V_address1_assign_proc : process(ap_CS_fsm_state2, message_V_addr_1_reg_516, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, p_cast_fu_217_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            message_V_address1 <= message_V_addr_1_reg_516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_V_address1 <= p_cast_fu_217_p1(19 - 1 downto 0);
        else 
            message_V_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    message_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            message_V_ce0 <= ap_const_logic_1;
        else 
            message_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)))) then 
            message_V_ce1 <= ap_const_logic_1;
        else 
            message_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, add_ln703_fu_394_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            message_V_d1 <= add_ln703_fu_394_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_V_d1 <= ap_const_lv32_0;
        else 
            message_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    message_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln47_reg_450_pp1_iter4_reg, ap_enable_reg_pp1_iter5, exitcond974_fu_211_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln47_reg_450_pp1_iter4_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond974_fu_211_p2 = ap_const_lv1_0)))) then 
            message_V_we1 <= ap_const_logic_1;
        else 
            message_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    msg_V_1_fu_382_p3 <= 
        ap_const_lv31_0 when (tmp_fu_374_p3(0) = '1') else 
        add_ln53_fu_368_p2;
    msg_V_fu_362_p2 <= std_logic_vector(unsigned(node_embedding_V_q0) + unsigned(edge_embedding_V_q0));
    mul_ln47_fu_225_p0 <= mul_ln47_fu_225_p00(32 - 1 downto 0);
    mul_ln47_fu_225_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_of_edges),41));
    mul_ln47_fu_225_p1 <= ap_const_lv41_12C(10 - 1 downto 0);
    node_embedding_V_address0 <= zext_ln703_4_fu_350_p1(19 - 1 downto 0);

    node_embedding_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            node_embedding_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln47_fu_311_p2 <= (select_ln47_2_fu_298_p3 or ap_const_lv12_1);
    p_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_161),64));
    select_ln47_1_fu_274_p3 <= 
        add_ln47_fu_254_p2 when (icmp_ln51_fu_260_p2(0) = '1') else 
        ap_phi_mux_e_phi_fu_187_p4;
    select_ln47_2_fu_298_p3 <= 
        shl_ln48_mid1_fu_290_p3 when (icmp_ln51_fu_260_p2(0) = '1') else 
        shl_ln_fu_241_p3;
    select_ln47_fu_266_p3 <= 
        ap_const_lv9_0 when (icmp_ln51_fu_260_p2(0) = '1') else 
        dim_reg_194;
    shl_ln48_mid1_fu_290_p3 <= (trunc_ln48_1_fu_286_p1 & ap_const_lv1_0);
    shl_ln_fu_241_p3 <= (trunc_ln48_fu_237_p1 & ap_const_lv1_0);
    tmp_fu_374_p3 <= msg_V_fu_362_p2(31 downto 31);
    trunc_ln48_1_fu_286_p1 <= add_ln47_fu_254_p2(11 - 1 downto 0);
    trunc_ln48_fu_237_p1 <= ap_phi_mux_e_phi_fu_187_p4(11 - 1 downto 0);
    trunc_ln703_3_fu_354_p1 <= edge_embedding_V_q0(31 - 1 downto 0);
    trunc_ln703_4_fu_358_p1 <= node_embedding_V_q0(31 - 1 downto 0);
    zext_ln47_1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_2_fu_298_p3),64));
    zext_ln47_2_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_fu_311_p2),64));
    zext_ln53_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msg_V_1_fu_382_p3),32));
    zext_ln703_2_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_1_reg_506),64));
    zext_ln703_3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_418_p3),64));
    zext_ln703_4_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_409_p3),64));
    zext_ln703_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_reg_454_pp1_iter2_reg),19));
end behav;
