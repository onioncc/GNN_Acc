-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_MLP_batch_nodes_300_600_Block_split13_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_out_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    d_out_empty_n : IN STD_LOGIC;
    d_out_read : OUT STD_LOGIC;
    mlp_1_bias_V_load_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_bias_V_load_out_out_full_n : IN STD_LOGIC;
    mlp_1_bias_V_load_out_out_write : OUT STD_LOGIC;
    mlp_1_bias_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mlp_1_bias_V_ce0 : OUT STD_LOGIC;
    mlp_1_bias_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_MLP_batch_nodes_300_600_Block_split13_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal d_out_blk_n : STD_LOGIC;
    signal mlp_1_bias_V_load_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal idxprom5_i_fu_53_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((mlp_1_bias_V_load_out_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, d_out_empty_n, mlp_1_bias_V_load_out_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (d_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((mlp_1_bias_V_load_out_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, d_out_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (d_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, mlp_1_bias_V_load_out_out_full_n, ap_CS_fsm_state2)
    begin
        if (((mlp_1_bias_V_load_out_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(mlp_1_bias_V_load_out_out_full_n, ap_CS_fsm_state2)
    begin
        if (((mlp_1_bias_V_load_out_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    d_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, d_out_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_out_blk_n <= d_out_empty_n;
        else 
            d_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_out_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, d_out_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (d_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            d_out_read <= ap_const_logic_1;
        else 
            d_out_read <= ap_const_logic_0;
        end if; 
    end process;

    idxprom5_i_fu_53_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_out_dout),64));
    mlp_1_bias_V_address0 <= idxprom5_i_fu_53_p1(10 - 1 downto 0);

    mlp_1_bias_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, d_out_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (d_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mlp_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            mlp_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_1_bias_V_load_out_out_blk_n_assign_proc : process(mlp_1_bias_V_load_out_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mlp_1_bias_V_load_out_out_blk_n <= mlp_1_bias_V_load_out_out_full_n;
        else 
            mlp_1_bias_V_load_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mlp_1_bias_V_load_out_out_din <= mlp_1_bias_V_q0;

    mlp_1_bias_V_load_out_out_write_assign_proc : process(mlp_1_bias_V_load_out_out_full_n, ap_CS_fsm_state2)
    begin
        if (((mlp_1_bias_V_load_out_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mlp_1_bias_V_load_out_out_write <= ap_const_logic_1;
        else 
            mlp_1_bias_V_load_out_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
