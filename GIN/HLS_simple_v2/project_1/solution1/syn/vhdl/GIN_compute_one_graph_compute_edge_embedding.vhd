-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_edge_embedding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_edges : IN STD_LOGIC_VECTOR (31 downto 0);
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    edge_embedding_V_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    edge_embedding_V_ce0 : OUT STD_LOGIC;
    edge_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_embedding_V_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    edge_embedding_V_ce1 : OUT STD_LOGIC;
    edge_embedding_V_we1 : OUT STD_LOGIC;
    edge_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    edge_embedding_table_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    edge_embedding_table_V_ce0 : OUT STD_LOGIC;
    edge_embedding_table_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_attr_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    edge_attr_ce0 : OUT STD_LOGIC;
    edge_attr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_edge_embedding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_927C0 : STD_LOGIC_VECTOR (19 downto 0) := "10010010011111000000";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_12C : STD_LOGIC_VECTOR (14 downto 0) := "000000100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv20_12C : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ed_feature_table_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ed_feature_table_1_ce0 : STD_LOGIC;
    signal ed_feature_table_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal addr_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal dim_reg_234 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_cast_fu_245_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_cast_reg_515 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_97_fu_249_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_i_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_i_reg_528 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bound_fu_281_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal bound_reg_533 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln212_1_fu_287_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln212_1_reg_538 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln212_fu_332_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln212_reg_546 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln212_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln212_1_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln212_1_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_104_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_104_reg_567 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_503_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln703_reg_572 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln199_fu_401_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln199_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_2_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal mul_ln215_fu_445_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln215_reg_596 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln215_fu_451_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln215_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_embedding_V_addr_1_reg_610 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln213_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal empty_reg_167 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond548_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_178 : STD_LOGIC_VECTOR (33 downto 0);
    signal e_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ef_reg_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_cast_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_8_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln218_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_fu_266_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_i_fu_266_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_274_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal cast_fu_271_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_99_fu_297_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_301_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln212_fu_293_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln213_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln212_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_103_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_mid1_fu_360_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln212_1_fu_352_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_mid1_fu_368_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_100_fu_309_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln212_2_fu_374_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln213_fu_382_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln214_fu_386_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ed_feature_table_1_load_cast_fu_417_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_cast_fu_427_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_431_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add3_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln215_fu_445_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln215_fu_445_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_7_fu_467_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln703_7_fu_471_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln703_7_fu_471_p2 : signal is "no";
    signal zext_ln703_fu_463_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln218_fu_481_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_503_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_503_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln215_fu_445_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_3ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_7ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_mul_20s_10ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_edge_embedding_ed_feature_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    ed_feature_table_1_U : component GIN_compute_one_graph_compute_edge_embedding_ed_feature_table_1
    generic map (
        DataWidth => 3,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ed_feature_table_1_address0,
        ce0 => ed_feature_table_1_ce0,
        q0 => ed_feature_table_1_q0);

    mul_3ns_5ns_7_1_1_U19 : component GIN_compute_one_graph_mul_3ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_i_fu_266_p0,
        din1 => mul_i_fu_266_p1,
        dout => mul_i_fu_266_p2);

    mul_7ns_10ns_15_1_1_U20 : component GIN_compute_one_graph_mul_7ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln215_fu_445_p0,
        din1 => mul_ln215_fu_445_p1,
        dout => mul_ln215_fu_445_p2);

    mul_mul_20s_10ns_20_4_1_U21 : component GIN_compute_one_graph_mul_mul_20s_10ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_503_p0,
        din1 => grp_fu_503_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_503_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                addr_reg_222 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln199_reg_582 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                addr_reg_222 <= addr_2_fu_421_p2;
            end if; 
        end if;
    end process;

    dim_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln215_fu_457_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                dim_reg_234 <= add_ln215_fu_451_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                dim_reg_234 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    e_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                e_reg_189 <= select_ln212_1_reg_552;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                e_reg_189 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ef_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ef_reg_200 <= add_ln213_fu_498_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ef_reg_200 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    empty_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond548_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_167 <= empty_97_fu_249_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_167 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_211 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln199_fu_407_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                i_reg_211 <= add_ln199_fu_401_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_reg_178 <= add_ln212_1_reg_538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_178 <= ap_const_lv34_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln212_1_reg_538 <= add_ln212_1_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_533 <= bound_fu_281_p2;
                mul_i_reg_528 <= mul_i_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln215_fu_457_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                edge_embedding_V_addr_1_reg_610 <= zext_ln703_8_fu_476_p1(20 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_104_reg_567 <= empty_104_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln199_reg_582 <= icmp_ln199_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln215_reg_606 <= icmp_ln215_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    layer_cast_reg_515(2 downto 0) <= layer_cast_fu_245_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln215_reg_596 <= mul_ln215_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln703_reg_572 <= grp_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln212_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln212_1_reg_552 <= select_ln212_1_fu_340_p3;
                select_ln212_reg_546 <= select_ln212_fu_332_p3;
            end if;
        end if;
    end process;
    layer_cast_reg_515(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln212_fu_315_p2, ap_enable_reg_pp1_iter0, icmp_ln199_fu_407_p2, ap_enable_reg_pp2_iter0, icmp_ln215_fu_457_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, exitcond548_fu_255_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond548_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln212_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln199_fu_407_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln199_fu_407_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln215_fu_457_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln215_fu_457_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add3_fu_436_p2 <= std_logic_vector(unsigned(tmp_fu_431_p2) + unsigned(empty_104_reg_567));
    add_ln199_fu_401_p2 <= std_logic_vector(unsigned(i_reg_211) + unsigned(ap_const_lv2_1));
    add_ln212_1_fu_287_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_178) + unsigned(ap_const_lv34_1));
    add_ln212_fu_320_p2 <= std_logic_vector(unsigned(e_reg_189) + unsigned(ap_const_lv32_1));
    add_ln213_fu_498_p2 <= std_logic_vector(unsigned(select_ln212_reg_546) + unsigned(ap_const_lv2_1));
    add_ln214_fu_386_p2 <= std_logic_vector(unsigned(select_ln212_2_fu_374_p3) + unsigned(zext_ln213_fu_382_p1));
    add_ln215_fu_451_p2 <= std_logic_vector(unsigned(dim_reg_234) + unsigned(ap_const_lv9_1));
    add_ln218_fu_481_p2 <= std_logic_vector(unsigned(mul_ln215_reg_596) + unsigned(zext_ln703_fu_463_p1));
    add_ln703_7_fu_471_p2 <= std_logic_vector(signed(mul_ln703_reg_572) + signed(zext_ln703_7_fu_467_p1));
    add_ln703_fu_491_p2 <= std_logic_vector(unsigned(edge_embedding_V_q0) + unsigned(edge_embedding_table_V_q0));
    addr_2_fu_421_p2 <= std_logic_vector(unsigned(ed_feature_table_1_load_cast_fu_417_p1) + unsigned(addr_reg_222));
    addr_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_reg_222),7));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln199_fu_407_p2)
    begin
        if ((icmp_ln199_fu_407_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln215_fu_457_p2)
    begin
        if ((icmp_ln215_fu_457_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln212_fu_315_p2)
    begin
        if ((((icmp_ln212_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln212_fu_315_p2)
    begin
        if (((icmp_ln212_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_281_p2 <= std_logic_vector(unsigned(p_shl2_fu_274_p3) - unsigned(cast_fu_271_p1));
    cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_of_edges),34));
    ed_feature_table_1_address0 <= i_cast_fu_412_p1(2 - 1 downto 0);

    ed_feature_table_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ed_feature_table_1_ce0 <= ap_const_logic_1;
        else 
            ed_feature_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ed_feature_table_1_load_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ed_feature_table_1_q0),4));
    edge_attr_address0 <= zext_ln214_fu_392_p1(13 - 1 downto 0);

    edge_attr_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge_attr_ce0 <= ap_const_logic_1;
        else 
            edge_attr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_V_address0 <= zext_ln703_8_fu_476_p1(20 - 1 downto 0);

    edge_embedding_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, edge_embedding_V_addr_1_reg_610, ap_enable_reg_pp2_iter1, p_cast_fu_261_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            edge_embedding_V_address1 <= edge_embedding_V_addr_1_reg_610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_address1 <= p_cast_fu_261_p1(20 - 1 downto 0);
        else 
            edge_embedding_V_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edge_embedding_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            edge_embedding_V_ce0 <= ap_const_logic_1;
        else 
            edge_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            edge_embedding_V_ce1 <= ap_const_logic_1;
        else 
            edge_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, add_ln703_fu_491_p2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            edge_embedding_V_d1 <= add_ln703_fu_491_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_d1 <= ap_const_lv32_0;
        else 
            edge_embedding_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edge_embedding_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln215_reg_606, ap_enable_reg_pp2_iter1, exitcond548_fu_255_p2)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln215_reg_606 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond548_fu_255_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            edge_embedding_V_we1 <= ap_const_logic_1;
        else 
            edge_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_table_V_address0 <= zext_ln218_fu_486_p1(15 - 1 downto 0);

    edge_embedding_table_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            edge_embedding_table_V_ce0 <= ap_const_logic_1;
        else 
            edge_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_100_fu_309_p2 <= std_logic_vector(unsigned(p_shl_fu_301_p3) - unsigned(trunc_ln212_fu_293_p1));
    empty_103_fu_356_p1 <= add_ln212_fu_320_p2(11 - 1 downto 0);
    empty_104_fu_397_p1 <= edge_attr_q0(7 - 1 downto 0);
    empty_97_fu_249_p2 <= std_logic_vector(unsigned(empty_reg_167) + unsigned(ap_const_lv20_1));
    empty_99_fu_297_p1 <= e_reg_189(11 - 1 downto 0);
    exitcond548_fu_255_p2 <= "1" when (empty_reg_167 = ap_const_lv20_927C0) else "0";
    grp_fu_503_p0 <= select_ln212_1_fu_340_p3(20 - 1 downto 0);
    grp_fu_503_p1 <= ap_const_lv20_12C(10 - 1 downto 0);
    i_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_211),64));
    icmp_ln199_fu_407_p2 <= "1" when (i_reg_211 = select_ln212_reg_546) else "0";
    icmp_ln212_fu_315_p2 <= "1" when (indvar_flatten_reg_178 = bound_reg_533) else "0";
    icmp_ln213_fu_326_p2 <= "1" when (ef_reg_200 = ap_const_lv2_3) else "0";
    icmp_ln215_fu_457_p2 <= "1" when (dim_reg_234 = ap_const_lv9_12C) else "0";
    layer_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),7));
    mul_i_fu_266_p0 <= layer_cast_reg_515(3 - 1 downto 0);
    mul_i_fu_266_p1 <= ap_const_lv7_D(5 - 1 downto 0);
    mul_ln215_fu_445_p0 <= mul_ln215_fu_445_p00(7 - 1 downto 0);
    mul_ln215_fu_445_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add3_fu_436_p2),15));
    mul_ln215_fu_445_p1 <= ap_const_lv15_12C(10 - 1 downto 0);
    p_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_167),64));
    p_mid1_fu_368_p2 <= std_logic_vector(unsigned(p_shl_mid1_fu_360_p3) - unsigned(trunc_ln212_1_fu_352_p1));
    p_shl2_fu_274_p3 <= (num_of_edges & ap_const_lv2_0);
    p_shl_fu_301_p3 <= (empty_99_fu_297_p1 & ap_const_lv2_0);
    p_shl_mid1_fu_360_p3 <= (empty_103_fu_356_p1 & ap_const_lv2_0);
    select_ln212_1_fu_340_p3 <= 
        add_ln212_fu_320_p2 when (icmp_ln213_fu_326_p2(0) = '1') else 
        e_reg_189;
    select_ln212_2_fu_374_p3 <= 
        p_mid1_fu_368_p2 when (icmp_ln213_fu_326_p2(0) = '1') else 
        empty_100_fu_309_p2;
    select_ln212_fu_332_p3 <= 
        ap_const_lv2_0 when (icmp_ln213_fu_326_p2(0) = '1') else 
        ef_reg_200;
    tmp_fu_431_p2 <= std_logic_vector(unsigned(mul_i_reg_528) + unsigned(addr_cast_fu_427_p1));
    trunc_ln212_1_fu_352_p1 <= add_ln212_fu_320_p2(13 - 1 downto 0);
    trunc_ln212_fu_293_p1 <= e_reg_189(13 - 1 downto 0);
    zext_ln213_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln212_fu_332_p3),13));
    zext_ln214_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln214_fu_386_p2),64));
    zext_ln218_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_481_p2),64));
    zext_ln703_7_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_234),20));
    zext_ln703_8_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_7_fu_471_p2),64));
    zext_ln703_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_234),15));
end behav;
