-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_MLP_PE_147 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mlp_in_local2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mlp_in_local2_ce0 : OUT STD_LOGIC;
    mlp_in_local2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_weight_fifo_2_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_weight_fifo_2_V_V_empty_n : IN STD_LOGIC;
    mlp_1_weight_fifo_2_V_V_read : OUT STD_LOGIC;
    mlp_1_weight_fifo_3_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_weight_fifo_3_V_V_full_n : IN STD_LOGIC;
    mlp_1_weight_fifo_3_V_V_write : OUT STD_LOGIC;
    mlp_1_bias_V_load_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_bias_V_load_loc_empty_n : IN STD_LOGIC;
    mlp_1_bias_V_load_loc_read : OUT STD_LOGIC;
    mlp_out_local5 : OUT STD_LOGIC_VECTOR (30 downto 0);
    mlp_out_local5_ap_vld : OUT STD_LOGIC;
    mlp_1_bias_V_load_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mlp_1_bias_V_load_loc_out_full_n : IN STD_LOGIC;
    mlp_1_bias_V_load_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of GIN_compute_one_graph_MLP_PE_147 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv11_258 : STD_LOGIC_VECTOR (10 downto 0) := "01001011000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mlp_1_weight_fifo_2_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln86_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mlp_1_weight_fifo_3_V_V_blk_n : STD_LOGIC;
    signal mlp_1_bias_V_load_loc_blk_n : STD_LOGIC;
    signal mlp_1_bias_V_load_loc_out_blk_n : STD_LOGIC;
    signal i_reg_134 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_fu_155_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln86_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_275_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter14_state16 : STD_LOGIC;
    signal zext_ln1118_2_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln92_fu_256_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mlp_out_local5_preg : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal shl_ln_fu_167_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1118_fu_175_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1118_fu_179_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_4_fu_214_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lhs_4_fu_220_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal ret_V_fu_228_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_244_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_195_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_urem_11ns_11ns_11_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_32s_32s_54_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;



begin
    urem_11ns_11ns_11_15_1_U85 : component GIN_compute_one_graph_urem_11ns_11ns_11_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_195_p0,
        din1 => ap_const_lv11_258,
        ce => grp_fu_195_ce,
        dout => grp_fu_195_p2);

    mul_32s_32s_54_1_1_U86 : component GIN_compute_one_graph_mul_32s_32s_54_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        din0 => mlp_in_local2_q0,
        din1 => mlp_1_weight_fifo_2_V_V_dout,
        dout => r_V_4_fu_214_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter14_state16)) or (not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter14_state16))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    mlp_out_local5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                mlp_out_local5_preg <= ap_const_lv31_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    mlp_out_local5_preg <= select_ln92_fu_256_p3;
                end if; 
            end if;
        end if;
    end process;


    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln86_fu_161_p2 = ap_const_lv1_0))) then 
                i_reg_134 <= add_ln86_fu_155_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_134 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    lhs_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
                lhs_reg_145 <= ret_V_fu_228_p2(53 downto 22);
            elsif ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_reg_145 <= mlp_1_bias_V_load_loc_dout;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln86_reg_275 <= icmp_ln86_fu_161_p2;
                icmp_ln86_reg_275_pp0_iter1_reg <= icmp_ln86_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln86_reg_275_pp0_iter10_reg <= icmp_ln86_reg_275_pp0_iter9_reg;
                icmp_ln86_reg_275_pp0_iter11_reg <= icmp_ln86_reg_275_pp0_iter10_reg;
                icmp_ln86_reg_275_pp0_iter12_reg <= icmp_ln86_reg_275_pp0_iter11_reg;
                icmp_ln86_reg_275_pp0_iter13_reg <= icmp_ln86_reg_275_pp0_iter12_reg;
                icmp_ln86_reg_275_pp0_iter14_reg <= icmp_ln86_reg_275_pp0_iter13_reg;
                icmp_ln86_reg_275_pp0_iter2_reg <= icmp_ln86_reg_275_pp0_iter1_reg;
                icmp_ln86_reg_275_pp0_iter3_reg <= icmp_ln86_reg_275_pp0_iter2_reg;
                icmp_ln86_reg_275_pp0_iter4_reg <= icmp_ln86_reg_275_pp0_iter3_reg;
                icmp_ln86_reg_275_pp0_iter5_reg <= icmp_ln86_reg_275_pp0_iter4_reg;
                icmp_ln86_reg_275_pp0_iter6_reg <= icmp_ln86_reg_275_pp0_iter5_reg;
                icmp_ln86_reg_275_pp0_iter7_reg <= icmp_ln86_reg_275_pp0_iter6_reg;
                icmp_ln86_reg_275_pp0_iter8_reg <= icmp_ln86_reg_275_pp0_iter7_reg;
                icmp_ln86_reg_275_pp0_iter9_reg <= icmp_ln86_reg_275_pp0_iter8_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mlp_1_bias_V_load_loc_empty_n, mlp_1_bias_V_load_loc_out_full_n, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1118_fu_179_p2 <= std_logic_vector(unsigned(zext_ln1118_fu_175_p1) + unsigned(ap_const_lv13_12C0));
    add_ln86_fu_155_p2 <= std_logic_vector(unsigned(i_reg_134) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(mlp_1_weight_fifo_2_V_V_empty_n, mlp_1_weight_fifo_3_V_V_full_n, ap_enable_reg_pp0_iter15, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_3_V_V_full_n = ap_const_logic_0)) or ((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_2_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(mlp_1_weight_fifo_2_V_V_empty_n, mlp_1_weight_fifo_3_V_V_full_n, ap_enable_reg_pp0_iter15, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_3_V_V_full_n = ap_const_logic_0)) or ((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_2_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(mlp_1_weight_fifo_2_V_V_empty_n, mlp_1_weight_fifo_3_V_V_full_n, ap_enable_reg_pp0_iter15, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_3_V_V_full_n = ap_const_logic_0)) or ((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_2_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mlp_1_bias_V_load_loc_empty_n, mlp_1_bias_V_load_loc_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter15_assign_proc : process(mlp_1_weight_fifo_2_V_V_empty_n, mlp_1_weight_fifo_3_V_V_full_n, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
                ap_block_state17_pp0_stage0_iter15 <= (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_3_V_V_full_n = ap_const_logic_0)) or ((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (mlp_1_weight_fifo_2_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter14_state16_assign_proc : process(ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter14_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter14_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln86_fu_161_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln86_fu_161_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_195_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_195_ce <= ap_const_logic_1;
        else 
            grp_fu_195_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_195_p0 <= add_ln1118_fu_179_p2(12 downto 2);
    icmp_ln86_fu_161_p2 <= "1" when (i_reg_134 = ap_const_lv9_12C) else "0";
    lhs_4_fu_220_p3 <= (lhs_reg_145 & ap_const_lv22_0);

    mlp_1_bias_V_load_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mlp_1_bias_V_load_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mlp_1_bias_V_load_loc_blk_n <= mlp_1_bias_V_load_loc_empty_n;
        else 
            mlp_1_bias_V_load_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mlp_1_bias_V_load_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mlp_1_bias_V_load_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mlp_1_bias_V_load_loc_out_blk_n <= mlp_1_bias_V_load_loc_out_full_n;
        else 
            mlp_1_bias_V_load_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mlp_1_bias_V_load_loc_out_din <= mlp_1_bias_V_load_loc_dout;

    mlp_1_bias_V_load_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mlp_1_bias_V_load_loc_empty_n, mlp_1_bias_V_load_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mlp_1_bias_V_load_loc_out_write <= ap_const_logic_1;
        else 
            mlp_1_bias_V_load_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mlp_1_bias_V_load_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mlp_1_bias_V_load_loc_empty_n, mlp_1_bias_V_load_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mlp_1_bias_V_load_loc_out_full_n = ap_const_logic_0) or (mlp_1_bias_V_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mlp_1_bias_V_load_loc_read <= ap_const_logic_1;
        else 
            mlp_1_bias_V_load_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    mlp_1_weight_fifo_2_V_V_blk_n_assign_proc : process(mlp_1_weight_fifo_2_V_V_empty_n, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
        if (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            mlp_1_weight_fifo_2_V_V_blk_n <= mlp_1_weight_fifo_2_V_V_empty_n;
        else 
            mlp_1_weight_fifo_2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mlp_1_weight_fifo_2_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln86_reg_275_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            mlp_1_weight_fifo_2_V_V_read <= ap_const_logic_1;
        else 
            mlp_1_weight_fifo_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    mlp_1_weight_fifo_3_V_V_blk_n_assign_proc : process(mlp_1_weight_fifo_3_V_V_full_n, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, icmp_ln86_reg_275_pp0_iter14_reg)
    begin
        if (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            mlp_1_weight_fifo_3_V_V_blk_n <= mlp_1_weight_fifo_3_V_V_full_n;
        else 
            mlp_1_weight_fifo_3_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mlp_1_weight_fifo_3_V_V_din <= mlp_1_weight_fifo_2_V_V_dout;

    mlp_1_weight_fifo_3_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln86_reg_275_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln86_reg_275_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            mlp_1_weight_fifo_3_V_V_write <= ap_const_logic_1;
        else 
            mlp_1_weight_fifo_3_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    mlp_in_local2_address0 <= zext_ln1118_2_fu_201_p1(10 - 1 downto 0);

    mlp_in_local2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            mlp_in_local2_ce0 <= ap_const_logic_1;
        else 
            mlp_in_local2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mlp_out_local5_assign_proc : process(select_ln92_fu_256_p3, mlp_out_local5_preg, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mlp_out_local5 <= select_ln92_fu_256_p3;
        else 
            mlp_out_local5 <= mlp_out_local5_preg;
        end if; 
    end process;


    mlp_out_local5_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mlp_out_local5_ap_vld <= ap_const_logic_1;
        else 
            mlp_out_local5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_228_p2 <= std_logic_vector(unsigned(r_V_4_fu_214_p2) + unsigned(lhs_4_fu_220_p3));
    select_ln92_fu_256_p3 <= 
        ap_const_lv31_0 when (tmp_fu_248_p3(0) = '1') else 
        trunc_ln86_fu_244_p1;
    shl_ln_fu_167_p3 <= (i_reg_134 & ap_const_lv2_0);
    tmp_fu_248_p3 <= lhs_reg_145(31 downto 31);
    trunc_ln86_fu_244_p1 <= lhs_reg_145(31 - 1 downto 0);
    zext_ln1118_2_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_195_p2),64));
    zext_ln1118_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_167_p3),13));
end behav;
