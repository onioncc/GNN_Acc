// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_load_mlp_weights_one_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        layer,
        gnn_node_mlp_1_weights_fixed,
        gnn_node_mlp_1_bias_fixed,
        gnn_node_mlp_2_weights_fixed,
        gnn_node_mlp_2_bias_fixed,
        mlp_1_bias_V_address0,
        mlp_1_bias_V_ce0,
        mlp_1_bias_V_we0,
        mlp_1_bias_V_d0,
        mlp_1_weights_V_address0,
        mlp_1_weights_V_ce0,
        mlp_1_weights_V_we0,
        mlp_1_weights_V_d0,
        mlp_2_bias_V_address0,
        mlp_2_bias_V_ce0,
        mlp_2_bias_V_we0,
        mlp_2_bias_V_d0,
        mlp_2_weights_V_address0,
        mlp_2_weights_V_ce0,
        mlp_2_weights_V_we0,
        mlp_2_weights_V_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 25'd2048;
parameter    ap_ST_fsm_state15 = 25'd4096;
parameter    ap_ST_fsm_state16 = 25'd8192;
parameter    ap_ST_fsm_state17 = 25'd16384;
parameter    ap_ST_fsm_state18 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_state21 = 25'd262144;
parameter    ap_ST_fsm_state22 = 25'd524288;
parameter    ap_ST_fsm_state23 = 25'd1048576;
parameter    ap_ST_fsm_state24 = 25'd2097152;
parameter    ap_ST_fsm_state25 = 25'd4194304;
parameter    ap_ST_fsm_pp1_stage0 = 25'd8388608;
parameter    ap_ST_fsm_state29 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [2:0] layer;
input  [63:0] gnn_node_mlp_1_weights_fixed;
input  [63:0] gnn_node_mlp_1_bias_fixed;
input  [63:0] gnn_node_mlp_2_weights_fixed;
input  [63:0] gnn_node_mlp_2_bias_fixed;
output  [9:0] mlp_1_bias_V_address0;
output   mlp_1_bias_V_ce0;
output   mlp_1_bias_V_we0;
output  [31:0] mlp_1_bias_V_d0;
output  [17:0] mlp_1_weights_V_address0;
output   mlp_1_weights_V_ce0;
output   mlp_1_weights_V_we0;
output  [31:0] mlp_1_weights_V_d0;
output  [8:0] mlp_2_bias_V_address0;
output   mlp_2_bias_V_ce0;
output   mlp_2_bias_V_we0;
output  [31:0] mlp_2_bias_V_d0;
output  [17:0] mlp_2_weights_V_address0;
output   mlp_2_weights_V_ce0;
output   mlp_2_weights_V_we0;
output  [31:0] mlp_2_weights_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg[31:0] m_axi_mem_ARLEN;
reg m_axi_mem_RREADY;
reg mlp_1_bias_V_ce0;
reg mlp_1_bias_V_we0;
reg mlp_1_weights_V_ce0;
reg mlp_1_weights_V_we0;
reg mlp_2_bias_V_ce0;
reg mlp_2_bias_V_we0;
reg mlp_2_weights_V_ce0;
reg mlp_2_weights_V_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln289_reg_742;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln295_reg_796;
reg   [8:0] dim_in_reg_277;
reg   [9:0] dim_in_1_reg_323;
wire   [11:0] layer_cast2_fu_334_p1;
reg   [11:0] layer_cast2_reg_672;
wire  signed [62:0] trunc_ln287_cast_fu_386_p1;
reg  signed [62:0] trunc_ln287_cast_reg_677;
wire   [63:0] p_cast5_fu_398_p1;
reg   [63:0] p_cast5_reg_682;
wire  signed [62:0] sext_ln287_fu_418_p1;
reg  signed [62:0] sext_ln287_reg_687;
wire   [9:0] add_ln287_fu_422_p2;
reg   [9:0] add_ln287_reg_692;
wire    ap_CS_fsm_state2;
wire   [17:0] add_ln287_1_fu_428_p2;
reg   [17:0] add_ln287_1_reg_697;
wire   [17:0] add_ln287_2_fu_434_p2;
reg   [17:0] add_ln287_2_reg_702;
reg   [63:0] mem_addr_reg_710;
wire   [0:0] icmp_ln287_fu_440_p2;
reg   [63:0] mem_addr_2_reg_716;
wire  signed [62:0] trunc_ln293_cast_fu_516_p1;
reg  signed [62:0] trunc_ln293_cast_reg_722;
wire  signed [62:0] sext_ln293_fu_534_p1;
reg  signed [62:0] sext_ln293_reg_727;
reg   [31:0] mem_addr_read_reg_732;
wire   [8:0] add_ln289_fu_543_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln289_fu_549_p2;
reg   [0:0] icmp_ln289_reg_742_pp0_iter1_reg;
wire   [17:0] add_ln290_1_fu_559_p2;
reg   [17:0] add_ln290_1_reg_746;
reg   [17:0] add_ln290_1_reg_746_pp0_iter1_reg;
reg   [31:0] mem_addr_2_read_reg_751;
wire   [8:0] add_ln293_fu_569_p2;
reg   [8:0] add_ln293_reg_756;
wire    ap_CS_fsm_state16;
wire   [17:0] add_ln293_1_fu_575_p2;
reg   [17:0] add_ln293_1_reg_761;
wire   [17:0] add_ln293_2_fu_581_p2;
reg   [17:0] add_ln293_2_reg_766;
reg   [63:0] mem_addr_1_reg_774;
wire   [0:0] icmp_ln293_fu_587_p2;
reg   [63:0] mem_addr_3_reg_780;
reg   [31:0] mem_addr_1_read_reg_786;
wire   [9:0] add_ln295_fu_636_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state26_pp1_stage0_iter0;
reg    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_state28_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln295_fu_642_p2;
reg   [0:0] icmp_ln295_reg_796_pp1_iter1_reg;
wire   [17:0] add_ln296_1_fu_652_p2;
reg   [17:0] add_ln296_1_reg_800;
reg   [17:0] add_ln296_1_reg_800_pp1_iter1_reg;
reg   [31:0] mem_addr_3_read_reg_805;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state25;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg    ap_enable_reg_pp1_iter2;
reg   [9:0] dim_out_reg_242;
wire    ap_CS_fsm_state15;
reg   [17:0] phi_mul_reg_254;
reg   [17:0] phi_mul39_reg_266;
reg   [8:0] dim_out_1_reg_288;
wire    ap_CS_fsm_state29;
reg   [17:0] phi_mul41_reg_300;
reg   [17:0] phi_mul43_reg_312;
wire   [63:0] zext_ln287_fu_538_p1;
wire   [63:0] zext_ln290_2_fu_565_p1;
wire   [63:0] zext_ln293_fu_631_p1;
wire   [63:0] zext_ln296_2_fu_658_p1;
wire  signed [63:0] sext_ln288_fu_455_p1;
wire  signed [63:0] sext_ln290_fu_474_p1;
wire  signed [63:0] sext_ln294_fu_602_p1;
wire  signed [63:0] sext_ln296_fu_621_p1;
wire   [2:0] mul_ln287_fu_346_p0;
wire   [10:0] mul_ln287_fu_346_p1;
wire   [2:0] mul_ln287_1_fu_352_p0;
wire   [18:0] mul_ln287_1_fu_352_p1;
wire   [12:0] mul_ln287_fu_346_p2;
wire   [14:0] tmp_fu_358_p3;
wire   [63:0] p_cast_fu_366_p1;
wire   [63:0] empty_fu_370_p2;
wire   [61:0] trunc_ln_fu_376_p4;
wire   [20:0] mul_ln287_1_fu_352_p2;
wire   [22:0] tmp_2_fu_390_p3;
wire   [63:0] empty_66_fu_402_p2;
wire   [61:0] trunc_ln287_1_fu_408_p4;
wire   [62:0] zext_ln287_1_fu_446_p1;
wire   [62:0] add_ln288_fu_450_p2;
wire   [62:0] zext_ln290_fu_465_p1;
wire   [62:0] add_ln290_fu_469_p2;
wire   [2:0] mul_ln293_fu_484_p0;
wire   [9:0] mul_ln293_fu_484_p1;
wire   [11:0] mul_ln293_fu_484_p2;
wire   [13:0] tmp_3_fu_489_p3;
wire   [63:0] p_cast7_fu_497_p1;
wire   [63:0] empty_69_fu_501_p2;
wire   [61:0] trunc_ln1_fu_506_p4;
wire   [63:0] empty_70_fu_520_p2;
wire   [61:0] trunc_ln293_1_fu_524_p4;
wire   [17:0] zext_ln290_1_fu_555_p1;
wire   [62:0] zext_ln293_1_fu_593_p1;
wire   [62:0] add_ln294_fu_597_p2;
wire   [62:0] zext_ln296_fu_612_p1;
wire   [62:0] add_ln296_fu_616_p2;
wire   [17:0] zext_ln296_1_fu_648_p1;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [20:0] mul_ln287_1_fu_352_p00;
wire   [12:0] mul_ln287_fu_346_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

GIN_compute_one_graph_mul_3ns_11ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 13 ))
mul_3ns_11ns_13_1_1_U43(
    .din0(mul_ln287_fu_346_p0),
    .din1(mul_ln287_fu_346_p1),
    .dout(mul_ln287_fu_346_p2)
);

GIN_compute_one_graph_mul_3ns_19ns_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 21 ))
mul_3ns_19ns_21_1_1_U44(
    .din0(mul_ln287_1_fu_352_p0),
    .din1(mul_ln287_1_fu_352_p1),
    .dout(mul_ln287_1_fu_352_p2)
);

GIN_compute_one_graph_mul_3ns_10ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mul_3ns_10ns_12_1_1_U45(
    .din0(mul_ln293_fu_484_p0),
    .din1(mul_ln293_fu_484_p1),
    .dout(mul_ln293_fu_484_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state26)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        dim_in_1_reg_323 <= 10'd0;
    end else if (((icmp_ln295_fu_642_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        dim_in_1_reg_323 <= add_ln295_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dim_in_reg_277 <= 9'd0;
    end else if (((icmp_ln289_fu_549_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dim_in_reg_277 <= add_ln289_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dim_out_1_reg_288 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dim_out_1_reg_288 <= add_ln293_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_out_reg_242 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dim_out_reg_242 <= add_ln287_reg_692;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul39_reg_266 <= 18'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul39_reg_266 <= add_ln287_1_reg_697;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul41_reg_300 <= 18'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_mul41_reg_300 <= add_ln293_2_reg_766;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul43_reg_312 <= 18'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_mul43_reg_312 <= add_ln293_1_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_254 <= 18'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul_reg_254 <= add_ln287_2_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln287_1_reg_697 <= add_ln287_1_fu_428_p2;
        add_ln287_2_reg_702 <= add_ln287_2_fu_434_p2;
        add_ln287_reg_692 <= add_ln287_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln290_1_reg_746 <= add_ln290_1_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln290_1_reg_746_pp0_iter1_reg <= add_ln290_1_reg_746;
        icmp_ln289_reg_742 <= icmp_ln289_fu_549_p2;
        icmp_ln289_reg_742_pp0_iter1_reg <= icmp_ln289_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln293_1_reg_761 <= add_ln293_1_fu_575_p2;
        add_ln293_2_reg_766 <= add_ln293_2_fu_581_p2;
        add_ln293_reg_756 <= add_ln293_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln295_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln296_1_reg_800 <= add_ln296_1_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln296_1_reg_800_pp1_iter1_reg <= add_ln296_1_reg_800;
        icmp_ln295_reg_796 <= icmp_ln295_fu_642_p2;
        icmp_ln295_reg_796_pp1_iter1_reg <= icmp_ln295_reg_796;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        layer_cast2_reg_672[2 : 0] <= layer_cast2_fu_334_p1[2 : 0];
        p_cast5_reg_682[22 : 2] <= p_cast5_fu_398_p1[22 : 2];
        sext_ln287_reg_687 <= sext_ln287_fu_418_p1;
        trunc_ln287_cast_reg_677 <= trunc_ln287_cast_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mem_addr_1_read_reg_786 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        mem_addr_1_reg_774 <= sext_ln294_fu_602_p1;
        mem_addr_3_reg_780 <= sext_ln296_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_742 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mem_addr_2_read_reg_751 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_addr_2_reg_716 <= sext_ln290_fu_474_p1;
        mem_addr_reg_710 <= sext_ln288_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln295_reg_796 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mem_addr_3_read_reg_805 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_addr_read_reg_732 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln293_reg_727 <= sext_ln293_fu_534_p1;
        trunc_ln293_cast_reg_722 <= trunc_ln293_cast_fu_516_p1;
    end
end

always @ (*) begin
    if ((icmp_ln289_fu_549_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln295_fu_642_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln293_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln293_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_mem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            m_axi_mem_ARADDR = mem_addr_3_reg_780;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            m_axi_mem_ARADDR = mem_addr_1_reg_774;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_mem_ARADDR = mem_addr_2_reg_716;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_mem_ARADDR = mem_addr_reg_710;
        end else begin
            m_axi_mem_ARADDR = 'bx;
        end
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        m_axi_mem_ARLEN = 32'd600;
    end else if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_mem_ARLEN = 32'd300;
    end else if ((((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_mem_ARLEN = 32'd1;
    end else begin
        m_axi_mem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((m_axi_mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln295_reg_796 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_742 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln295_reg_796 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_reg_742 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mlp_1_bias_V_ce0 = 1'b1;
    end else begin
        mlp_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mlp_1_bias_V_we0 = 1'b1;
    end else begin
        mlp_1_bias_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mlp_1_weights_V_ce0 = 1'b1;
    end else begin
        mlp_1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln289_reg_742_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mlp_1_weights_V_we0 = 1'b1;
    end else begin
        mlp_1_weights_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        mlp_2_bias_V_ce0 = 1'b1;
    end else begin
        mlp_2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        mlp_2_bias_V_we0 = 1'b1;
    end else begin
        mlp_2_bias_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mlp_2_weights_V_ce0 = 1'b1;
    end else begin
        mlp_2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln295_reg_796_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mlp_2_weights_V_we0 = 1'b1;
    end else begin
        mlp_2_weights_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln287_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln289_fu_549_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln289_fu_549_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln293_fu_587_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln295_fu_642_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln295_fu_642_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln287_1_fu_428_p2 = (phi_mul39_reg_266 + 18'd300);

assign add_ln287_2_fu_434_p2 = (phi_mul_reg_254 + 18'd300);

assign add_ln287_fu_422_p2 = (dim_out_reg_242 + 10'd1);

assign add_ln288_fu_450_p2 = ($signed(trunc_ln287_cast_reg_677) + $signed(zext_ln287_1_fu_446_p1));

assign add_ln289_fu_543_p2 = (dim_in_reg_277 + 9'd1);

assign add_ln290_1_fu_559_p2 = (phi_mul_reg_254 + zext_ln290_1_fu_555_p1);

assign add_ln290_fu_469_p2 = ($signed(zext_ln290_fu_465_p1) + $signed(sext_ln287_reg_687));

assign add_ln293_1_fu_575_p2 = (phi_mul43_reg_312 + 18'd600);

assign add_ln293_2_fu_581_p2 = (phi_mul41_reg_300 + 18'd600);

assign add_ln293_fu_569_p2 = (dim_out_1_reg_288 + 9'd1);

assign add_ln294_fu_597_p2 = ($signed(trunc_ln293_cast_reg_722) + $signed(zext_ln293_1_fu_593_p1));

assign add_ln295_fu_636_p2 = (dim_in_1_reg_323 + 10'd1);

assign add_ln296_1_fu_652_p2 = (phi_mul41_reg_300 + zext_ln296_1_fu_648_p1);

assign add_ln296_fu_616_p2 = ($signed(zext_ln296_fu_612_p1) + $signed(sext_ln293_reg_727));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln289_reg_742 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln289_reg_742 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln295_reg_796 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln295_reg_796 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln289_reg_742 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp1_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln295_reg_796 == 1'd0));
end

assign ap_block_state28_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_66_fu_402_p2 = (p_cast5_fu_398_p1 + gnn_node_mlp_1_weights_fixed);

assign empty_69_fu_501_p2 = (p_cast7_fu_497_p1 + gnn_node_mlp_2_bias_fixed);

assign empty_70_fu_520_p2 = (p_cast5_reg_682 + gnn_node_mlp_2_weights_fixed);

assign empty_fu_370_p2 = (p_cast_fu_366_p1 + gnn_node_mlp_1_bias_fixed);

assign icmp_ln287_fu_440_p2 = ((dim_out_reg_242 == 10'd600) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_549_p2 = ((dim_in_reg_277 == 9'd300) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_587_p2 = ((dim_out_1_reg_288 == 9'd300) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_642_p2 = ((dim_in_1_reg_323 == 10'd600) ? 1'b1 : 1'b0);

assign layer_cast2_fu_334_p1 = layer;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 32'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign mlp_1_bias_V_address0 = zext_ln287_fu_538_p1;

assign mlp_1_bias_V_d0 = mem_addr_read_reg_732;

assign mlp_1_weights_V_address0 = zext_ln290_2_fu_565_p1;

assign mlp_1_weights_V_d0 = mem_addr_2_read_reg_751;

assign mlp_2_bias_V_address0 = zext_ln293_fu_631_p1;

assign mlp_2_bias_V_d0 = mem_addr_1_read_reg_786;

assign mlp_2_weights_V_address0 = zext_ln296_2_fu_658_p1;

assign mlp_2_weights_V_d0 = mem_addr_3_read_reg_805;

assign mul_ln287_1_fu_352_p0 = mul_ln287_1_fu_352_p00;

assign mul_ln287_1_fu_352_p00 = layer;

assign mul_ln287_1_fu_352_p1 = 21'd180000;

assign mul_ln287_fu_346_p0 = mul_ln287_fu_346_p00;

assign mul_ln287_fu_346_p00 = layer;

assign mul_ln287_fu_346_p1 = 13'd600;

assign mul_ln293_fu_484_p0 = layer_cast2_reg_672;

assign mul_ln293_fu_484_p1 = 12'd300;

assign p_cast5_fu_398_p1 = tmp_2_fu_390_p3;

assign p_cast7_fu_497_p1 = tmp_3_fu_489_p3;

assign p_cast_fu_366_p1 = tmp_fu_358_p3;

assign sext_ln287_fu_418_p1 = $signed(trunc_ln287_1_fu_408_p4);

assign sext_ln288_fu_455_p1 = $signed(add_ln288_fu_450_p2);

assign sext_ln290_fu_474_p1 = $signed(add_ln290_fu_469_p2);

assign sext_ln293_fu_534_p1 = $signed(trunc_ln293_1_fu_524_p4);

assign sext_ln294_fu_602_p1 = $signed(add_ln294_fu_597_p2);

assign sext_ln296_fu_621_p1 = $signed(add_ln296_fu_616_p2);

assign tmp_2_fu_390_p3 = {{mul_ln287_1_fu_352_p2}, {2'd0}};

assign tmp_3_fu_489_p3 = {{mul_ln293_fu_484_p2}, {2'd0}};

assign tmp_fu_358_p3 = {{mul_ln287_fu_346_p2}, {2'd0}};

assign trunc_ln1_fu_506_p4 = {{empty_69_fu_501_p2[63:2]}};

assign trunc_ln287_1_fu_408_p4 = {{empty_66_fu_402_p2[63:2]}};

assign trunc_ln287_cast_fu_386_p1 = $signed(trunc_ln_fu_376_p4);

assign trunc_ln293_1_fu_524_p4 = {{empty_70_fu_520_p2[63:2]}};

assign trunc_ln293_cast_fu_516_p1 = $signed(trunc_ln1_fu_506_p4);

assign trunc_ln_fu_376_p4 = {{empty_fu_370_p2[63:2]}};

assign zext_ln287_1_fu_446_p1 = dim_out_reg_242;

assign zext_ln287_fu_538_p1 = dim_out_reg_242;

assign zext_ln290_1_fu_555_p1 = dim_in_reg_277;

assign zext_ln290_2_fu_565_p1 = add_ln290_1_reg_746_pp0_iter1_reg;

assign zext_ln290_fu_465_p1 = phi_mul39_reg_266;

assign zext_ln293_1_fu_593_p1 = dim_out_1_reg_288;

assign zext_ln293_fu_631_p1 = dim_out_1_reg_288;

assign zext_ln296_1_fu_648_p1 = dim_in_1_reg_323;

assign zext_ln296_2_fu_658_p1 = add_ln296_1_reg_800_pp1_iter1_reg;

assign zext_ln296_fu_612_p1 = phi_mul43_reg_312;

always @ (posedge ap_clk) begin
    layer_cast2_reg_672[11:3] <= 9'b000000000;
    p_cast5_reg_682[1:0] <= 2'b00;
    p_cast5_reg_682[63:23] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //GIN_compute_one_graph_load_mlp_weights_one_layer
