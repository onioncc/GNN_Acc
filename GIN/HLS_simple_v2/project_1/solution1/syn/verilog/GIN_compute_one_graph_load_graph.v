// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_load_graph (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        node_feature_in,
        edge_list_in,
        edge_attr_in,
        num_of_nodes,
        num_of_edges,
        node_feature_address1,
        node_feature_ce1,
        node_feature_we1,
        node_feature_d1,
        edge_attr_address1,
        edge_attr_ce1,
        edge_attr_we1,
        edge_attr_d1,
        edge_list_address1,
        edge_list_ce1,
        edge_list_we1,
        edge_list_d1
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_pp0_stage0 = 28'd256;
parameter    ap_ST_fsm_state12 = 28'd512;
parameter    ap_ST_fsm_state13 = 28'd1024;
parameter    ap_ST_fsm_state14 = 28'd2048;
parameter    ap_ST_fsm_state15 = 28'd4096;
parameter    ap_ST_fsm_state16 = 28'd8192;
parameter    ap_ST_fsm_state17 = 28'd16384;
parameter    ap_ST_fsm_state18 = 28'd32768;
parameter    ap_ST_fsm_state19 = 28'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 28'd131072;
parameter    ap_ST_fsm_state23 = 28'd262144;
parameter    ap_ST_fsm_state24 = 28'd524288;
parameter    ap_ST_fsm_state25 = 28'd1048576;
parameter    ap_ST_fsm_state26 = 28'd2097152;
parameter    ap_ST_fsm_state27 = 28'd4194304;
parameter    ap_ST_fsm_state28 = 28'd8388608;
parameter    ap_ST_fsm_state29 = 28'd16777216;
parameter    ap_ST_fsm_state30 = 28'd33554432;
parameter    ap_ST_fsm_pp2_stage0 = 28'd67108864;
parameter    ap_ST_fsm_state34 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [63:0] node_feature_in;
input  [63:0] edge_list_in;
input  [63:0] edge_attr_in;
input  [31:0] num_of_nodes;
input  [31:0] num_of_edges;
output  [13:0] node_feature_address1;
output   node_feature_ce1;
output   node_feature_we1;
output  [31:0] node_feature_d1;
output  [12:0] edge_attr_address1;
output   edge_attr_ce1;
output   edge_attr_we1;
output  [31:0] edge_attr_d1;
output  [11:0] edge_list_address1;
output   edge_list_ce1;
output   edge_list_we1;
output  [31:0] edge_list_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg[31:0] m_axi_mem_ARLEN;
reg m_axi_mem_RREADY;
reg node_feature_ce1;
reg node_feature_we1;
reg edge_attr_ce1;
reg edge_attr_we1;
reg edge_list_ce1;
reg edge_list_we1;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln375_reg_442;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln375_1_reg_480;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln379_1_reg_520;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln383_1_reg_554;
reg   [30:0] i_reg_206;
reg   [30:0] i_reg_206_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] i_1_reg_218;
reg   [30:0] i_1_reg_218_pp1_iter1_reg;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [30:0] i_2_reg_230;
reg   [30:0] i_2_reg_230_pp2_iter1_reg;
wire    ap_block_state31_pp2_stage0_iter0;
reg    ap_block_state32_pp2_stage0_iter1;
wire    ap_block_state33_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [30:0] empty_73_fu_248_p1;
reg   [30:0] empty_73_reg_427;
wire   [27:0] empty_74_fu_252_p1;
reg   [27:0] empty_74_reg_432;
wire   [31:0] mul_fu_256_p2;
reg   [31:0] mul_reg_437;
wire   [0:0] icmp_ln375_fu_262_p2;
wire   [30:0] add_ln375_1_fu_275_p2;
reg   [30:0] add_ln375_1_reg_464;
wire   [30:0] add_ln375_fu_301_p2;
reg   [30:0] add_ln375_reg_475;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln375_1_fu_307_p2;
reg   [0:0] icmp_ln375_1_reg_480_pp0_iter1_reg;
reg   [31:0] mem_addr_read_reg_484;
wire   [29:0] empty_77_fu_317_p1;
reg   [29:0] empty_77_reg_489;
wire    ap_CS_fsm_state12;
wire   [31:0] mul4_fu_325_p2;
reg   [31:0] mul4_reg_494;
wire   [0:0] icmp_ln379_fu_330_p2;
reg   [63:0] mem_addr_4_reg_504;
wire   [30:0] trunc_ln379_fu_355_p1;
reg   [30:0] trunc_ln379_reg_510;
wire   [30:0] add_ln379_fu_358_p2;
reg   [30:0] add_ln379_reg_515;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln379_1_fu_364_p2;
reg   [0:0] icmp_ln379_1_reg_520_pp1_iter1_reg;
reg   [31:0] mem_addr_4_read_reg_524;
wire   [31:0] empty_81_fu_374_p2;
reg   [31:0] empty_81_reg_529;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln383_fu_379_p2;
reg   [63:0] mem_addr_5_reg_538;
wire   [30:0] trunc_ln383_1_fu_404_p3;
reg   [30:0] trunc_ln383_1_reg_544;
wire    ap_CS_fsm_state30;
wire   [30:0] add_ln383_fu_411_p2;
reg   [30:0] add_ln383_reg_549;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln383_1_fu_417_p2;
reg   [0:0] icmp_ln383_1_reg_554_pp2_iter1_reg;
reg   [31:0] mem_addr_5_read_reg_558;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state31;
reg    ap_enable_reg_pp2_iter2;
reg   [30:0] ap_phi_mux_i_phi_fu_210_p4;
reg   [30:0] ap_phi_mux_i_1_phi_fu_222_p4;
reg   [30:0] ap_phi_mux_i_2_phi_fu_234_p4;
wire   [63:0] i_cast_fu_312_p1;
wire   [63:0] i_1_cast_fu_369_p1;
wire   [63:0] i_2_cast_fu_422_p1;
wire  signed [63:0] sext_ln375_fu_290_p1;
wire  signed [63:0] sext_ln379_fu_345_p1;
wire  signed [63:0] sext_ln383_fu_394_p1;
reg    ap_block_state2_io;
wire   [31:0] empty_fu_242_p2;
wire   [30:0] p_shl_cast_fu_268_p3;
wire   [61:0] trunc_ln_fu_280_p4;
wire   [31:0] empty_78_fu_320_p2;
wire   [61:0] trunc_ln2_fu_336_p4;
wire   [61:0] trunc_ln3_fu_385_p4;
wire    ap_CS_fsm_state34;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state31)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_1_reg_218 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_218 <= add_ln379_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_2_reg_230 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_230 <= add_ln383_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_206 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln375_1_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_206 <= add_ln375_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln375_reg_442 == 1'd1))) begin
        add_ln375_1_reg_464 <= add_ln375_1_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln375_reg_475 <= add_ln375_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln379_reg_515 <= add_ln379_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln383_reg_549 <= add_ln383_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_73_reg_427 <= empty_73_fu_248_p1;
        empty_74_reg_432 <= empty_74_fu_252_p1;
        icmp_ln375_reg_442 <= icmp_ln375_fu_262_p2;
        mul_reg_437 <= mul_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_77_reg_489 <= empty_77_fu_317_p1;
        mul4_reg_494 <= mul4_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        empty_81_reg_529[31 : 1] <= empty_81_fu_374_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_218_pp1_iter1_reg <= i_1_reg_218;
        icmp_ln379_1_reg_520 <= icmp_ln379_1_fu_364_p2;
        icmp_ln379_1_reg_520_pp1_iter1_reg <= icmp_ln379_1_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_230_pp2_iter1_reg <= i_2_reg_230;
        icmp_ln383_1_reg_554 <= icmp_ln383_1_fu_417_p2;
        icmp_ln383_1_reg_554_pp2_iter1_reg <= icmp_ln383_1_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_206_pp0_iter1_reg <= i_reg_206;
        icmp_ln375_1_reg_480 <= icmp_ln375_1_fu_307_p2;
        icmp_ln375_1_reg_480_pp0_iter1_reg <= icmp_ln375_1_reg_480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln379_1_reg_520 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mem_addr_4_read_reg_524 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln379_fu_330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        mem_addr_4_reg_504 <= sext_ln379_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln383_1_reg_554 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mem_addr_5_read_reg_558 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln383_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        mem_addr_5_reg_538 <= sext_ln383_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln375_1_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mem_addr_read_reg_484 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln379_reg_510 <= trunc_ln379_fu_355_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        trunc_ln383_1_reg_544[30 : 1] <= trunc_ln383_1_fu_404_p3[30 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln375_1_fu_307_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln379_1_fu_364_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln383_1_fu_417_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_222_p4 = add_ln379_reg_515;
    end else begin
        ap_phi_mux_i_1_phi_fu_222_p4 = i_1_reg_218;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_2_phi_fu_234_p4 = add_ln383_reg_549;
    end else begin
        ap_phi_mux_i_2_phi_fu_234_p4 = i_2_reg_230;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln375_1_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_210_p4 = add_ln375_reg_475;
    end else begin
        ap_phi_mux_i_phi_fu_210_p4 = i_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_ce1 = 1'b1;
    end else begin
        edge_attr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln379_1_reg_520_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        edge_attr_we1 = 1'b1;
    end else begin
        edge_attr_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln383_1_reg_554_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_list_we1 = 1'b1;
    end else begin
        edge_list_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        m_axi_mem_ARADDR = mem_addr_5_reg_538;
    end else if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_mem_ARADDR = mem_addr_4_reg_504;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln375_reg_442 == 1'd1))) begin
        m_axi_mem_ARADDR = sext_ln375_fu_290_p1;
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        m_axi_mem_ARLEN = empty_81_reg_529;
    end else if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_mem_ARLEN = mul4_reg_494;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln375_reg_442 == 1'd1))) begin
        m_axi_mem_ARLEN = mul_reg_437;
    end else begin
        m_axi_mem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln375_reg_442 == 1'd1)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln375_1_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln375_reg_442 == 1'd1)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln375_1_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        node_feature_ce1 = 1'b1;
    end else begin
        node_feature_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln375_1_reg_480_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        node_feature_we1 = 1'b1;
    end else begin
        node_feature_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln375_reg_442 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln375_reg_442 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln375_1_fu_307_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln375_1_fu_307_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln379_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln379_1_fu_364_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln379_1_fu_364_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln383_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((m_axi_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln383_1_fu_417_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln383_1_fu_417_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln375_1_fu_275_p2 = (p_shl_cast_fu_268_p3 + empty_73_reg_427);

assign add_ln375_fu_301_p2 = (ap_phi_mux_i_phi_fu_210_p4 + 31'd1);

assign add_ln379_fu_358_p2 = (ap_phi_mux_i_1_phi_fu_222_p4 + 31'd1);

assign add_ln383_fu_411_p2 = (ap_phi_mux_i_2_phi_fu_234_p4 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln375_1_reg_480 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln375_1_reg_480 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln379_1_reg_520 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln383_1_reg_554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln375_1_reg_480 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln379_1_reg_520 == 1'd0));
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_mem_ARREADY == 1'b0) & (icmp_ln375_reg_442 == 1'd1));
end

assign ap_block_state31_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp2_stage0_iter1 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln383_1_reg_554 == 1'd0));
end

assign ap_block_state33_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign edge_attr_address1 = i_1_cast_fu_369_p1;

assign edge_attr_d1 = mem_addr_4_read_reg_524;

assign edge_list_address1 = i_2_cast_fu_422_p1;

assign edge_list_d1 = mem_addr_5_read_reg_558;

assign empty_73_fu_248_p1 = num_of_nodes[30:0];

assign empty_74_fu_252_p1 = num_of_nodes[27:0];

assign empty_77_fu_317_p1 = num_of_edges[29:0];

assign empty_78_fu_320_p2 = num_of_edges << 32'd2;

assign empty_81_fu_374_p2 = num_of_edges << 32'd1;

assign empty_fu_242_p2 = num_of_nodes << 32'd3;

assign i_1_cast_fu_369_p1 = i_1_reg_218_pp1_iter1_reg;

assign i_2_cast_fu_422_p1 = i_2_reg_230_pp2_iter1_reg;

assign i_cast_fu_312_p1 = i_reg_206_pp0_iter1_reg;

assign icmp_ln375_1_fu_307_p2 = ((ap_phi_mux_i_phi_fu_210_p4 == add_ln375_1_reg_464) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_262_p2 = (($signed(mul_fu_256_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln379_1_fu_364_p2 = ((ap_phi_mux_i_1_phi_fu_222_p4 == trunc_ln379_reg_510) ? 1'b1 : 1'b0);

assign icmp_ln379_fu_330_p2 = (($signed(mul4_fu_325_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln383_1_fu_417_p2 = ((ap_phi_mux_i_2_phi_fu_234_p4 == trunc_ln383_1_reg_544) ? 1'b1 : 1'b0);

assign icmp_ln383_fu_379_p2 = (($signed(empty_81_fu_374_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 32'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign mul4_fu_325_p2 = (empty_78_fu_320_p2 - num_of_edges);

assign mul_fu_256_p2 = (empty_fu_242_p2 + num_of_nodes);

assign node_feature_address1 = i_cast_fu_312_p1;

assign node_feature_d1 = mem_addr_read_reg_484;

assign p_shl_cast_fu_268_p3 = {{empty_74_reg_432}, {3'd0}};

assign sext_ln375_fu_290_p1 = $signed(trunc_ln_fu_280_p4);

assign sext_ln379_fu_345_p1 = $signed(trunc_ln2_fu_336_p4);

assign sext_ln383_fu_394_p1 = $signed(trunc_ln3_fu_385_p4);

assign trunc_ln2_fu_336_p4 = {{edge_attr_in[63:2]}};

assign trunc_ln379_fu_355_p1 = mul4_reg_494[30:0];

assign trunc_ln383_1_fu_404_p3 = {{empty_77_reg_489}, {1'd0}};

assign trunc_ln3_fu_385_p4 = {{edge_list_in[63:2]}};

assign trunc_ln_fu_280_p4 = {{node_feature_in[63:2]}};

always @ (posedge ap_clk) begin
    empty_81_reg_529[0] <= 1'b0;
    trunc_ln383_1_reg_544[0] <= 1'b0;
end

endmodule //GIN_compute_one_graph_load_graph
