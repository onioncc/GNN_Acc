// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_message_passing (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_edges,
        message_V_address0,
        message_V_ce0,
        message_V_q0,
        message_V_address1,
        message_V_ce1,
        message_V_we1,
        message_V_d1,
        edge_list_address0,
        edge_list_ce0,
        edge_list_q0,
        edge_list_address1,
        edge_list_ce1,
        edge_list_q1,
        edge_embedding_V_address0,
        edge_embedding_V_ce0,
        edge_embedding_V_q0,
        node_embedding_V_address0,
        node_embedding_V_ce0,
        node_embedding_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_of_edges;
output  [18:0] message_V_address0;
output   message_V_ce0;
input  [31:0] message_V_q0;
output  [18:0] message_V_address1;
output   message_V_ce1;
output   message_V_we1;
output  [31:0] message_V_d1;
output  [11:0] edge_list_address0;
output   edge_list_ce0;
input  [31:0] edge_list_q0;
output  [11:0] edge_list_address1;
output   edge_list_ce1;
input  [31:0] edge_list_q1;
output  [19:0] edge_embedding_V_address0;
output   edge_embedding_V_ce0;
input  [31:0] edge_embedding_V_q0;
output  [18:0] node_embedding_V_address0;
output   node_embedding_V_ce0;
input  [31:0] node_embedding_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg message_V_ce0;
reg[18:0] message_V_address1;
reg message_V_ce1;
reg message_V_we1;
reg[31:0] message_V_d1;
reg edge_list_ce0;
reg edge_list_ce1;
reg edge_embedding_V_ce0;
reg node_embedding_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [40:0] indvar_flatten_reg_172;
reg   [31:0] e_reg_183;
reg   [8:0] dim_reg_194;
wire   [18:0] empty_70_fu_205_p2;
wire    ap_CS_fsm_state2;
wire   [40:0] mul_ln47_fu_225_p2;
reg   [40:0] mul_ln47_reg_440;
wire    ap_CS_fsm_state3;
wire   [40:0] add_ln47_1_fu_231_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_state7_pp1_stage0_iter3;
wire    ap_block_state8_pp1_stage0_iter4;
wire    ap_block_state9_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln47_fu_249_p2;
reg   [0:0] icmp_ln47_reg_450;
reg   [0:0] icmp_ln47_reg_450_pp1_iter1_reg;
reg   [0:0] icmp_ln47_reg_450_pp1_iter2_reg;
reg   [0:0] icmp_ln47_reg_450_pp1_iter3_reg;
reg   [0:0] icmp_ln47_reg_450_pp1_iter4_reg;
wire   [8:0] select_ln47_fu_266_p3;
reg   [8:0] select_ln47_reg_454;
reg   [8:0] select_ln47_reg_454_pp1_iter1_reg;
reg   [8:0] select_ln47_reg_454_pp1_iter2_reg;
wire   [31:0] select_ln47_1_fu_274_p3;
reg   [31:0] select_ln47_1_reg_460;
wire   [8:0] add_ln51_fu_322_p2;
wire   [18:0] zext_ln703_fu_339_p1;
wire  signed [19:0] grp_fu_401_p3;
reg  signed [19:0] add_ln703_1_reg_506;
reg    ap_enable_reg_pp1_iter3;
reg   [18:0] message_V_addr_1_reg_516;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg   [18:0] empty_reg_161;
wire   [0:0] exitcond974_fu_211_p2;
reg   [31:0] ap_phi_mux_e_phi_fu_187_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] p_cast_fu_217_p1;
wire   [63:0] zext_ln47_1_fu_306_p1;
wire   [63:0] zext_ln47_2_fu_317_p1;
wire   [63:0] zext_ln703_2_fu_342_p1;
wire   [63:0] zext_ln703_3_fu_346_p1;
wire   [63:0] zext_ln703_4_fu_350_p1;
wire   [31:0] add_ln703_fu_394_p2;
wire   [31:0] mul_ln47_fu_225_p0;
wire   [9:0] mul_ln47_fu_225_p1;
wire   [10:0] trunc_ln48_fu_237_p1;
wire   [0:0] icmp_ln51_fu_260_p2;
wire   [31:0] add_ln47_fu_254_p2;
wire   [10:0] trunc_ln48_1_fu_286_p1;
wire   [11:0] shl_ln48_mid1_fu_290_p3;
wire   [11:0] shl_ln_fu_241_p3;
wire   [11:0] select_ln47_2_fu_298_p3;
wire   [11:0] or_ln47_fu_311_p2;
wire  signed [18:0] grp_fu_418_p3;
wire  signed [18:0] grp_fu_409_p3;
wire   [30:0] trunc_ln703_4_fu_358_p1;
wire   [30:0] trunc_ln703_3_fu_354_p1;
wire   [31:0] msg_V_fu_362_p2;
wire   [0:0] tmp_fu_374_p3;
wire   [30:0] add_ln53_fu_368_p2;
wire   [30:0] msg_V_1_fu_382_p3;
wire   [31:0] zext_ln53_fu_390_p1;
wire  signed [19:0] grp_fu_401_p0;
wire   [9:0] grp_fu_401_p1;
wire   [8:0] grp_fu_401_p2;
wire  signed [18:0] grp_fu_409_p0;
wire   [9:0] grp_fu_409_p1;
wire   [8:0] grp_fu_409_p2;
wire  signed [18:0] grp_fu_418_p0;
wire   [9:0] grp_fu_418_p1;
wire   [8:0] grp_fu_418_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [19:0] grp_fu_401_p20;
wire   [40:0] mul_ln47_fu_225_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
end

GIN_compute_one_graph_mul_32ns_10ns_41_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 41 ))
mul_32ns_10ns_41_1_1_U31(
    .din0(mul_ln47_fu_225_p0),
    .din1(mul_ln47_fu_225_p1),
    .dout(mul_ln47_fu_225_p2)
);

GIN_compute_one_graph_mac_muladd_20s_10ns_9ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 20 ))
mac_muladd_20s_10ns_9ns_20_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_401_p0),
    .din1(grp_fu_401_p1),
    .din2(grp_fu_401_p2),
    .ce(1'b1),
    .dout(grp_fu_401_p3)
);

GIN_compute_one_graph_mac_muladd_19s_10ns_9ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 19 ))
mac_muladd_19s_10ns_9ns_19_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_409_p0),
    .din1(grp_fu_409_p1),
    .din2(grp_fu_409_p2),
    .ce(1'b1),
    .dout(grp_fu_409_p3)
);

GIN_compute_one_graph_mac_muladd_19s_10ns_9ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 19 ))
mac_muladd_19s_10ns_9ns_19_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_418_p0),
    .din1(grp_fu_418_p1),
    .din2(grp_fu_418_p2),
    .ce(1'b1),
    .dout(grp_fu_418_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln47_fu_249_p2 == 1'd0))) begin
        dim_reg_194 <= add_ln51_fu_322_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dim_reg_194 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln47_reg_450 == 1'd0))) begin
        e_reg_183 <= select_ln47_1_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        e_reg_183 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond974_fu_211_p2 == 1'd0))) begin
        empty_reg_161 <= empty_70_fu_205_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_161 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln47_fu_249_p2 == 1'd0))) begin
        indvar_flatten_reg_172 <= add_ln47_1_fu_231_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_172 <= 41'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln47_reg_450_pp1_iter2_reg == 1'd0))) begin
        add_ln703_1_reg_506 <= grp_fu_401_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln47_reg_450 <= icmp_ln47_fu_249_p2;
        icmp_ln47_reg_450_pp1_iter1_reg <= icmp_ln47_reg_450;
        select_ln47_reg_454_pp1_iter1_reg <= select_ln47_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln47_reg_450_pp1_iter2_reg <= icmp_ln47_reg_450_pp1_iter1_reg;
        icmp_ln47_reg_450_pp1_iter3_reg <= icmp_ln47_reg_450_pp1_iter2_reg;
        icmp_ln47_reg_450_pp1_iter4_reg <= icmp_ln47_reg_450_pp1_iter3_reg;
        select_ln47_reg_454_pp1_iter2_reg <= select_ln47_reg_454_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln47_reg_450_pp1_iter3_reg == 1'd0))) begin
        message_V_addr_1_reg_516 <= zext_ln703_3_fu_346_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln47_reg_440 <= mul_ln47_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln47_fu_249_p2 == 1'd0))) begin
        select_ln47_1_reg_460 <= select_ln47_1_fu_274_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln47_fu_249_p2 == 1'd0))) begin
        select_ln47_reg_454 <= select_ln47_fu_266_p3;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_249_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln47_reg_450 == 1'd0))) begin
        ap_phi_mux_e_phi_fu_187_p4 = select_ln47_1_reg_460;
    end else begin
        ap_phi_mux_e_phi_fu_187_p4 = e_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        edge_embedding_V_ce0 = 1'b1;
    end else begin
        edge_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        edge_list_ce0 = 1'b1;
    end else begin
        edge_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        edge_list_ce1 = 1'b1;
    end else begin
        edge_list_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        message_V_address1 = message_V_addr_1_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        message_V_address1 = p_cast_fu_217_p1;
    end else begin
        message_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        message_V_ce0 = 1'b1;
    end else begin
        message_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
        message_V_ce1 = 1'b1;
    end else begin
        message_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        message_V_d1 = add_ln703_fu_394_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        message_V_d1 = 32'd0;
    end else begin
        message_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln47_reg_450_pp1_iter4_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond974_fu_211_p2 == 1'd0)))) begin
        message_V_we1 = 1'b1;
    end else begin
        message_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        node_embedding_V_ce0 = 1'b1;
    end else begin
        node_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond974_fu_211_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln47_fu_249_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln47_fu_249_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1) & (ap_enable_reg_pp1_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_1_fu_231_p2 = (indvar_flatten_reg_172 + 41'd1);

assign add_ln47_fu_254_p2 = (ap_phi_mux_e_phi_fu_187_p4 + 32'd1);

assign add_ln51_fu_322_p2 = (select_ln47_fu_266_p3 + 9'd1);

assign add_ln53_fu_368_p2 = (trunc_ln703_4_fu_358_p1 + trunc_ln703_3_fu_354_p1);

assign add_ln703_fu_394_p2 = (message_V_q0 + zext_ln53_fu_390_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign edge_embedding_V_address0 = zext_ln703_2_fu_342_p1;

assign edge_list_address0 = zext_ln47_2_fu_317_p1;

assign edge_list_address1 = zext_ln47_1_fu_306_p1;

assign empty_70_fu_205_p2 = (empty_reg_161 + 19'd1);

assign exitcond974_fu_211_p2 = ((empty_reg_161 == 19'd300000) ? 1'b1 : 1'b0);

assign grp_fu_401_p0 = select_ln47_1_fu_274_p3[19:0];

assign grp_fu_401_p1 = 20'd300;

assign grp_fu_401_p2 = grp_fu_401_p20;

assign grp_fu_401_p20 = select_ln47_reg_454_pp1_iter1_reg;

assign grp_fu_409_p0 = edge_list_q1[18:0];

assign grp_fu_409_p1 = 19'd300;

assign grp_fu_409_p2 = zext_ln703_fu_339_p1;

assign grp_fu_418_p0 = edge_list_q0[18:0];

assign grp_fu_418_p1 = 19'd300;

assign grp_fu_418_p2 = zext_ln703_fu_339_p1;

assign icmp_ln47_fu_249_p2 = ((indvar_flatten_reg_172 == mul_ln47_reg_440) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_260_p2 = ((dim_reg_194 == 9'd300) ? 1'b1 : 1'b0);

assign message_V_address0 = zext_ln703_3_fu_346_p1;

assign msg_V_1_fu_382_p3 = ((tmp_fu_374_p3[0:0] == 1'b1) ? 31'd0 : add_ln53_fu_368_p2);

assign msg_V_fu_362_p2 = (node_embedding_V_q0 + edge_embedding_V_q0);

assign mul_ln47_fu_225_p0 = mul_ln47_fu_225_p00;

assign mul_ln47_fu_225_p00 = num_of_edges;

assign mul_ln47_fu_225_p1 = 41'd300;

assign node_embedding_V_address0 = zext_ln703_4_fu_350_p1;

assign or_ln47_fu_311_p2 = (select_ln47_2_fu_298_p3 | 12'd1);

assign p_cast_fu_217_p1 = empty_reg_161;

assign select_ln47_1_fu_274_p3 = ((icmp_ln51_fu_260_p2[0:0] == 1'b1) ? add_ln47_fu_254_p2 : ap_phi_mux_e_phi_fu_187_p4);

assign select_ln47_2_fu_298_p3 = ((icmp_ln51_fu_260_p2[0:0] == 1'b1) ? shl_ln48_mid1_fu_290_p3 : shl_ln_fu_241_p3);

assign select_ln47_fu_266_p3 = ((icmp_ln51_fu_260_p2[0:0] == 1'b1) ? 9'd0 : dim_reg_194);

assign shl_ln48_mid1_fu_290_p3 = {{trunc_ln48_1_fu_286_p1}, {1'd0}};

assign shl_ln_fu_241_p3 = {{trunc_ln48_fu_237_p1}, {1'd0}};

assign tmp_fu_374_p3 = msg_V_fu_362_p2[32'd31];

assign trunc_ln48_1_fu_286_p1 = add_ln47_fu_254_p2[10:0];

assign trunc_ln48_fu_237_p1 = ap_phi_mux_e_phi_fu_187_p4[10:0];

assign trunc_ln703_3_fu_354_p1 = edge_embedding_V_q0[30:0];

assign trunc_ln703_4_fu_358_p1 = node_embedding_V_q0[30:0];

assign zext_ln47_1_fu_306_p1 = select_ln47_2_fu_298_p3;

assign zext_ln47_2_fu_317_p1 = or_ln47_fu_311_p2;

assign zext_ln53_fu_390_p1 = msg_V_1_fu_382_p3;

assign zext_ln703_2_fu_342_p1 = $unsigned(add_ln703_1_reg_506);

assign zext_ln703_3_fu_346_p1 = $unsigned(grp_fu_418_p3);

assign zext_ln703_4_fu_350_p1 = $unsigned(grp_fu_409_p3);

assign zext_ln703_fu_339_p1 = select_ln47_reg_454_pp1_iter2_reg;

endmodule //GIN_compute_one_graph_message_passing
