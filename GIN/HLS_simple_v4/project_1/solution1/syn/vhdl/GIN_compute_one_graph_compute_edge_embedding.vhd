-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_edge_embedding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    edge_embedding_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    edge_embedding_V_ce0 : OUT STD_LOGIC;
    edge_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_embedding_V_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    edge_embedding_V_ce1 : OUT STD_LOGIC;
    edge_embedding_V_we1 : OUT STD_LOGIC;
    edge_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    edge_attr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_attr_ce0 : OUT STD_LOGIC;
    edge_attr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_edge_embedding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2EE0 : STD_LOGIC_VECTOR (13 downto 0) := "10111011100000";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv15_12C : STD_LOGIC_VECTOR (14 downto 0) := "000000100101100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal edge_embedding_table_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal edge_embedding_table_V_ce0 : STD_LOGIC;
    signal edge_embedding_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dim_reg_219 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_cast_fu_230_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_cast_reg_487 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_59_fu_234_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_i_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_i_reg_500 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln180_1_fu_256_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln180_1_reg_505 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln180_fu_302_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln180_reg_513 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln180_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_1_fu_310_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln180_1_reg_519 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln703_fu_366_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln703_reg_530 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln182_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln182_reg_535 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln167_fu_376_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal addr_2_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln167_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln183_fu_433_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln183_reg_553 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln183_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln183_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_embedding_V_addr_1_reg_567 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln181_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal empty_reg_152 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond537_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_163 : STD_LOGIC_VECTOR (6 downto 0);
    signal e_reg_174 : STD_LOGIC_VECTOR (5 downto 0);
    signal ef_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_196 : STD_LOGIC_VECTOR (1 downto 0);
    signal addr_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln182_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_31_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln186_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_fu_251_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_i_fu_251_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_fu_262_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln181_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln180_fu_290_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_mid1_fu_322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_mid1_fu_330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln180_1_fu_318_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_334_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_61_fu_278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln181_fu_348_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln180_2_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln182_fu_352_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln703_fu_366_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln703_fu_366_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln168_fu_387_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal merge_i_fu_395_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal merge_i_fu_395_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_fu_415_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add5_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln183_fu_433_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln183_fu_433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_30_fu_451_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_38_fu_455_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln186_fu_465_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln183_fu_433_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln703_fu_366_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_3ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_6ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component GIN_compute_one_graph_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_7ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_edge_embedding_edge_embedding_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    edge_embedding_table_V_U : component GIN_compute_one_graph_compute_edge_embedding_edge_embedding_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 19500,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edge_embedding_table_V_address0,
        ce0 => edge_embedding_table_V_ce0,
        q0 => edge_embedding_table_V_q0);

    mul_3ns_5ns_7_1_1_U16 : component GIN_compute_one_graph_mul_3ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_i_fu_251_p0,
        din1 => mul_i_fu_251_p1,
        dout => mul_i_fu_251_p2);

    mul_6ns_10ns_15_1_1_U17 : component GIN_compute_one_graph_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln703_fu_366_p0,
        din1 => mul_ln703_fu_366_p1,
        dout => mul_ln703_fu_366_p2);

    mux_42_32_1_1_U18 : component GIN_compute_one_graph_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_5,
        din1 => ap_const_lv32_6,
        din2 => ap_const_lv32_2,
        din3 => ap_const_lv32_2,
        din4 => merge_i_fu_395_p5,
        dout => merge_i_fu_395_p6);

    mul_7ns_10ns_15_1_1_U19 : component GIN_compute_one_graph_mul_7ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln183_fu_433_p0,
        din1 => mul_ln183_fu_433_p1,
        dout => mul_ln183_fu_433_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                addr_reg_207 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln167_fu_382_p2 = ap_const_lv1_0))) then 
                addr_reg_207 <= addr_2_fu_409_p2;
            end if; 
        end if;
    end process;

    dim_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln183_fu_445_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                dim_reg_219 <= add_ln183_fu_439_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                dim_reg_219 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    e_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                e_reg_174 <= select_ln180_1_reg_519;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                e_reg_174 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    ef_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ef_reg_185 <= add_ln181_fu_482_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ef_reg_185 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    empty_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond537_fu_240_p2 = ap_const_lv1_0))) then 
                empty_reg_152 <= empty_59_fu_234_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_152 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_196 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln167_fu_382_p2 = ap_const_lv1_0))) then 
                i_reg_196 <= add_ln167_fu_376_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_163 <= add_ln180_1_reg_505;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_163 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln180_1_reg_505 <= add_ln180_1_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln183_fu_445_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    edge_embedding_V_addr_1_reg_567(14 downto 0) <= zext_ln703_31_fu_460_p1(18 - 1 downto 0)(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln183_reg_563 <= icmp_ln183_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    layer_cast_reg_487(2 downto 0) <= layer_cast_fu_230_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_i_reg_500 <= mul_i_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln183_reg_553 <= mul_ln183_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln703_reg_530 <= mul_ln703_fu_366_p2;
                trunc_ln182_reg_535 <= trunc_ln182_fu_372_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln180_1_reg_519 <= select_ln180_1_fu_310_p3;
                select_ln180_reg_513 <= select_ln180_fu_302_p3;
            end if;
        end if;
    end process;
    layer_cast_reg_487(6 downto 3) <= "0000";
    edge_embedding_V_addr_1_reg_567(17 downto 15) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln180_fu_284_p2, ap_CS_fsm_state6, icmp_ln167_fu_382_p2, ap_enable_reg_pp2_iter0, icmp_ln183_fu_445_p2, ap_block_pp2_stage0_subdone, exitcond537_fu_240_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond537_fu_240_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln180_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln167_fu_382_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln183_fu_445_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln183_fu_445_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add5_fu_424_p2 <= std_logic_vector(unsigned(tmp_fu_419_p2) + unsigned(trunc_ln182_reg_535));
    add_ln167_fu_376_p2 <= std_logic_vector(unsigned(i_reg_196) + unsigned(ap_const_lv2_1));
    add_ln180_1_fu_256_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_163) + unsigned(ap_const_lv7_1));
    add_ln180_fu_290_p2 <= std_logic_vector(unsigned(e_reg_174) + unsigned(ap_const_lv6_1));
    add_ln181_fu_482_p2 <= std_logic_vector(unsigned(select_ln180_reg_513) + unsigned(ap_const_lv2_1));
    add_ln182_fu_352_p2 <= std_logic_vector(unsigned(zext_ln181_fu_348_p1) + unsigned(select_ln180_2_fu_340_p3));
    add_ln183_fu_439_p2 <= std_logic_vector(unsigned(dim_reg_219) + unsigned(ap_const_lv9_1));
    add_ln186_fu_465_p2 <= std_logic_vector(unsigned(mul_ln183_reg_553) + unsigned(zext_ln703_30_fu_451_p1));
    add_ln703_38_fu_455_p2 <= std_logic_vector(unsigned(mul_ln703_reg_530) + unsigned(zext_ln703_30_fu_451_p1));
    add_ln703_fu_475_p2 <= std_logic_vector(unsigned(edge_embedding_V_q0) + unsigned(edge_embedding_table_V_q0));
    addr_2_fu_409_p2 <= std_logic_vector(unsigned(merge_i_fu_395_p6) + unsigned(addr_reg_207));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln183_fu_445_p2)
    begin
        if ((icmp_ln183_fu_445_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln180_fu_284_p2)
    begin
        if ((((icmp_ln180_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln180_fu_284_p2)
    begin
        if (((icmp_ln180_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    edge_attr_address0 <= sext_ln182_fu_358_p1(11 - 1 downto 0);

    edge_attr_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge_attr_ce0 <= ap_const_logic_1;
        else 
            edge_attr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_V_address0 <= zext_ln703_31_fu_460_p1(18 - 1 downto 0);

    edge_embedding_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, edge_embedding_V_addr_1_reg_567, ap_enable_reg_pp2_iter1, p_cast_fu_246_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            edge_embedding_V_address1 <= edge_embedding_V_addr_1_reg_567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_address1 <= p_cast_fu_246_p1(18 - 1 downto 0);
        else 
            edge_embedding_V_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edge_embedding_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            edge_embedding_V_ce0 <= ap_const_logic_1;
        else 
            edge_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            edge_embedding_V_ce1 <= ap_const_logic_1;
        else 
            edge_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, add_ln703_fu_475_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            edge_embedding_V_d1 <= add_ln703_fu_475_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_d1 <= ap_const_lv32_0;
        else 
            edge_embedding_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edge_embedding_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln183_reg_563, ap_enable_reg_pp2_iter1, exitcond537_fu_240_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond537_fu_240_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln183_reg_563 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            edge_embedding_V_we1 <= ap_const_logic_1;
        else 
            edge_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    edge_embedding_table_V_address0 <= zext_ln186_fu_470_p1(15 - 1 downto 0);

    edge_embedding_table_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            edge_embedding_table_V_ce0 <= ap_const_logic_1;
        else 
            edge_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_59_fu_234_p2 <= std_logic_vector(unsigned(empty_reg_152) + unsigned(ap_const_lv14_1));
    empty_61_fu_278_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_274_p1) - unsigned(zext_ln180_fu_262_p1));
    empty_63_fu_415_p1 <= addr_reg_207(7 - 1 downto 0);
    exitcond537_fu_240_p2 <= "1" when (empty_reg_152 = ap_const_lv14_2EE0) else "0";
    icmp_ln167_fu_382_p2 <= "1" when (i_reg_196 = select_ln180_reg_513) else "0";
    icmp_ln180_fu_284_p2 <= "1" when (indvar_flatten_reg_163 = ap_const_lv7_78) else "0";
    icmp_ln181_fu_296_p2 <= "1" when (ef_reg_185 = ap_const_lv2_3) else "0";
    icmp_ln183_fu_445_p2 <= "1" when (dim_reg_219 = ap_const_lv9_12C) else "0";
    layer_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),7));
    merge_i_fu_395_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln168_fu_387_p1),2));
    mul_i_fu_251_p0 <= layer_cast_reg_487(3 - 1 downto 0);
    mul_i_fu_251_p1 <= ap_const_lv7_D(5 - 1 downto 0);
    mul_ln183_fu_433_p0 <= mul_ln183_fu_433_p00(7 - 1 downto 0);
    mul_ln183_fu_433_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add5_fu_424_p2),15));
    mul_ln183_fu_433_p1 <= ap_const_lv15_12C(10 - 1 downto 0);
    mul_ln703_fu_366_p0 <= mul_ln703_fu_366_p00(6 - 1 downto 0);
    mul_ln703_fu_366_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_1_reg_519),15));
    mul_ln703_fu_366_p1 <= ap_const_lv15_12C(10 - 1 downto 0);
    p_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_152),64));
    p_mid1_fu_334_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_330_p1) - unsigned(zext_ln180_1_fu_318_p1));
    p_shl_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_266_p3),9));
    p_shl_cast_mid1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_322_p3),9));
    p_shl_fu_266_p3 <= (e_reg_174 & ap_const_lv2_0);
    p_shl_mid1_fu_322_p3 <= (add_ln180_fu_290_p2 & ap_const_lv2_0);
    select_ln180_1_fu_310_p3 <= 
        add_ln180_fu_290_p2 when (icmp_ln181_fu_296_p2(0) = '1') else 
        e_reg_174;
    select_ln180_2_fu_340_p3 <= 
        p_mid1_fu_334_p2 when (icmp_ln181_fu_296_p2(0) = '1') else 
        empty_61_fu_278_p2;
    select_ln180_fu_302_p3 <= 
        ap_const_lv2_0 when (icmp_ln181_fu_296_p2(0) = '1') else 
        ef_reg_185;
        sext_ln182_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_fu_352_p2),64));

    tmp_fu_419_p2 <= std_logic_vector(unsigned(mul_i_reg_500) + unsigned(empty_63_fu_415_p1));
    trunc_ln168_fu_387_p1 <= i_reg_196(1 - 1 downto 0);
    trunc_ln182_fu_372_p1 <= edge_attr_q0(7 - 1 downto 0);
    zext_ln180_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_290_p2),9));
    zext_ln180_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_reg_174),9));
    zext_ln181_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_fu_302_p3),9));
    zext_ln186_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln186_fu_465_p2),64));
    zext_ln703_30_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_219),15));
    zext_ln703_31_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_38_fu_455_p2),64));
end behav;
