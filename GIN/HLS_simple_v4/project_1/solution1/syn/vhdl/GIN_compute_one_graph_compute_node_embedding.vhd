-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_node_embedding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce0 : OUT STD_LOGIC;
    node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce1 : OUT STD_LOGIC;
    node_embedding_V_we1 : OUT STD_LOGIC;
    node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_feature_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    node_feature_ce0 : OUT STD_LOGIC;
    node_feature_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_node_embedding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1644 : STD_LOGIC_VECTOR (12 downto 0) := "1011001000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_AB : STD_LOGIC_VECTOR (7 downto 0) := "10101011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_12C : STD_LOGIC_VECTOR (13 downto 0) := "00000100101100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_12C : STD_LOGIC_VECTOR (15 downto 0) := "0000000100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nd_feature_table_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal nd_feature_table_1_ce0 : STD_LOGIC;
    signal nd_feature_table_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal node_embedding_table_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal node_embedding_table_V_ce0 : STD_LOGIC;
    signal node_embedding_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal dim_reg_220 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_53_fu_231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln219_1_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln219_1_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln219_fu_272_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln219_reg_451 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln219_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln219_1_fu_280_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln219_1_reg_457 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln703_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln703_reg_468 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln221_fu_330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln221_reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln207_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln207_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_1_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal mul_ln222_fu_377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln222_reg_497 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln222_fu_383_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln222_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln222_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_embedding_V_addr_1_reg_511 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln220_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal empty_reg_153 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond537_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal nd_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal nf_reg_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_cast_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln221_1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_29_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln225_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln220_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln219_fu_260_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln220_fu_296_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln221_1_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln221_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid2_fu_288_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln221_fu_310_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln703_fu_324_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln703_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln208_fu_350_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln208_fu_354_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_56_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add5_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln222_fu_377_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln222_fu_377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_28_fu_399_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_37_fu_403_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln703_27_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln225_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln222_fu_377_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln703_fu_324_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_5ns_10ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component GIN_compute_one_graph_mul_8ns_10ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_node_embedding_node_embedding_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    nd_feature_table_1_U : component GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1
    generic map (
        DataWidth => 5,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => nd_feature_table_1_address0,
        ce0 => nd_feature_table_1_ce0,
        q0 => nd_feature_table_1_q0);

    node_embedding_table_V_U : component GIN_compute_one_graph_compute_node_embedding_node_embedding_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 51900,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_embedding_table_V_address0,
        ce0 => node_embedding_table_V_ce0,
        q0 => node_embedding_table_V_q0);

    mul_5ns_10ns_14_1_1_U8 : component GIN_compute_one_graph_mul_5ns_10ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln703_fu_324_p0,
        din1 => mul_ln703_fu_324_p1,
        dout => mul_ln703_fu_324_p2);

    mul_8ns_10ns_16_1_1_U9 : component GIN_compute_one_graph_mul_8ns_10ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln222_fu_377_p0,
        din1 => mul_ln222_fu_377_p1,
        dout => mul_ln222_fu_377_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                addr_reg_208 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln207_reg_483 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                addr_reg_208 <= addr_1_fu_358_p2;
            end if; 
        end if;
    end process;

    dim_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln222_fu_389_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                dim_reg_220 <= add_ln222_fu_383_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                dim_reg_220 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    empty_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond537_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_153 <= empty_53_fu_231_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_153 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_197 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln207_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                i_reg_197 <= add_ln207_fu_334_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_164 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten_reg_164 <= add_ln219_1_reg_443;
            end if; 
        end if;
    end process;

    nd_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                nd_reg_175 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                nd_reg_175 <= select_ln219_1_reg_457;
            end if; 
        end if;
    end process;

    nf_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                nf_reg_186 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                nf_reg_186 <= add_ln220_fu_430_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln219_1_reg_443 <= add_ln219_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln207_reg_483 <= icmp_ln207_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln222_reg_507 <= icmp_ln222_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln222_reg_497 <= mul_ln222_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln703_reg_468 <= mul_ln703_fu_324_p2;
                trunc_ln221_reg_473 <= trunc_ln221_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln222_fu_389_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    node_embedding_V_addr_1_reg_511(13 downto 0) <= zext_ln703_29_fu_408_p1(16 - 1 downto 0)(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln219_1_reg_457 <= select_ln219_1_fu_280_p3;
                select_ln219_reg_451 <= select_ln219_fu_272_p3;
            end if;
        end if;
    end process;
    node_embedding_V_addr_1_reg_511(15 downto 14) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln219_fu_254_p2, ap_enable_reg_pp1_iter0, icmp_ln207_fu_340_p2, ap_enable_reg_pp2_iter0, icmp_ln222_fu_389_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, exitcond537_fu_237_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond537_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln219_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln207_fu_340_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln207_fu_340_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln222_fu_389_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln222_fu_389_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add5_fu_368_p2 <= std_logic_vector(unsigned(trunc_ln221_reg_473) + unsigned(empty_56_fu_364_p1));
    add_ln207_fu_334_p2 <= std_logic_vector(unsigned(i_reg_197) + unsigned(ap_const_lv4_1));
    add_ln219_1_fu_248_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_164) + unsigned(ap_const_lv8_1));
    add_ln219_fu_260_p2 <= std_logic_vector(unsigned(nd_reg_175) + unsigned(ap_const_lv5_1));
    add_ln220_fu_430_p2 <= std_logic_vector(unsigned(select_ln219_reg_451) + unsigned(ap_const_lv4_1));
    add_ln221_1_fu_300_p2 <= std_logic_vector(unsigned(select_ln219_1_fu_280_p3) + unsigned(zext_ln220_fu_296_p1));
    add_ln221_fu_310_p2 <= std_logic_vector(unsigned(zext_ln221_fu_306_p1) + unsigned(p_shl_mid2_fu_288_p3));
    add_ln222_fu_383_p2 <= std_logic_vector(unsigned(dim_reg_220) + unsigned(ap_const_lv9_1));
    add_ln225_fu_413_p2 <= std_logic_vector(unsigned(mul_ln222_reg_497) + unsigned(zext_ln703_27_fu_395_p1));
    add_ln703_37_fu_403_p2 <= std_logic_vector(unsigned(mul_ln703_reg_468) + unsigned(zext_ln703_28_fu_399_p1));
    add_ln703_fu_423_p2 <= std_logic_vector(unsigned(node_embedding_V_q0) + unsigned(node_embedding_table_V_q0));
    addr_1_fu_358_p2 <= std_logic_vector(unsigned(zext_ln208_fu_354_p1) + unsigned(addr_reg_208));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln207_fu_340_p2)
    begin
        if ((icmp_ln207_fu_340_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln222_fu_389_p2)
    begin
        if ((icmp_ln222_fu_389_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln219_fu_254_p2)
    begin
        if ((((icmp_ln219_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln219_fu_254_p2)
    begin
        if (((icmp_ln219_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_53_fu_231_p2 <= std_logic_vector(unsigned(empty_reg_153) + unsigned(ap_const_lv13_1));
    empty_56_fu_364_p1 <= addr_reg_208(8 - 1 downto 0);
    exitcond537_fu_237_p2 <= "1" when (empty_reg_153 = ap_const_lv13_1644) else "0";
    i_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_197),64));
    icmp_ln207_fu_340_p2 <= "1" when (i_reg_197 = select_ln219_reg_451) else "0";
    icmp_ln219_fu_254_p2 <= "1" when (indvar_flatten_reg_164 = ap_const_lv8_AB) else "0";
    icmp_ln220_fu_266_p2 <= "1" when (nf_reg_186 = ap_const_lv4_9) else "0";
    icmp_ln222_fu_389_p2 <= "1" when (dim_reg_220 = ap_const_lv9_12C) else "0";
    mul_ln222_fu_377_p0 <= mul_ln222_fu_377_p00(8 - 1 downto 0);
    mul_ln222_fu_377_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add5_fu_368_p2),16));
    mul_ln222_fu_377_p1 <= ap_const_lv16_12C(10 - 1 downto 0);
    mul_ln703_fu_324_p0 <= mul_ln703_fu_324_p00(5 - 1 downto 0);
    mul_ln703_fu_324_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln219_1_reg_457),14));
    mul_ln703_fu_324_p1 <= ap_const_lv14_12C(10 - 1 downto 0);
    nd_feature_table_1_address0 <= i_cast_fu_345_p1(4 - 1 downto 0);

    nd_feature_table_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            nd_feature_table_1_ce0 <= ap_const_logic_1;
        else 
            nd_feature_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_address0 <= zext_ln703_29_fu_408_p1(16 - 1 downto 0);

    node_embedding_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, node_embedding_V_addr_1_reg_511, ap_enable_reg_pp2_iter1, p_cast_fu_243_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            node_embedding_V_address1 <= node_embedding_V_addr_1_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            node_embedding_V_address1 <= p_cast_fu_243_p1(16 - 1 downto 0);
        else 
            node_embedding_V_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            node_embedding_V_ce1 <= ap_const_logic_1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, add_ln703_fu_423_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            node_embedding_V_d1 <= add_ln703_fu_423_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            node_embedding_V_d1 <= ap_const_lv32_0;
        else 
            node_embedding_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln222_reg_507, ap_enable_reg_pp2_iter1, exitcond537_fu_237_p2)
    begin
        if ((((exitcond537_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln222_reg_507 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            node_embedding_V_we1 <= ap_const_logic_1;
        else 
            node_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_table_V_address0 <= zext_ln225_fu_418_p1(16 - 1 downto 0);

    node_embedding_table_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            node_embedding_table_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_feature_address0 <= zext_ln221_1_fu_316_p1(11 - 1 downto 0);

    node_feature_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            node_feature_ce0 <= ap_const_logic_1;
        else 
            node_feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_153),64));
    p_shl_mid2_fu_288_p3 <= (select_ln219_1_fu_280_p3 & ap_const_lv3_0);
    select_ln219_1_fu_280_p3 <= 
        add_ln219_fu_260_p2 when (icmp_ln220_fu_266_p2(0) = '1') else 
        nd_reg_175;
    select_ln219_fu_272_p3 <= 
        ap_const_lv4_0 when (icmp_ln220_fu_266_p2(0) = '1') else 
        nf_reg_186;
        sext_ln208_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(nd_feature_table_1_q0),7));

    trunc_ln221_fu_330_p1 <= node_feature_q0(8 - 1 downto 0);
    zext_ln208_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln208_fu_350_p1),10));
    zext_ln220_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln219_fu_272_p3),5));
    zext_ln221_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln221_fu_310_p2),64));
    zext_ln221_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln221_1_fu_300_p2),8));
    zext_ln225_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_fu_413_p2),64));
    zext_ln703_27_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_220),16));
    zext_ln703_28_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_220),14));
    zext_ln703_29_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_37_fu_403_p2),64));
end behav;
