// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_compute_edge_embedding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer,
        edge_embedding_V_address0,
        edge_embedding_V_ce0,
        edge_embedding_V_q0,
        edge_embedding_V_address1,
        edge_embedding_V_ce1,
        edge_embedding_V_we1,
        edge_embedding_V_d1,
        edge_attr_address0,
        edge_attr_ce0,
        edge_attr_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] layer;
output  [17:0] edge_embedding_V_address0;
output   edge_embedding_V_ce0;
input  [31:0] edge_embedding_V_q0;
output  [17:0] edge_embedding_V_address1;
output   edge_embedding_V_ce1;
output   edge_embedding_V_we1;
output  [31:0] edge_embedding_V_d1;
output  [10:0] edge_attr_address0;
output   edge_attr_ce0;
input  [31:0] edge_attr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg edge_embedding_V_ce0;
reg[17:0] edge_embedding_V_address1;
reg edge_embedding_V_ce1;
reg edge_embedding_V_we1;
reg[31:0] edge_embedding_V_d1;
reg edge_attr_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] edge_embedding_table_V_address0;
reg    edge_embedding_table_V_ce0;
wire   [31:0] edge_embedding_table_V_q0;
reg   [8:0] dim_reg_219;
wire   [6:0] layer_cast_fu_230_p1;
reg   [6:0] layer_cast_reg_487;
wire   [13:0] empty_59_fu_234_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] mul_i_fu_251_p2;
reg   [6:0] mul_i_reg_500;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln180_1_fu_256_p2;
reg   [6:0] add_ln180_1_reg_505;
wire    ap_CS_fsm_state4;
wire   [1:0] select_ln180_fu_302_p3;
reg   [1:0] select_ln180_reg_513;
wire   [0:0] icmp_ln180_fu_284_p2;
wire   [5:0] select_ln180_1_fu_310_p3;
reg   [5:0] select_ln180_1_reg_519;
wire   [14:0] mul_ln703_fu_366_p2;
reg   [14:0] mul_ln703_reg_530;
wire    ap_CS_fsm_state5;
wire   [6:0] trunc_ln182_fu_372_p1;
reg   [6:0] trunc_ln182_reg_535;
wire   [1:0] add_ln167_fu_376_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] addr_2_fu_409_p2;
wire   [0:0] icmp_ln167_fu_382_p2;
wire   [14:0] mul_ln183_fu_433_p2;
reg   [14:0] mul_ln183_reg_553;
wire    ap_CS_fsm_state7;
wire   [8:0] add_ln183_fu_439_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln183_fu_445_p2;
reg   [0:0] icmp_ln183_reg_563;
reg   [17:0] edge_embedding_V_addr_1_reg_567;
wire   [1:0] add_ln181_fu_482_p2;
wire    ap_CS_fsm_state10;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter1;
reg   [13:0] empty_reg_152;
wire   [0:0] exitcond537_fu_240_p2;
reg   [6:0] indvar_flatten_reg_163;
reg   [5:0] e_reg_174;
reg   [1:0] ef_reg_185;
reg   [1:0] i_reg_196;
reg   [31:0] addr_reg_207;
wire   [63:0] p_cast_fu_246_p1;
wire  signed [63:0] sext_ln182_fu_358_p1;
wire   [63:0] zext_ln703_31_fu_460_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln186_fu_470_p1;
wire   [31:0] add_ln703_fu_475_p2;
wire   [2:0] mul_i_fu_251_p0;
wire   [4:0] mul_i_fu_251_p1;
wire   [7:0] p_shl_fu_266_p3;
wire   [8:0] p_shl_cast_fu_274_p1;
wire   [8:0] zext_ln180_fu_262_p1;
wire   [0:0] icmp_ln181_fu_296_p2;
wire   [5:0] add_ln180_fu_290_p2;
wire   [7:0] p_shl_mid1_fu_322_p3;
wire   [8:0] p_shl_cast_mid1_fu_330_p1;
wire   [8:0] zext_ln180_1_fu_318_p1;
wire   [8:0] p_mid1_fu_334_p2;
wire   [8:0] empty_61_fu_278_p2;
wire   [8:0] zext_ln181_fu_348_p1;
wire   [8:0] select_ln180_2_fu_340_p3;
wire   [8:0] add_ln182_fu_352_p2;
wire   [5:0] mul_ln703_fu_366_p0;
wire   [9:0] mul_ln703_fu_366_p1;
wire   [0:0] trunc_ln168_fu_387_p1;
wire   [1:0] merge_i_fu_395_p5;
wire   [31:0] merge_i_fu_395_p6;
wire   [6:0] empty_63_fu_415_p1;
wire   [6:0] tmp_fu_419_p2;
wire   [6:0] add5_fu_424_p2;
wire   [6:0] mul_ln183_fu_433_p0;
wire   [9:0] mul_ln183_fu_433_p1;
wire   [14:0] zext_ln703_30_fu_451_p1;
wire   [14:0] add_ln703_38_fu_455_p2;
wire   [14:0] add_ln186_fu_465_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [14:0] mul_ln183_fu_433_p00;
wire   [14:0] mul_ln703_fu_366_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

GIN_compute_one_graph_compute_edge_embedding_edge_embedding_table_V #(
    .DataWidth( 32 ),
    .AddressRange( 19500 ),
    .AddressWidth( 15 ))
edge_embedding_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(edge_embedding_table_V_address0),
    .ce0(edge_embedding_table_V_ce0),
    .q0(edge_embedding_table_V_q0)
);

GIN_compute_one_graph_mul_3ns_5ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
mul_3ns_5ns_7_1_1_U16(
    .din0(mul_i_fu_251_p0),
    .din1(mul_i_fu_251_p1),
    .dout(mul_i_fu_251_p2)
);

GIN_compute_one_graph_mul_6ns_10ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_6ns_10ns_15_1_1_U17(
    .din0(mul_ln703_fu_366_p0),
    .din1(mul_ln703_fu_366_p1),
    .dout(mul_ln703_fu_366_p2)
);

GIN_compute_one_graph_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U18(
    .din0(32'd5),
    .din1(32'd6),
    .din2(32'd2),
    .din3(32'd2),
    .din4(merge_i_fu_395_p5),
    .dout(merge_i_fu_395_p6)
);

GIN_compute_one_graph_mul_7ns_10ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_7ns_10ns_15_1_1_U19(
    .din0(mul_ln183_fu_433_p0),
    .din1(mul_ln183_fu_433_p1),
    .dout(mul_ln183_fu_433_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        addr_reg_207 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_382_p2 == 1'd0))) begin
        addr_reg_207 <= addr_2_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln183_fu_445_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        dim_reg_219 <= add_ln183_fu_439_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dim_reg_219 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        e_reg_174 <= select_ln180_1_reg_519;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        e_reg_174 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ef_reg_185 <= add_ln181_fu_482_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ef_reg_185 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond537_fu_240_p2 == 1'd0))) begin
        empty_reg_152 <= empty_59_fu_234_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_152 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_196 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_382_p2 == 1'd0))) begin
        i_reg_196 <= add_ln167_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_163 <= add_ln180_1_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_163 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln180_1_reg_505 <= add_ln180_1_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln183_fu_445_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        edge_embedding_V_addr_1_reg_567[14 : 0] <= zext_ln703_31_fu_460_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln183_reg_563 <= icmp_ln183_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        layer_cast_reg_487[2 : 0] <= layer_cast_fu_230_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_i_reg_500 <= mul_i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln183_reg_553 <= mul_ln183_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln703_reg_530 <= mul_ln703_fu_366_p2;
        trunc_ln182_reg_535 <= trunc_ln182_fu_372_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        select_ln180_1_reg_519 <= select_ln180_1_fu_310_p3;
        select_ln180_reg_513 <= select_ln180_fu_302_p3;
    end
end

always @ (*) begin
    if ((icmp_ln183_fu_445_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln180_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln180_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        edge_attr_ce0 = 1'b1;
    end else begin
        edge_attr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        edge_embedding_V_address1 = edge_embedding_V_addr_1_reg_567;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_embedding_V_address1 = p_cast_fu_246_p1;
    end else begin
        edge_embedding_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        edge_embedding_V_ce0 = 1'b1;
    end else begin
        edge_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        edge_embedding_V_ce1 = 1'b1;
    end else begin
        edge_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        edge_embedding_V_d1 = add_ln703_fu_475_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_embedding_V_d1 = 32'd0;
    end else begin
        edge_embedding_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond537_fu_240_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln183_reg_563 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        edge_embedding_V_we1 = 1'b1;
    end else begin
        edge_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        edge_embedding_table_V_ce0 = 1'b1;
    end else begin
        edge_embedding_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond537_fu_240_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln180_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_382_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln183_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln183_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add5_fu_424_p2 = (tmp_fu_419_p2 + trunc_ln182_reg_535);

assign add_ln167_fu_376_p2 = (i_reg_196 + 2'd1);

assign add_ln180_1_fu_256_p2 = (indvar_flatten_reg_163 + 7'd1);

assign add_ln180_fu_290_p2 = (e_reg_174 + 6'd1);

assign add_ln181_fu_482_p2 = (select_ln180_reg_513 + 2'd1);

assign add_ln182_fu_352_p2 = (zext_ln181_fu_348_p1 + select_ln180_2_fu_340_p3);

assign add_ln183_fu_439_p2 = (dim_reg_219 + 9'd1);

assign add_ln186_fu_465_p2 = (mul_ln183_reg_553 + zext_ln703_30_fu_451_p1);

assign add_ln703_38_fu_455_p2 = (mul_ln703_reg_530 + zext_ln703_30_fu_451_p1);

assign add_ln703_fu_475_p2 = (edge_embedding_V_q0 + edge_embedding_table_V_q0);

assign addr_2_fu_409_p2 = (merge_i_fu_395_p6 + addr_reg_207);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign edge_attr_address0 = sext_ln182_fu_358_p1;

assign edge_embedding_V_address0 = zext_ln703_31_fu_460_p1;

assign edge_embedding_table_V_address0 = zext_ln186_fu_470_p1;

assign empty_59_fu_234_p2 = (empty_reg_152 + 14'd1);

assign empty_61_fu_278_p2 = (p_shl_cast_fu_274_p1 - zext_ln180_fu_262_p1);

assign empty_63_fu_415_p1 = addr_reg_207[6:0];

assign exitcond537_fu_240_p2 = ((empty_reg_152 == 14'd12000) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_382_p2 = ((i_reg_196 == select_ln180_reg_513) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_284_p2 = ((indvar_flatten_reg_163 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_296_p2 = ((ef_reg_185 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_445_p2 = ((dim_reg_219 == 9'd300) ? 1'b1 : 1'b0);

assign layer_cast_fu_230_p1 = layer;

assign merge_i_fu_395_p5 = trunc_ln168_fu_387_p1;

assign mul_i_fu_251_p0 = layer_cast_reg_487;

assign mul_i_fu_251_p1 = 7'd13;

assign mul_ln183_fu_433_p0 = mul_ln183_fu_433_p00;

assign mul_ln183_fu_433_p00 = add5_fu_424_p2;

assign mul_ln183_fu_433_p1 = 15'd300;

assign mul_ln703_fu_366_p0 = mul_ln703_fu_366_p00;

assign mul_ln703_fu_366_p00 = select_ln180_1_reg_519;

assign mul_ln703_fu_366_p1 = 15'd300;

assign p_cast_fu_246_p1 = empty_reg_152;

assign p_mid1_fu_334_p2 = (p_shl_cast_mid1_fu_330_p1 - zext_ln180_1_fu_318_p1);

assign p_shl_cast_fu_274_p1 = p_shl_fu_266_p3;

assign p_shl_cast_mid1_fu_330_p1 = p_shl_mid1_fu_322_p3;

assign p_shl_fu_266_p3 = {{e_reg_174}, {2'd0}};

assign p_shl_mid1_fu_322_p3 = {{add_ln180_fu_290_p2}, {2'd0}};

assign select_ln180_1_fu_310_p3 = ((icmp_ln181_fu_296_p2[0:0] == 1'b1) ? add_ln180_fu_290_p2 : e_reg_174);

assign select_ln180_2_fu_340_p3 = ((icmp_ln181_fu_296_p2[0:0] == 1'b1) ? p_mid1_fu_334_p2 : empty_61_fu_278_p2);

assign select_ln180_fu_302_p3 = ((icmp_ln181_fu_296_p2[0:0] == 1'b1) ? 2'd0 : ef_reg_185);

assign sext_ln182_fu_358_p1 = $signed(add_ln182_fu_352_p2);

assign tmp_fu_419_p2 = (mul_i_reg_500 + empty_63_fu_415_p1);

assign trunc_ln168_fu_387_p1 = i_reg_196[0:0];

assign trunc_ln182_fu_372_p1 = edge_attr_q0[6:0];

assign zext_ln180_1_fu_318_p1 = add_ln180_fu_290_p2;

assign zext_ln180_fu_262_p1 = e_reg_174;

assign zext_ln181_fu_348_p1 = select_ln180_fu_302_p3;

assign zext_ln186_fu_470_p1 = add_ln186_fu_465_p2;

assign zext_ln703_30_fu_451_p1 = dim_reg_219;

assign zext_ln703_31_fu_460_p1 = add_ln703_38_fu_455_p2;

always @ (posedge ap_clk) begin
    layer_cast_reg_487[6:3] <= 4'b0000;
    edge_embedding_V_addr_1_reg_567[17:15] <= 3'b000;
end

endmodule //GIN_compute_one_graph_compute_edge_embedding
