// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_one_graph_compute_node_embedding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_embedding_V_address0,
        node_embedding_V_ce0,
        node_embedding_V_q0,
        node_embedding_V_address1,
        node_embedding_V_ce1,
        node_embedding_V_we1,
        node_embedding_V_d1,
        node_feature_address0,
        node_feature_ce0,
        node_feature_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] node_embedding_V_address0;
output   node_embedding_V_ce0;
input  [31:0] node_embedding_V_q0;
output  [15:0] node_embedding_V_address1;
output   node_embedding_V_ce1;
output   node_embedding_V_we1;
output  [31:0] node_embedding_V_d1;
output  [10:0] node_feature_address0;
output   node_feature_ce0;
input  [31:0] node_feature_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_embedding_V_ce0;
reg[15:0] node_embedding_V_address1;
reg node_embedding_V_ce1;
reg node_embedding_V_we1;
reg[31:0] node_embedding_V_d1;
reg node_feature_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] nd_feature_table_1_address0;
reg    nd_feature_table_1_ce0;
wire   [4:0] nd_feature_table_1_q0;
wire   [15:0] node_embedding_table_V_address0;
reg    node_embedding_table_V_ce0;
wire   [31:0] node_embedding_table_V_q0;
reg   [3:0] i_reg_197;
reg   [9:0] addr_reg_208;
reg   [8:0] dim_reg_220;
wire   [12:0] empty_53_fu_231_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln219_1_fu_248_p2;
reg   [7:0] add_ln219_1_reg_443;
wire    ap_CS_fsm_state4;
wire   [3:0] select_ln219_fu_272_p3;
reg   [3:0] select_ln219_reg_451;
wire   [0:0] icmp_ln219_fu_254_p2;
wire   [4:0] select_ln219_1_fu_280_p3;
reg   [4:0] select_ln219_1_reg_457;
wire   [13:0] mul_ln703_fu_324_p2;
reg   [13:0] mul_ln703_reg_468;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln221_fu_330_p1;
reg   [7:0] trunc_ln221_reg_473;
wire   [3:0] add_ln207_fu_334_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln207_fu_340_p2;
reg   [0:0] icmp_ln207_reg_483;
wire   [9:0] addr_1_fu_358_p2;
reg    ap_enable_reg_pp1_iter1;
wire   [15:0] mul_ln222_fu_377_p2;
reg   [15:0] mul_ln222_reg_497;
wire    ap_CS_fsm_state8;
wire   [8:0] add_ln222_fu_383_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln222_fu_389_p2;
reg   [0:0] icmp_ln222_reg_507;
reg   [15:0] node_embedding_V_addr_1_reg_511;
wire   [3:0] add_ln220_fu_430_p2;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg    ap_enable_reg_pp2_iter1;
reg   [12:0] empty_reg_153;
wire   [0:0] exitcond537_fu_237_p2;
reg   [7:0] indvar_flatten_reg_164;
wire    ap_CS_fsm_state3;
reg   [4:0] nd_reg_175;
reg   [3:0] nf_reg_186;
wire    ap_block_pp1_stage0;
wire   [63:0] p_cast_fu_243_p1;
wire   [63:0] zext_ln221_1_fu_316_p1;
wire   [63:0] i_cast_fu_345_p1;
wire   [63:0] zext_ln703_29_fu_408_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln225_fu_418_p1;
wire   [31:0] add_ln703_fu_423_p2;
wire   [0:0] icmp_ln220_fu_266_p2;
wire   [4:0] add_ln219_fu_260_p2;
wire   [4:0] zext_ln220_fu_296_p1;
wire   [4:0] add_ln221_1_fu_300_p2;
wire   [7:0] zext_ln221_fu_306_p1;
wire   [7:0] p_shl_mid2_fu_288_p3;
wire   [7:0] add_ln221_fu_310_p2;
wire   [4:0] mul_ln703_fu_324_p0;
wire   [9:0] mul_ln703_fu_324_p1;
wire  signed [6:0] sext_ln208_fu_350_p1;
wire   [9:0] zext_ln208_fu_354_p1;
wire   [7:0] empty_56_fu_364_p1;
wire   [7:0] add5_fu_368_p2;
wire   [7:0] mul_ln222_fu_377_p0;
wire   [9:0] mul_ln222_fu_377_p1;
wire   [13:0] zext_ln703_28_fu_399_p1;
wire   [13:0] add_ln703_37_fu_403_p2;
wire   [15:0] zext_ln703_27_fu_395_p1;
wire   [15:0] add_ln225_fu_413_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [15:0] mul_ln222_fu_377_p00;
wire   [13:0] mul_ln703_fu_324_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

GIN_compute_one_graph_compute_node_embedding_nd_feature_table_1 #(
    .DataWidth( 5 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
nd_feature_table_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(nd_feature_table_1_address0),
    .ce0(nd_feature_table_1_ce0),
    .q0(nd_feature_table_1_q0)
);

GIN_compute_one_graph_compute_node_embedding_node_embedding_table_V #(
    .DataWidth( 32 ),
    .AddressRange( 51900 ),
    .AddressWidth( 16 ))
node_embedding_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(node_embedding_table_V_address0),
    .ce0(node_embedding_table_V_ce0),
    .q0(node_embedding_table_V_q0)
);

GIN_compute_one_graph_mul_5ns_10ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
mul_5ns_10ns_14_1_1_U8(
    .din0(mul_ln703_fu_324_p0),
    .din1(mul_ln703_fu_324_p1),
    .dout(mul_ln703_fu_324_p2)
);

GIN_compute_one_graph_mul_8ns_10ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 16 ))
mul_8ns_10ns_16_1_1_U9(
    .din0(mul_ln222_fu_377_p0),
    .din1(mul_ln222_fu_377_p1),
    .dout(mul_ln222_fu_377_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        addr_reg_208 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln207_reg_483 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        addr_reg_208 <= addr_1_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln222_fu_389_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dim_reg_220 <= add_ln222_fu_383_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dim_reg_220 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond537_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_153 <= empty_53_fu_231_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_153 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_197 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln207_fu_340_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_197 <= add_ln207_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_164 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_reg_164 <= add_ln219_1_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nd_reg_175 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        nd_reg_175 <= select_ln219_1_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nf_reg_186 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        nf_reg_186 <= add_ln220_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln219_1_reg_443 <= add_ln219_1_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln207_reg_483 <= icmp_ln207_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln222_reg_507 <= icmp_ln222_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln222_reg_497 <= mul_ln222_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln703_reg_468 <= mul_ln703_fu_324_p2;
        trunc_ln221_reg_473 <= trunc_ln221_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln222_fu_389_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_V_addr_1_reg_511[13 : 0] <= zext_ln703_29_fu_408_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln219_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        select_ln219_1_reg_457 <= select_ln219_1_fu_280_p3;
        select_ln219_reg_451 <= select_ln219_fu_272_p3;
    end
end

always @ (*) begin
    if ((icmp_ln207_fu_340_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln222_fu_389_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln219_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln219_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        nd_feature_table_1_ce0 = 1'b1;
    end else begin
        nd_feature_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        node_embedding_V_address1 = node_embedding_V_addr_1_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_embedding_V_address1 = p_cast_fu_243_p1;
    end else begin
        node_embedding_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_V_ce0 = 1'b1;
    end else begin
        node_embedding_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        node_embedding_V_ce1 = 1'b1;
    end else begin
        node_embedding_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        node_embedding_V_d1 = add_ln703_fu_423_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_embedding_V_d1 = 32'd0;
    end else begin
        node_embedding_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond537_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln222_reg_507 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        node_embedding_V_we1 = 1'b1;
    end else begin
        node_embedding_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        node_embedding_table_V_ce0 = 1'b1;
    end else begin
        node_embedding_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_feature_ce0 = 1'b1;
    end else begin
        node_feature_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond537_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln219_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln207_fu_340_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln207_fu_340_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln222_fu_389_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln222_fu_389_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add5_fu_368_p2 = (trunc_ln221_reg_473 + empty_56_fu_364_p1);

assign add_ln207_fu_334_p2 = (i_reg_197 + 4'd1);

assign add_ln219_1_fu_248_p2 = (indvar_flatten_reg_164 + 8'd1);

assign add_ln219_fu_260_p2 = (nd_reg_175 + 5'd1);

assign add_ln220_fu_430_p2 = (select_ln219_reg_451 + 4'd1);

assign add_ln221_1_fu_300_p2 = (select_ln219_1_fu_280_p3 + zext_ln220_fu_296_p1);

assign add_ln221_fu_310_p2 = (zext_ln221_fu_306_p1 + p_shl_mid2_fu_288_p3);

assign add_ln222_fu_383_p2 = (dim_reg_220 + 9'd1);

assign add_ln225_fu_413_p2 = (mul_ln222_reg_497 + zext_ln703_27_fu_395_p1);

assign add_ln703_37_fu_403_p2 = (mul_ln703_reg_468 + zext_ln703_28_fu_399_p1);

assign add_ln703_fu_423_p2 = (node_embedding_V_q0 + node_embedding_table_V_q0);

assign addr_1_fu_358_p2 = (zext_ln208_fu_354_p1 + addr_reg_208);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign empty_53_fu_231_p2 = (empty_reg_153 + 13'd1);

assign empty_56_fu_364_p1 = addr_reg_208[7:0];

assign exitcond537_fu_237_p2 = ((empty_reg_153 == 13'd5700) ? 1'b1 : 1'b0);

assign i_cast_fu_345_p1 = i_reg_197;

assign icmp_ln207_fu_340_p2 = ((i_reg_197 == select_ln219_reg_451) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_254_p2 = ((indvar_flatten_reg_164 == 8'd171) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_266_p2 = ((nf_reg_186 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_389_p2 = ((dim_reg_220 == 9'd300) ? 1'b1 : 1'b0);

assign mul_ln222_fu_377_p0 = mul_ln222_fu_377_p00;

assign mul_ln222_fu_377_p00 = add5_fu_368_p2;

assign mul_ln222_fu_377_p1 = 16'd300;

assign mul_ln703_fu_324_p0 = mul_ln703_fu_324_p00;

assign mul_ln703_fu_324_p00 = select_ln219_1_reg_457;

assign mul_ln703_fu_324_p1 = 14'd300;

assign nd_feature_table_1_address0 = i_cast_fu_345_p1;

assign node_embedding_V_address0 = zext_ln703_29_fu_408_p1;

assign node_embedding_table_V_address0 = zext_ln225_fu_418_p1;

assign node_feature_address0 = zext_ln221_1_fu_316_p1;

assign p_cast_fu_243_p1 = empty_reg_153;

assign p_shl_mid2_fu_288_p3 = {{select_ln219_1_fu_280_p3}, {3'd0}};

assign select_ln219_1_fu_280_p3 = ((icmp_ln220_fu_266_p2[0:0] == 1'b1) ? add_ln219_fu_260_p2 : nd_reg_175);

assign select_ln219_fu_272_p3 = ((icmp_ln220_fu_266_p2[0:0] == 1'b1) ? 4'd0 : nf_reg_186);

assign sext_ln208_fu_350_p1 = $signed(nd_feature_table_1_q0);

assign trunc_ln221_fu_330_p1 = node_feature_q0[7:0];

assign zext_ln208_fu_354_p1 = $unsigned(sext_ln208_fu_350_p1);

assign zext_ln220_fu_296_p1 = select_ln219_fu_272_p3;

assign zext_ln221_1_fu_316_p1 = add_ln221_fu_310_p2;

assign zext_ln221_fu_306_p1 = add_ln221_1_fu_300_p2;

assign zext_ln225_fu_418_p1 = add_ln225_fu_413_p2;

assign zext_ln703_27_fu_395_p1 = dim_reg_220;

assign zext_ln703_28_fu_399_p1 = dim_reg_220;

assign zext_ln703_29_fu_408_p1 = add_ln703_37_fu_403_p2;

always @ (posedge ap_clk) begin
    node_embedding_V_addr_1_reg_511[15:14] <= 2'b00;
end

endmodule //GIN_compute_one_graph_compute_node_embedding
