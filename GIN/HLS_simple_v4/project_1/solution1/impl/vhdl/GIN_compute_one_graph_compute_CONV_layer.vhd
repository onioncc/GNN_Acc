-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_compute_CONV_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer : IN STD_LOGIC_VECTOR (2 downto 0);
    edge_attr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    edge_attr_ce0 : OUT STD_LOGIC;
    edge_attr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce0 : OUT STD_LOGIC;
    edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_list_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    edge_list_ce1 : OUT STD_LOGIC;
    edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce0 : OUT STD_LOGIC;
    node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce1 : OUT STD_LOGIC;
    node_embedding_V_we1 : OUT STD_LOGIC;
    node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_compute_CONV_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal edge_embedding_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal edge_embedding_V_ce0 : STD_LOGIC;
    signal edge_embedding_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_embedding_V_ce1 : STD_LOGIC;
    signal edge_embedding_V_we1 : STD_LOGIC;
    signal message_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal message_V_ce0 : STD_LOGIC;
    signal message_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal message_V_ce1 : STD_LOGIC;
    signal message_V_we1 : STD_LOGIC;
    signal grp_MLP_fu_2428_ap_start : STD_LOGIC;
    signal grp_MLP_fu_2428_ap_done : STD_LOGIC;
    signal grp_MLP_fu_2428_ap_idle : STD_LOGIC;
    signal grp_MLP_fu_2428_ap_ready : STD_LOGIC;
    signal grp_MLP_fu_2428_node_embedding_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_MLP_fu_2428_node_embedding_V_ce0 : STD_LOGIC;
    signal grp_MLP_fu_2428_node_embedding_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_MLP_fu_2428_node_embedding_V_ce1 : STD_LOGIC;
    signal grp_MLP_fu_2428_node_embedding_V_we1 : STD_LOGIC;
    signal grp_MLP_fu_2428_node_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MLP_fu_2428_message_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_MLP_fu_2428_message_V_ce0 : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_ap_start : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_ap_done : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_ap_idle : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_ap_ready : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce0 : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce1 : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_we1 : STD_LOGIC;
    signal grp_compute_edge_embedding_fu_4837_edge_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_edge_embedding_fu_4837_edge_attr_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compute_edge_embedding_fu_4837_edge_attr_ce0 : STD_LOGIC;
    signal grp_message_passing_fu_4849_ap_start : STD_LOGIC;
    signal grp_message_passing_fu_4849_ap_done : STD_LOGIC;
    signal grp_message_passing_fu_4849_ap_idle : STD_LOGIC;
    signal grp_message_passing_fu_4849_ap_ready : STD_LOGIC;
    signal grp_message_passing_fu_4849_message_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_message_passing_fu_4849_message_V_ce0 : STD_LOGIC;
    signal grp_message_passing_fu_4849_message_V_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_message_passing_fu_4849_message_V_ce1 : STD_LOGIC;
    signal grp_message_passing_fu_4849_message_V_we1 : STD_LOGIC;
    signal grp_message_passing_fu_4849_message_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_message_passing_fu_4849_edge_list_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_message_passing_fu_4849_edge_list_ce0 : STD_LOGIC;
    signal grp_message_passing_fu_4849_edge_list_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_message_passing_fu_4849_edge_list_ce1 : STD_LOGIC;
    signal grp_message_passing_fu_4849_edge_embedding_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_message_passing_fu_4849_edge_embedding_V_ce0 : STD_LOGIC;
    signal grp_message_passing_fu_4849_node_embedding_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_message_passing_fu_4849_node_embedding_V_ce0 : STD_LOGIC;
    signal grp_MLP_fu_2428_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_compute_edge_embedding_fu_4837_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_message_passing_fu_4849_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_MLP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        node_embedding_V_ce0 : OUT STD_LOGIC;
        node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        node_embedding_V_ce1 : OUT STD_LOGIC;
        node_embedding_V_we1 : OUT STD_LOGIC;
        node_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        message_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_V_ce0 : OUT STD_LOGIC;
        message_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_edge_embedding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        edge_embedding_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        edge_embedding_V_ce0 : OUT STD_LOGIC;
        edge_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_embedding_V_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        edge_embedding_V_ce1 : OUT STD_LOGIC;
        edge_embedding_V_we1 : OUT STD_LOGIC;
        edge_embedding_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        edge_attr_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        edge_attr_ce0 : OUT STD_LOGIC;
        edge_attr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_message_passing IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        message_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_V_ce0 : OUT STD_LOGIC;
        message_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_V_ce1 : OUT STD_LOGIC;
        message_V_we1 : OUT STD_LOGIC;
        message_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        edge_list_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        edge_list_ce0 : OUT STD_LOGIC;
        edge_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_list_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        edge_list_ce1 : OUT STD_LOGIC;
        edge_list_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        edge_embedding_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        edge_embedding_V_ce0 : OUT STD_LOGIC;
        edge_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        node_embedding_V_ce0 : OUT STD_LOGIC;
        node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_CONV_layer_edge_embedding_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GIN_compute_one_graph_compute_CONV_layer_message_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    edge_embedding_V_U : component GIN_compute_one_graph_compute_CONV_layer_edge_embedding_V
    generic map (
        DataWidth => 32,
        AddressRange => 150000,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => edge_embedding_V_address0,
        ce0 => edge_embedding_V_ce0,
        q0 => edge_embedding_V_q0,
        address1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_address1,
        ce1 => edge_embedding_V_ce1,
        we1 => edge_embedding_V_we1,
        d1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_d1);

    message_V_U : component GIN_compute_one_graph_compute_CONV_layer_message_V
    generic map (
        DataWidth => 32,
        AddressRange => 60000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => message_V_address0,
        ce0 => message_V_ce0,
        q0 => message_V_q0,
        address1 => grp_message_passing_fu_4849_message_V_address1,
        ce1 => message_V_ce1,
        we1 => message_V_we1,
        d1 => grp_message_passing_fu_4849_message_V_d1);

    grp_MLP_fu_2428 : component GIN_compute_one_graph_MLP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MLP_fu_2428_ap_start,
        ap_done => grp_MLP_fu_2428_ap_done,
        ap_idle => grp_MLP_fu_2428_ap_idle,
        ap_ready => grp_MLP_fu_2428_ap_ready,
        layer => layer,
        node_embedding_V_address0 => grp_MLP_fu_2428_node_embedding_V_address0,
        node_embedding_V_ce0 => grp_MLP_fu_2428_node_embedding_V_ce0,
        node_embedding_V_q0 => node_embedding_V_q0,
        node_embedding_V_address1 => grp_MLP_fu_2428_node_embedding_V_address1,
        node_embedding_V_ce1 => grp_MLP_fu_2428_node_embedding_V_ce1,
        node_embedding_V_we1 => grp_MLP_fu_2428_node_embedding_V_we1,
        node_embedding_V_d1 => grp_MLP_fu_2428_node_embedding_V_d1,
        message_V_address0 => grp_MLP_fu_2428_message_V_address0,
        message_V_ce0 => grp_MLP_fu_2428_message_V_ce0,
        message_V_q0 => message_V_q0);

    grp_compute_edge_embedding_fu_4837 : component GIN_compute_one_graph_compute_edge_embedding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_edge_embedding_fu_4837_ap_start,
        ap_done => grp_compute_edge_embedding_fu_4837_ap_done,
        ap_idle => grp_compute_edge_embedding_fu_4837_ap_idle,
        ap_ready => grp_compute_edge_embedding_fu_4837_ap_ready,
        layer => layer,
        edge_embedding_V_address0 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_address0,
        edge_embedding_V_ce0 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce0,
        edge_embedding_V_q0 => edge_embedding_V_q0,
        edge_embedding_V_address1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_address1,
        edge_embedding_V_ce1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce1,
        edge_embedding_V_we1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_we1,
        edge_embedding_V_d1 => grp_compute_edge_embedding_fu_4837_edge_embedding_V_d1,
        edge_attr_address0 => grp_compute_edge_embedding_fu_4837_edge_attr_address0,
        edge_attr_ce0 => grp_compute_edge_embedding_fu_4837_edge_attr_ce0,
        edge_attr_q0 => edge_attr_q0);

    grp_message_passing_fu_4849 : component GIN_compute_one_graph_message_passing
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_message_passing_fu_4849_ap_start,
        ap_done => grp_message_passing_fu_4849_ap_done,
        ap_idle => grp_message_passing_fu_4849_ap_idle,
        ap_ready => grp_message_passing_fu_4849_ap_ready,
        message_V_address0 => grp_message_passing_fu_4849_message_V_address0,
        message_V_ce0 => grp_message_passing_fu_4849_message_V_ce0,
        message_V_q0 => message_V_q0,
        message_V_address1 => grp_message_passing_fu_4849_message_V_address1,
        message_V_ce1 => grp_message_passing_fu_4849_message_V_ce1,
        message_V_we1 => grp_message_passing_fu_4849_message_V_we1,
        message_V_d1 => grp_message_passing_fu_4849_message_V_d1,
        edge_list_address0 => grp_message_passing_fu_4849_edge_list_address0,
        edge_list_ce0 => grp_message_passing_fu_4849_edge_list_ce0,
        edge_list_q0 => edge_list_q0,
        edge_list_address1 => grp_message_passing_fu_4849_edge_list_address1,
        edge_list_ce1 => grp_message_passing_fu_4849_edge_list_ce1,
        edge_list_q1 => edge_list_q1,
        edge_embedding_V_address0 => grp_message_passing_fu_4849_edge_embedding_V_address0,
        edge_embedding_V_ce0 => grp_message_passing_fu_4849_edge_embedding_V_ce0,
        edge_embedding_V_q0 => edge_embedding_V_q0,
        node_embedding_V_address0 => grp_message_passing_fu_4849_node_embedding_V_address0,
        node_embedding_V_ce0 => grp_message_passing_fu_4849_node_embedding_V_ce0,
        node_embedding_V_q0 => node_embedding_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_MLP_fu_2428_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MLP_fu_2428_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_MLP_fu_2428_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MLP_fu_2428_ap_ready = ap_const_logic_1)) then 
                    grp_MLP_fu_2428_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_edge_embedding_fu_4837_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_edge_embedding_fu_4837_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_compute_edge_embedding_fu_4837_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_edge_embedding_fu_4837_ap_ready = ap_const_logic_1)) then 
                    grp_compute_edge_embedding_fu_4837_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_message_passing_fu_4849_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_message_passing_fu_4849_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_message_passing_fu_4849_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_message_passing_fu_4849_ap_ready = ap_const_logic_1)) then 
                    grp_message_passing_fu_4849_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_MLP_fu_2428_ap_done, grp_compute_edge_embedding_fu_4837_ap_done, grp_message_passing_fu_4849_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_compute_edge_embedding_fu_4837_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_message_passing_fu_4849_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_MLP_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_MLP_fu_2428_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_MLP_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_MLP_fu_2428_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_MLP_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    edge_attr_address0 <= grp_compute_edge_embedding_fu_4837_edge_attr_address0;
    edge_attr_ce0 <= grp_compute_edge_embedding_fu_4837_edge_attr_ce0;

    edge_embedding_V_address0_assign_proc : process(grp_compute_edge_embedding_fu_4837_edge_embedding_V_address0, grp_message_passing_fu_4849_edge_embedding_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge_embedding_V_address0 <= grp_message_passing_fu_4849_edge_embedding_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_address0 <= grp_compute_edge_embedding_fu_4837_edge_embedding_V_address0;
        else 
            edge_embedding_V_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    edge_embedding_V_ce0_assign_proc : process(grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce0, grp_message_passing_fu_4849_edge_embedding_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            edge_embedding_V_ce0 <= grp_message_passing_fu_4849_edge_embedding_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_ce0 <= grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce0;
        else 
            edge_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_ce1_assign_proc : process(grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_ce1 <= grp_compute_edge_embedding_fu_4837_edge_embedding_V_ce1;
        else 
            edge_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    edge_embedding_V_we1_assign_proc : process(grp_compute_edge_embedding_fu_4837_edge_embedding_V_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            edge_embedding_V_we1 <= grp_compute_edge_embedding_fu_4837_edge_embedding_V_we1;
        else 
            edge_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    edge_list_address0 <= grp_message_passing_fu_4849_edge_list_address0;
    edge_list_address1 <= grp_message_passing_fu_4849_edge_list_address1;
    edge_list_ce0 <= grp_message_passing_fu_4849_edge_list_ce0;
    edge_list_ce1 <= grp_message_passing_fu_4849_edge_list_ce1;
    grp_MLP_fu_2428_ap_start <= grp_MLP_fu_2428_ap_start_reg;
    grp_compute_edge_embedding_fu_4837_ap_start <= grp_compute_edge_embedding_fu_4837_ap_start_reg;
    grp_message_passing_fu_4849_ap_start <= grp_message_passing_fu_4849_ap_start_reg;

    message_V_address0_assign_proc : process(grp_MLP_fu_2428_message_V_address0, grp_message_passing_fu_4849_message_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_V_address0 <= grp_message_passing_fu_4849_message_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            message_V_address0 <= grp_MLP_fu_2428_message_V_address0;
        else 
            message_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    message_V_ce0_assign_proc : process(grp_MLP_fu_2428_message_V_ce0, grp_message_passing_fu_4849_message_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_V_ce0 <= grp_message_passing_fu_4849_message_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            message_V_ce0 <= grp_MLP_fu_2428_message_V_ce0;
        else 
            message_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_ce1_assign_proc : process(grp_message_passing_fu_4849_message_V_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_V_ce1 <= grp_message_passing_fu_4849_message_V_ce1;
        else 
            message_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    message_V_we1_assign_proc : process(grp_message_passing_fu_4849_message_V_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_V_we1 <= grp_message_passing_fu_4849_message_V_we1;
        else 
            message_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_address0_assign_proc : process(grp_MLP_fu_2428_node_embedding_V_address0, grp_message_passing_fu_4849_node_embedding_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            node_embedding_V_address0 <= grp_message_passing_fu_4849_node_embedding_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            node_embedding_V_address0 <= grp_MLP_fu_2428_node_embedding_V_address0;
        else 
            node_embedding_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    node_embedding_V_address1 <= grp_MLP_fu_2428_node_embedding_V_address1;

    node_embedding_V_ce0_assign_proc : process(grp_MLP_fu_2428_node_embedding_V_ce0, grp_message_passing_fu_4849_node_embedding_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            node_embedding_V_ce0 <= grp_message_passing_fu_4849_node_embedding_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            node_embedding_V_ce0 <= grp_MLP_fu_2428_node_embedding_V_ce0;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_ce1_assign_proc : process(grp_MLP_fu_2428_node_embedding_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            node_embedding_V_ce1 <= grp_MLP_fu_2428_node_embedding_V_ce1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    node_embedding_V_d1 <= grp_MLP_fu_2428_node_embedding_V_d1;

    node_embedding_V_we1_assign_proc : process(grp_MLP_fu_2428_node_embedding_V_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            node_embedding_V_we1 <= grp_MLP_fu_2428_node_embedding_V_we1;
        else 
            node_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
