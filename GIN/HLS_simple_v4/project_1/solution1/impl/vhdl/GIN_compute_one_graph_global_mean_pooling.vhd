-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_one_graph_global_mean_pooling is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_embedding_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce0 : OUT STD_LOGIC;
    node_embedding_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_embedding_V_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    node_embedding_V_ce1 : OUT STD_LOGIC;
    node_embedding_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_one_graph_global_mean_pooling is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv10_12C : STD_LOGIC_VECTOR (9 downto 0) := "0100101100";
    constant ap_const_lv10_258 : STD_LOGIC_VECTOR (9 downto 0) := "1001011000";
    constant ap_const_lv11_384 : STD_LOGIC_VECTOR (10 downto 0) := "01110000100";
    constant ap_const_lv11_4B0 : STD_LOGIC_VECTOR (10 downto 0) := "10010110000";
    constant ap_const_lv11_5DC : STD_LOGIC_VECTOR (10 downto 0) := "10111011100";
    constant ap_const_lv12_708 : STD_LOGIC_VECTOR (11 downto 0) := "011100001000";
    constant ap_const_lv12_834 : STD_LOGIC_VECTOR (11 downto 0) := "100000110100";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_A8C : STD_LOGIC_VECTOR (11 downto 0) := "101010001100";
    constant ap_const_lv12_BB8 : STD_LOGIC_VECTOR (11 downto 0) := "101110111000";
    constant ap_const_lv11_4E4 : STD_LOGIC_VECTOR (10 downto 0) := "10011100100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_210 : STD_LOGIC_VECTOR (9 downto 0) := "1000010000";
    constant ap_const_lv13_F3C : STD_LOGIC_VECTOR (12 downto 0) := "0111100111100";
    constant ap_const_lv13_1068 : STD_LOGIC_VECTOR (12 downto 0) := "1000001101000";
    constant ap_const_lv13_1194 : STD_LOGIC_VECTOR (12 downto 0) := "1000110010100";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv13_13EC : STD_LOGIC_VECTOR (12 downto 0) := "1001111101100";
    constant ap_const_lv13_1518 : STD_LOGIC_VECTOR (12 downto 0) := "1010100011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_1AF286BCB : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110101111001010000110101111001011";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal graph_embedding_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal graph_embedding_V_ce1 : STD_LOGIC;
    signal graph_embedding_V_we1 : STD_LOGIC;
    signal graph_embedding_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dim_reg_268 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln300_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln300_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln300_reg_693_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dim_cast_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dim_cast_reg_697 : STD_LOGIC_VECTOR (63 downto 0);
    signal dim_cast_reg_697_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_7_fu_314_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_7_reg_702 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln703_8_fu_329_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln703_8_reg_718 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln703_3_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_3_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_6_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln703_6_reg_750 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_7_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_7_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln300_fu_480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln300_reg_792 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln703_fu_486_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln703_reg_797 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_9_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_9_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal add_ln703_11_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_11_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_17_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_17_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_phi_mux_dim_phi_fu_272_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln703_9_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_10_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln703_11_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_12_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln703_13_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_14_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln703_15_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_16_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln703_17_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_18_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln703_19_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_20_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln703_21_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_22_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln703_23_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_24_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln703_25_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_26_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal add_ln703_19_fu_318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_20_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_21_fu_343_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_22_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_23_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_2_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_24_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_25_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_26_fu_418_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_27_fu_428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_28_fu_438_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_29_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln703_fu_453_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_5_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_6_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_30_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln703_1_fu_495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_31_fu_504_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_32_fu_521_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_33_fu_531_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_10_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_34_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_35_fu_563_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_36_fu_573_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_14_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_15_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_16_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_12_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_18_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_8_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1148_fu_632_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1148_fu_632_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln1148_fu_638_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_fu_644_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_658_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1148_1_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_2_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_1_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_one_graph_mul_32s_34ns_65_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component GIN_compute_one_graph_global_mean_pooling_graph_embedding_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    graph_embedding_V_U : component GIN_compute_one_graph_global_mean_pooling_graph_embedding_V
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address1 => graph_embedding_V_address1,
        ce1 => graph_embedding_V_ce1,
        we1 => graph_embedding_V_we1,
        d1 => graph_embedding_V_d1);

    mul_32s_34ns_65_1_1_U657 : component GIN_compute_one_graph_mul_32s_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => add_ln703_17_reg_851,
        din1 => mul_ln1148_fu_632_p1,
        dout => mul_ln1148_fu_632_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dim_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dim_reg_268 <= add_ln300_reg_792;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                dim_reg_268 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_280 <= node_embedding_V_q0;
            elsif ((((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then 
                reg_280 <= node_embedding_V_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln300_reg_792 <= add_ln300_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln703_11_reg_831 <= add_ln703_11_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_17_reg_851 <= add_ln703_17_fu_615_p2;
                tmp_2_reg_856 <= add_ln703_17_fu_615_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln703_3_reg_745 <= add_ln703_3_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln703_7_reg_787 <= add_ln703_7_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln703_9_reg_816 <= add_ln703_9_fu_515_p2;
                    zext_ln703_reg_797(8 downto 0) <= zext_ln703_fu_486_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln300_fu_303_p2 = ap_const_lv1_0))) then
                    dim_cast_reg_697(8 downto 0) <= dim_cast_fu_309_p1(8 downto 0);
                    zext_ln703_7_reg_702(8 downto 0) <= zext_ln703_7_fu_314_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    dim_cast_reg_697_pp0_iter1_reg(8 downto 0) <= dim_cast_reg_697(8 downto 0);
                icmp_ln300_reg_693 <= icmp_ln300_fu_303_p2;
                icmp_ln300_reg_693_pp0_iter1_reg <= icmp_ln300_reg_693;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_285 <= node_embedding_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_289 <= node_embedding_V_q1;
                reg_293 <= node_embedding_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    zext_ln703_6_reg_750(8 downto 0) <= zext_ln703_6_fu_392_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln703_8_reg_718(8 downto 0) <= zext_ln703_8_fu_329_p1(8 downto 0);
            end if;
        end if;
    end process;
    dim_cast_reg_697(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    dim_cast_reg_697_pp0_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln703_7_reg_702(9) <= '0';
    zext_ln703_8_reg_718(10 downto 9) <= "00";
    zext_ln703_6_reg_750(11 downto 9) <= "000";
    zext_ln703_reg_797(12 downto 9) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln300_reg_693, ap_block_pp0_stage6_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((not(((icmp_ln300_reg_693 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                elsif (((icmp_ln300_reg_693 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln300_fu_480_p2 <= std_logic_vector(unsigned(dim_reg_268) + unsigned(ap_const_lv9_1));
    add_ln703_10_fu_541_p2 <= std_logic_vector(unsigned(node_embedding_V_q1) + unsigned(node_embedding_V_q0));
    add_ln703_11_fu_547_p2 <= std_logic_vector(unsigned(add_ln703_10_fu_541_p2) + unsigned(reg_280));
    add_ln703_12_fu_587_p2 <= std_logic_vector(unsigned(add_ln703_11_reg_831) + unsigned(add_ln703_9_reg_816));
    add_ln703_14_fu_591_p2 <= std_logic_vector(unsigned(reg_293) + unsigned(node_embedding_V_q0));
    add_ln703_15_fu_597_p2 <= std_logic_vector(unsigned(add_ln703_14_fu_591_p2) + unsigned(reg_289));
    add_ln703_16_fu_603_p2 <= std_logic_vector(unsigned(add_ln703_15_fu_597_p2) + unsigned(grp_fu_297_p2));
    add_ln703_17_fu_615_p2 <= std_logic_vector(unsigned(add_ln703_18_fu_609_p2) + unsigned(add_ln703_8_fu_583_p2));
    add_ln703_18_fu_609_p2 <= std_logic_vector(unsigned(add_ln703_16_fu_603_p2) + unsigned(add_ln703_12_fu_587_p2));
    add_ln703_19_fu_318_p2 <= std_logic_vector(unsigned(zext_ln703_7_fu_314_p1) + unsigned(ap_const_lv10_12C));
    add_ln703_20_fu_333_p2 <= std_logic_vector(unsigned(zext_ln703_7_reg_702) + unsigned(ap_const_lv10_258));
    add_ln703_21_fu_343_p2 <= std_logic_vector(unsigned(zext_ln703_8_fu_329_p1) + unsigned(ap_const_lv11_384));
    add_ln703_22_fu_354_p2 <= std_logic_vector(unsigned(zext_ln703_8_reg_718) + unsigned(ap_const_lv11_4B0));
    add_ln703_23_fu_364_p2 <= std_logic_vector(unsigned(zext_ln703_8_reg_718) + unsigned(ap_const_lv11_5DC));
    add_ln703_24_fu_396_p2 <= std_logic_vector(unsigned(zext_ln703_6_fu_392_p1) + unsigned(ap_const_lv12_708));
    add_ln703_25_fu_407_p2 <= std_logic_vector(unsigned(zext_ln703_6_fu_392_p1) + unsigned(ap_const_lv12_834));
    add_ln703_26_fu_418_p2 <= std_logic_vector(unsigned(zext_ln703_6_reg_750) + unsigned(ap_const_lv12_960));
    add_ln703_27_fu_428_p2 <= std_logic_vector(unsigned(zext_ln703_6_reg_750) + unsigned(ap_const_lv12_A8C));
    add_ln703_28_fu_438_p2 <= std_logic_vector(unsigned(zext_ln703_6_reg_750) + unsigned(ap_const_lv12_BB8));
    add_ln703_29_fu_448_p2 <= std_logic_vector(unsigned(zext_ln703_8_reg_718) + unsigned(ap_const_lv11_4E4));
    add_ln703_2_fu_380_p2 <= std_logic_vector(unsigned(node_embedding_V_q1) + unsigned(node_embedding_V_q0));
    add_ln703_30_fu_490_p2 <= std_logic_vector(unsigned(zext_ln703_7_reg_702) + unsigned(ap_const_lv10_210));
    add_ln703_31_fu_504_p2 <= std_logic_vector(unsigned(zext_ln703_fu_486_p1) + unsigned(ap_const_lv13_F3C));
    add_ln703_32_fu_521_p2 <= std_logic_vector(unsigned(zext_ln703_reg_797) + unsigned(ap_const_lv13_1068));
    add_ln703_33_fu_531_p2 <= std_logic_vector(unsigned(zext_ln703_reg_797) + unsigned(ap_const_lv13_1194));
    add_ln703_34_fu_553_p2 <= std_logic_vector(unsigned(zext_ln703_reg_797) + unsigned(ap_const_lv13_12C0));
    add_ln703_35_fu_563_p2 <= std_logic_vector(unsigned(zext_ln703_reg_797) + unsigned(ap_const_lv13_13EC));
    add_ln703_36_fu_573_p2 <= std_logic_vector(unsigned(zext_ln703_reg_797) + unsigned(ap_const_lv13_1518));
    add_ln703_3_fu_386_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_380_p2) + unsigned(add_ln703_fu_374_p2));
    add_ln703_5_fu_462_p2 <= std_logic_vector(unsigned(reg_293) + unsigned(node_embedding_V_q1));
    add_ln703_6_fu_468_p2 <= std_logic_vector(unsigned(add_ln703_5_fu_462_p2) + unsigned(reg_289));
    add_ln703_7_fu_474_p2 <= std_logic_vector(unsigned(add_ln703_6_fu_468_p2) + unsigned(grp_fu_297_p2));
    add_ln703_8_fu_583_p2 <= std_logic_vector(unsigned(add_ln703_7_reg_787) + unsigned(add_ln703_3_reg_745));
    add_ln703_9_fu_515_p2 <= std_logic_vector(unsigned(reg_280) + unsigned(node_embedding_V_q1));
    add_ln703_fu_374_p2 <= std_logic_vector(unsigned(reg_285) + unsigned(reg_280));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln300_reg_693)
    begin
        if ((icmp_ln300_reg_693 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dim_phi_fu_272_p4_assign_proc : process(dim_reg_268, icmp_ln300_reg_693, ap_CS_fsm_pp0_stage0, add_ln300_reg_792, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln300_reg_693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_dim_phi_fu_272_p4 <= add_ln300_reg_792;
        else 
            ap_phi_mux_dim_phi_fu_272_p4 <= dim_reg_268;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dim_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_dim_phi_fu_272_p4),64));
    graph_embedding_V_address1 <= dim_cast_reg_697_pp0_iter1_reg(9 - 1 downto 0);

    graph_embedding_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            graph_embedding_V_ce1 <= ap_const_logic_1;
        else 
            graph_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    graph_embedding_V_d1 <= 
        sub_ln1148_1_fu_679_p2 when (tmp_2_reg_856(0) = '1') else 
        sext_ln1148_2_fu_668_p1;

    graph_embedding_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln300_reg_693_pp0_iter1_reg, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln300_reg_693_pp0_iter1_reg = ap_const_lv1_0))) then 
            graph_embedding_V_we1 <= ap_const_logic_1;
        else 
            graph_embedding_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p2 <= std_logic_vector(unsigned(reg_280) + unsigned(reg_285));
    icmp_ln300_fu_303_p2 <= "1" when (ap_phi_mux_dim_phi_fu_272_p4 = ap_const_lv9_12C) else "0";
    mul_ln1148_fu_632_p1 <= ap_const_lv65_1AF286BCB(34 - 1 downto 0);

    node_embedding_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, zext_ln703_9_fu_324_p1, ap_block_pp0_stage1, zext_ln703_11_fu_349_p1, ap_block_pp0_stage2, zext_ln703_13_fu_369_p1, ap_block_pp0_stage3, zext_ln703_15_fu_413_p1, ap_block_pp0_stage4, zext_ln703_17_fu_433_p1, ap_block_pp0_stage5, zext_ln703_19_fu_457_p1, ap_block_pp0_stage6, zext_ln703_21_fu_510_p1, ap_block_pp0_stage7, zext_ln703_23_fu_536_p1, ap_block_pp0_stage8, zext_ln703_25_fu_568_p1, zext_ln703_26_fu_578_p1, ap_block_pp0_stage9)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                node_embedding_V_address0 <= zext_ln703_26_fu_578_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                node_embedding_V_address0 <= zext_ln703_25_fu_568_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                node_embedding_V_address0 <= zext_ln703_23_fu_536_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                node_embedding_V_address0 <= zext_ln703_21_fu_510_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                node_embedding_V_address0 <= zext_ln703_19_fu_457_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                node_embedding_V_address0 <= zext_ln703_17_fu_433_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                node_embedding_V_address0 <= zext_ln703_15_fu_413_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                node_embedding_V_address0 <= zext_ln703_13_fu_369_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                node_embedding_V_address0 <= zext_ln703_11_fu_349_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                node_embedding_V_address0 <= zext_ln703_9_fu_324_p1(16 - 1 downto 0);
            else 
                node_embedding_V_address0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            node_embedding_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, dim_cast_fu_309_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, zext_ln703_10_fu_338_p1, ap_block_pp0_stage1, zext_ln703_12_fu_359_p1, ap_block_pp0_stage2, zext_ln703_14_fu_402_p1, ap_block_pp0_stage3, zext_ln703_16_fu_423_p1, ap_block_pp0_stage4, zext_ln703_18_fu_443_p1, ap_block_pp0_stage5, zext_ln703_20_fu_499_p1, ap_block_pp0_stage6, zext_ln703_22_fu_526_p1, ap_block_pp0_stage7, zext_ln703_24_fu_558_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                node_embedding_V_address1 <= zext_ln703_24_fu_558_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                node_embedding_V_address1 <= zext_ln703_22_fu_526_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                node_embedding_V_address1 <= zext_ln703_20_fu_499_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                node_embedding_V_address1 <= zext_ln703_18_fu_443_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                node_embedding_V_address1 <= zext_ln703_16_fu_423_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                node_embedding_V_address1 <= zext_ln703_14_fu_402_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                node_embedding_V_address1 <= zext_ln703_12_fu_359_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                node_embedding_V_address1 <= zext_ln703_10_fu_338_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                node_embedding_V_address1 <= dim_cast_fu_309_p1(16 - 1 downto 0);
            else 
                node_embedding_V_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            node_embedding_V_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_embedding_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            node_embedding_V_ce0 <= ap_const_logic_1;
        else 
            node_embedding_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_embedding_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            node_embedding_V_ce1 <= ap_const_logic_1;
        else 
            node_embedding_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1148_fu_672_p3 <= 
        sext_ln1148_1_fu_654_p1 when (tmp_2_reg_856(0) = '1') else 
        sext_ln1148_2_fu_668_p1;
        sext_ln1148_1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_644_p4),32));

        sext_ln1148_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_658_p4),32));

        sext_ln703_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_30_fu_490_p2),12));

        sext_ln703_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_29_fu_448_p2),12));

    sub_ln1148_1_fu_679_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1148_fu_672_p3));
    sub_ln1148_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1148_fu_632_p2));
    tmp_3_fu_644_p4 <= sub_ln1148_fu_638_p2(64 downto 37);
    tmp_fu_658_p4 <= mul_ln1148_fu_632_p2(64 downto 37);
    zext_ln703_10_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_20_fu_333_p2),64));
    zext_ln703_11_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_21_fu_343_p2),64));
    zext_ln703_12_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_22_fu_354_p2),64));
    zext_ln703_13_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_23_fu_364_p2),64));
    zext_ln703_14_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_24_fu_396_p2),64));
    zext_ln703_15_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_25_fu_407_p2),64));
    zext_ln703_16_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_26_fu_418_p2),64));
    zext_ln703_17_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_27_fu_428_p2),64));
    zext_ln703_18_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_28_fu_438_p2),64));
    zext_ln703_19_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln703_fu_453_p1),64));
    zext_ln703_20_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln703_1_fu_495_p1),64));
    zext_ln703_21_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_31_fu_504_p2),64));
    zext_ln703_22_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_32_fu_521_p2),64));
    zext_ln703_23_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_33_fu_531_p2),64));
    zext_ln703_24_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_34_fu_553_p2),64));
    zext_ln703_25_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_35_fu_563_p2),64));
    zext_ln703_26_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_36_fu_573_p2),64));
    zext_ln703_6_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_268),12));
    zext_ln703_7_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_dim_phi_fu_272_p4),10));
    zext_ln703_8_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_268),11));
    zext_ln703_9_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_19_fu_318_p2),64));
    zext_ln703_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dim_reg_268),13));
end behav;
